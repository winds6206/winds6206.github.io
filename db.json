{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/google1629c45428e9c281.html","path":"google1629c45428e9c281.html","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/IMG_1598.JPG","path":"images/IMG_1598.JPG","modified":0,"renderable":1},{"_id":"themes/next/source/images/IMG_1598.jpg","path":"images/IMG_1598.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/fire.png","path":"images/fire.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"95562f77ecf37b55eb5e152b6425b521e566b09d","modified":1696433617184},{"_id":"source/google1629c45428e9c281.html","hash":"89a43015d373e502e603183c576bc7029317103c","modified":1696433617196},{"_id":"source/_data/post-body-end.njk","hash":"6c5186b77c4f99b5693c2affad4a02fb768d94e2","modified":1696433617184},{"_id":"source/_data/sidebar.njk","hash":"2be753db9e151a66903d27ff824e3a9cb789cad7","modified":1696433617184},{"_id":"source/_data/styles.styl","hash":"79ca0c069992d74201b1c592dad2292cc06408c6","modified":1696433617184},{"_id":"source/_drafts/GitHub-Pages自訂域名.md","hash":"18f004ffdf17b7606fa62cb0663b2f955b0b612b","modified":1696433617184},{"_id":"source/_drafts/Nginx高併發優化.md","hash":"717e1cc6f332c7d15c32848178192c32fde4e589","modified":1696433617184},{"_id":"source/_drafts/SSL-For-Free_Let-s-Encrypt.md","hash":"f3e54848084172f1d532803f7031bde742d46ea2","modified":1696433617184},{"_id":"source/_drafts/homebrew-shallow-clone.md","hash":"1966c32b73e165d694ecc66a3887e059a1bbe072","modified":1696433617184},{"_id":"source/_drafts/max-execution-time-vs-request-terminate-timeout.md","hash":"30270c32f1bee50ae528e1cdca1e1472e8e1ff98","modified":1696433617184},{"_id":"source/_drafts/stakater-reloader.md","hash":"c97a7abf1c658d80a3ad576841691704f2ea5799","modified":1696433617184},{"_id":"source/_drafts/什麼是HSTS.md","hash":"bc434999b542a82fae1c7869023d59a9ed45eeef","modified":1696433617184},{"_id":"source/_drafts/如何自簽憑證.md","hash":"5e12bf2e8b6f3214bbc2a616d6cd16a66f14b515","modified":1696433617188},{"_id":"source/_posts/Auto-Completion不區分大小寫.md","hash":"116d5bc0cdd57b8a5f882005174be63d79694268","modified":1696433617188},{"_id":"source/_posts/Cloud-NAT的限制.md","hash":"e9af087ce4991700224a74b4ffd1cf76a76a1e36","modified":1696433617188},{"_id":"source/_posts/Hexo加入Disqus留言功能.md","hash":"55d92246132242d14bc24a0b0892cb4fa0931c2a","modified":1696433617188},{"_id":"source/_posts/Hexo建立草稿.md","hash":"bee9b1c175775e5868d2481d2f39ffefe29d2f35","modified":1696433617188},{"_id":"source/_posts/Hexo文章插入圖片.md","hash":"66992cc15941ca9a6251ed4abdafba40afe14c1e","modified":1696433617188},{"_id":"source/_posts/Hexo標籤的使用.md","hash":"9e2faf349fb4b0f3656f251a4e1741ec3ad5b7f0","modified":1696433617188},{"_id":"source/_posts/Hexo的分類功能.md","hash":"41653c97307601c039ef200b494c24e696eccf1b","modified":1696433617188},{"_id":"source/_posts/Hexo的關於功能.md","hash":"8f1bbf8249213e2f0f3c76a8b96d2d003b1c053b","modified":1696433617188},{"_id":"source/_posts/PHP-FPM行程優化.md","hash":"39ca438d2401d901fcb87d7fb8a5788907d7d6a9","modified":1696433617188},{"_id":"source/_posts/SSH連線警告.md","hash":"ba645dd33053918fbefb098bdc6631927f293626","modified":1696433617188},{"_id":"source/_posts/TIME-WAIT狀態如何產生.md","hash":"8acb3b162063175e5bdbe24248cb8039dadf2ebd","modified":1696433617188},{"_id":"source/_posts/htpasswd的使用.md","hash":"62481a2e37d783037065d612c18cbbc44b33d0c3","modified":1704698504617},{"_id":"source/_posts/使用GitHub-Pages.md","hash":"60c4e8a59f622f41dc223d936c144ef3524485d0","modified":1696433617192},{"_id":"source/_posts/在K8s使用FTP.md","hash":"38f2a60815a355b00d9f056d7ca3ebc78afd18cf","modified":1696433617192},{"_id":"source/_posts/如何修改PHP-FPM上傳檔案大小限制.md","hash":"d2c9bb95f7a7eba6d7add138b24c245a11907079","modified":1696433617196},{"_id":"source/about/index.md","hash":"0483c09e1bb413a6bc91e15fd8e3ba9a2d584978","modified":1696433617196},{"_id":"source/categories/index.md","hash":"689b642708b3a1925e0dce626073095e563fc746","modified":1696433617196},{"_id":"source/tags/index.md","hash":"abf434f92fafa0a5164379705beaf6ad697b995d","modified":1696433617196},{"_id":"source/_drafts/什麼是HSTS/HSTS-0.png","hash":"85658a5c02341e7105919282ddfcdddc5de06d76","modified":1696433617184},{"_id":"source/_drafts/什麼是HSTS/HSTS-1.png","hash":"48e61166b402fb57ee005d386065b38469233266","modified":1696433617184},{"_id":"source/_drafts/什麼是HSTS/HSTS-2.png","hash":"e6d7cef853fb41cdaf4cfa169dd521590a9eaa78","modified":1696433617184},{"_id":"source/_drafts/什麼是HSTS/HSTS-3.png","hash":"6f1b3e315ce7ee03ec950f16a8352c6cec48699e","modified":1696433617188},{"_id":"source/_posts/在K8s使用FTP/2.png","hash":"da233939eda25aeba01f733922b60106837aebfc","modified":1696433617196},{"_id":"source/_posts/在K8s使用FTP/3.png","hash":"5c99be86c4881c89ff314475b3e77dafed1c6074","modified":1696433617196},{"_id":"source/_posts/在K8s使用FTP/4.png","hash":"fede58c84dbd367be60b554214d534e7c4d20bd9","modified":1696433617196},{"_id":"source/_posts/TIME-WAIT狀態如何產生/TCPIP-0.png","hash":"28fd258b24980e34b4bf2bc3e489e7a2c5917257","modified":1696433617188},{"_id":"source/_posts/TIME-WAIT狀態如何產生/TCPIP-1.png","hash":"06ff680526d3a2e410950d696c5651f0c25911f1","modified":1696433617188},{"_id":"source/_posts/TIME-WAIT狀態如何產生/TCPIP-2.png","hash":"e7cb9bb9f4e64c301812f2bf147fd5033250512c","modified":1696433617188},{"_id":"source/_posts/TIME-WAIT狀態如何產生/TCPIP-3.png","hash":"901dd6d802f328d15cbcc23d787acd9d0aa3835e","modified":1696433617192},{"_id":"source/_posts/在K8s使用FTP/1.png","hash":"bdc11e00fd5b72cc5d084d94b243d7f98db514c0","modified":1696433617192},{"_id":"source/_posts/Hexo加入Disqus留言功能/0.png","hash":"ea09ba1b2a9dde60015ffaab62b44cb2a81e3a2a","modified":1696433617188},{"_id":"source/_posts/TIME-WAIT狀態如何產生/TCPIP-4.png","hash":"55913e713f9501ec1fd3957886438d86f189b03e","modified":1696433617192},{"_id":"source/_posts/在K8s使用FTP/0.png","hash":"40400075bc99724afd4cb48dadf6b5753f46c3df","modified":1696433617192},{"_id":"source/_posts/使用GitHub-Pages/1.png","hash":"6c8743520511e3e8d8f18f4ec47866a68672ad14","modified":1696433617192},{"_id":"themes/next/.gitignore","hash":"4600f2b61b2fe0d61f824bda9aa2b5d072f0e635","modified":1696433617196},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1696433617196},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1696433617196},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1696433617196},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1696433617196},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1696433617196},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1696433617196},{"_id":"themes/next/README.md","hash":"de109b73e09826f6bccceae60c618739a794f8f7","modified":1696433617196},{"_id":"themes/next/_vendors.yml","hash":"ba1a58b2ab243f56c9e78e2dd764a8935580ca3a","modified":1696433617196},{"_id":"themes/next/package.json","hash":"4f5f0137b27ef341f182a3dd9897b332480452c0","modified":1696433617200},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1696433617200},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1696433617196},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1696433617196},{"_id":"themes/next/_config.yml","hash":"00d7df14446e491e13712c609e163410124302c1","modified":1696433617196},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1696433617196},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1696433617196},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1696433617196},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1696433617196},{"_id":"themes/next/.github/labeler.yml","hash":"e7033752b1f7c35adb61c2b38aad0a9202cdd19b","modified":1696433617196},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1696433617196},{"_id":"themes/next/.github/release-drafter.yml","hash":"7662e31224a24154c4fe06b95ccbdff51ab8f2cc","modified":1696433617196},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1696433617196},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1696433617196},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"eefd073dfb68884cd946f7ec6d3b3619031d7650","modified":1696433617196},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1696433617196},{"_id":"themes/next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1696433617196},{"_id":"themes/next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1696433617196},{"_id":"themes/next/languages/default.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1696433617196},{"_id":"themes/next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1696433617196},{"_id":"themes/next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1696433617196},{"_id":"themes/next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":1696433617196},{"_id":"themes/next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1696433617196},{"_id":"themes/next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1696433617196},{"_id":"themes/next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1696433617196},{"_id":"themes/next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1696433617196},{"_id":"themes/next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1696433617196},{"_id":"themes/next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1696433617196},{"_id":"themes/next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1696433617196},{"_id":"themes/next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1696433617196},{"_id":"themes/next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":1696433617196},{"_id":"themes/next/languages/si.yml","hash":"2a9861db4547a524b2609c1e7e1061d2e9d48ee4","modified":1696433617196},{"_id":"themes/next/languages/tr.yml","hash":"55b38c7617c24bdc27c9de6cf39f4b191d154fb8","modified":1696433617196},{"_id":"themes/next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1696433617196},{"_id":"themes/next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1696433617196},{"_id":"themes/next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1696433617196},{"_id":"themes/next/languages/zh-HK.yml","hash":"59a3649f304ab3cab02cb1cc8c80c91860f53f3a","modified":1696433617196},{"_id":"themes/next/languages/zh-TW.yml","hash":"b363ee4d02c87d2df1772d64e6d495edaa7e6d6b","modified":1696433617196},{"_id":"themes/next/layout/_layout.njk","hash":"6915e19058b4b4e2b71707cb5ac6c936ef075e89","modified":1696433617196},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1696433617196},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1696433617200},{"_id":"themes/next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1696433617200},{"_id":"themes/next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1696433617200},{"_id":"themes/next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":1696433617200},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1696433617200},{"_id":"themes/next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1696433617200},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1696433617208},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1696433617196},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1696433617196},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1696433617196},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1696433617196},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"44405477660289d4ed9beba1d054b15bb67bba06","modified":1696433617196},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1696433617196},{"_id":"themes/next/.github/workflows/linter.yml","hash":"a3019edd2185c4c287a682fdd76043e107ed927b","modified":1696433617196},{"_id":"themes/next/.github/workflows/lock.yml","hash":"70bd0be3f33774e4b0ada3a59c901f8f9cff1013","modified":1696433617196},{"_id":"themes/next/.github/workflows/stale.yml","hash":"e1d9cc9addc35cfb53f971f14d9d04065c941df0","modified":1696433617196},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1696433617196},{"_id":"themes/next/.github/workflows/tester.yml","hash":"22aaaa3eba1a7ebcf0f78417fd9a7113ee7b6c6c","modified":1696433617196},{"_id":"themes/next/docs/ru/README.md","hash":"63df0665005063108e1bc19df3cf8c4e46facb95","modified":1696433617196},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1696433617196},{"_id":"themes/next/docs/zh-CN/README.md","hash":"9abd8473985f2bf1557b1aac31b436c92d5450a7","modified":1696433617196},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":1696433617196},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1696433617196},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1696433617196},{"_id":"themes/next/layout/_partials/comments.njk","hash":"334e8d8117a46c8c097788811322a62627952219","modified":1696433617196},{"_id":"themes/next/layout/_partials/footer.njk","hash":"d16fdaf94d66efc0242b0c26ed539017e3b4f795","modified":1696433617196},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1696433617200},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1696433617200},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1696433617200},{"_id":"themes/next/layout/_macro/post.njk","hash":"b92d6c77d4b349c5d56fb8e0a44b578c194ef466","modified":1696433617196},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6f0433940680c0f9db37542ca36f76e4bb1c1d50","modified":1696433617200},{"_id":"themes/next/layout/_scripts/noscript.njk","hash":"4f250d0bf80be06dd2c95c1d4c2ba2624b59cf2a","modified":1696433617200},{"_id":"themes/next/layout/_scripts/pjax.njk","hash":"28a3bcb1ce50924a5a48b0f3756ac3a8736867f1","modified":1696433617200},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"bada07da2a47ed6de6081796367b19dd9e906cfb","modified":1696433617200},{"_id":"themes/next/layout/_third-party/index.njk","hash":"467b45a4912369bcba77908151e76a3f3ad0fed2","modified":1696433617200},{"_id":"themes/next/layout/_third-party/nprogress.njk","hash":"271139c3896a6d294f46f767cb21b2e848050841","modified":1696433617200},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"294b7f6a4fa566e369d8be0ce7b28f35b6c14563","modified":1696433617200},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1696433617200},{"_id":"themes/next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1696433617200},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1696433617200},{"_id":"themes/next/scripts/filters/locals.js","hash":"374c9211b3b6a5b2ad31f1bea69a22f2727f633a","modified":1696433617200},{"_id":"themes/next/scripts/filters/minify.js","hash":"be0574c64a38210e449c99d38a760452015060a3","modified":1696433617200},{"_id":"themes/next/scripts/filters/post.js","hash":"42a9b81c5449afa9d67770604478168333c93804","modified":1696433617200},{"_id":"themes/next/scripts/helpers/engine.js","hash":"0208f17281a1afe3da1298dd52350eb838098349","modified":1696433617200},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1696433617200},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"413c51fa3caa87fe95d1d8f95e6023f096515632","modified":1696433617200},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"577c510374cf9bcfa8d3a1027e42411a9324805e","modified":1696433617200},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1696433617200},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1696433617200},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1696433617200},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1696433617200},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1696433617200},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1696433617200},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1696433617200},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"9e2c58d1a4d1dd84fa86144e5b4576b2fd10a37f","modified":1696433617200},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1696433617200},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1696433617200},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1696433617200},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2bf00d56b3b289a7dd27e9b5820430a2457a19f3","modified":1696433617200},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1696433617200},{"_id":"themes/next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1696433617200},{"_id":"themes/next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1696433617204},{"_id":"themes/next/source/css/_mixins.styl","hash":"8b0c0353d360b984d285860697b2ccbec78da462","modified":1696433617204},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1696433617208},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1696433617208},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1696433617208},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1696433617208},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1696433617208},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1696433617208},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1696433617208},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1696433617208},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1696433617208},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1696433617208},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1696433617208},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1696433617208},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1696433617208},{"_id":"themes/next/source/js/algolia-search.js","hash":"a360423984cdd915d04365c51bcab440e52d7223","modified":1696433617208},{"_id":"themes/next/source/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1696433617208},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1696433617208},{"_id":"themes/next/source/js/next-boot.js","hash":"873e52a851a6ce8dc61b870fa7083da4d2304b7b","modified":1696433617208},{"_id":"themes/next/source/js/local-search.js","hash":"da2051e7cab184ae4aa64457c5db7476b4645fdc","modified":1696433617208},{"_id":"themes/next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1696433617208},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1696433617208},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1696433617208},{"_id":"themes/next/test/helpers/next-url.js","hash":"abc4ee5149df6172b2c36b6e85d1993ec748ddea","modified":1696433617208},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1696433617208},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1696433617208},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1696433617208},{"_id":"themes/next/source/js/utils.js","hash":"42ef4f2c0c61aac8fbddd9534f5f86d83dc09c43","modified":1696433617208},{"_id":"themes/next/test/tags/group-pictures.js","hash":"f41640e5d0f552c0b0c4ac8876a2edb0fcf54e56","modified":1696433617208},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1696433617208},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1696433617208},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1696433617208},{"_id":"themes/next/test/tags/link-grid.js","hash":"88ec69e4dc1d493d21254ed9296a2514e91f0f8b","modified":1696433617208},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1696433617208},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1696433617208},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1696433617208},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1696433617208},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"37bdf020591feb0cf72327c9efd755bf78a0afd6","modified":1696433617196},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1696433617208},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"8f6521714044676e15d924da387b2aef45fc8fe6","modified":1696433617196},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":1696433617196},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1696433617196},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1696433617196},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1696433617200},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1696433617200},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1696433617200},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1696433617200},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"9d650333160ad1977fe42d9770869ff1660a95fe","modified":1696433617200},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1696433617200},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1696433617200},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1696433617200},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1696433617200},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1696433617200},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1696433617200},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":1696433617200},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1696433617200},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1696433617200},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"1410fad73e0a08a45166e4a055ba150fd06e8636","modified":1696433617200},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1696433617200},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1696433617200},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1696433617200},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"ad197fd728dd7ac90f910fdf80ce848eab3ff187","modified":1696433617200},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c419158e19805e2db614a5f5651e3e534e4a5e4e","modified":1696433617200},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1696433617200},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1696433617200},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1696433617200},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1696433617200},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5c2cd9b6f02bcb6248d3f18638a58e329fe8c0d1","modified":1696433617200},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"cc1450d62d76e59968bdd25836694b8339207384","modified":1696433617200},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"54eab4840443262432ec7c47e56e9859ace2a902","modified":1696433617200},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"089e05126e7e4033eff90a26f946c419f2a1e87a","modified":1696433617200},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"c1bf0753fc4bc5f21d61eaffbcc915a462c7d830","modified":1696433617200},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"6252b0353c6a36d03c68ebec1073293442221bd1","modified":1696433617200},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"7a07bbfb09ddf70b919f0ebe1b00942c96152389","modified":1696433617200},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"b6746dfad32cc8a46ff8f4194a7a16ca41744803","modified":1696433617200},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"f4fd63b9f9230dadd1190f79d59313751925ed90","modified":1696433617200},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"47a982aec8830c2f9711b2aff59ff83f09deb09e","modified":1696433617200},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"97035261aa85c7d39c6ce1211cdefc6248c0446d","modified":1696433617200},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1696433617200},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"0ff61346dc1327054ea2c211ba6fb654cdcdfd8d","modified":1696433617200},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1696433617200},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1696433617200},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"0222d958b98afcf5949522e20fd15f8ca4de20e6","modified":1696433617200},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"b6241ebbb091ef18b3d06cba08ac2e04e3f67a7d","modified":1696433617200},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"811a3ad58c0a15550100bdc199bef8add1ad526c","modified":1696433617200},{"_id":"themes/next/scripts/events/lib/config.js","hash":"09b58494e9d9d25542d1d218f2d0ffc4d2da9f30","modified":1696433617200},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1696433617200},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1696433617200},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"d1ecc44f9f6e236bf910e36150767d36be4658b2","modified":1696433617200},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"7b0ea8d28ced63977dc6539920eb044b1098adcb","modified":1696433617200},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"ecc93ba67af26b6715fc75001fa0c3131b726241","modified":1696433617200},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1696433617200},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"cc1e2d5921c6990f94f3cf11b1ff7533a21da9b7","modified":1696433617200},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1696433617200},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7c0533bac4400689a0d5ab3a188ce42b9375de46","modified":1696433617200},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"32a1d9ad50621a78d0243e176c8b05ff7866fd5b","modified":1696433617200},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1696433617204},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1696433617200},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1696433617204},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1696433617204},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1696433617204},{"_id":"themes/next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":1696433617204},{"_id":"themes/next/source/js/schemes/muse.js","hash":"9d15d0d6a58b1df74827288f117af22b4b6aafe5","modified":1696433617208},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1696433617200},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":1696433617200},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":1696433617200},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"1cffb9c24eea18090b21b9cb908fe07cfeac0c03","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1696433617204},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1696433617200},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"9f88d350df8115d26c6adbc2025a27ef9a42d7ff","modified":1696433617204},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"60be56c9ba590e5bcb80d1607ca7eeedde9fdfaa","modified":1696433617200},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"db5ddaa8fd2101b0fd7108ce4bbcb9f0649fa223","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"87e163de866938c668ec33e6ff8972b7a968e0af","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"2d337a12c5c668ee64447bda5a9ed64eaed5b29e","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1696433617204},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1696433617200},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1696433617200},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1696433617200},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1696433617200},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1696433617200},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1696433617200},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"967021e5483495bdefac9e0b3e1c84c366c657fd","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b1181c5f12a70b8bf710586fcb0d7959841ee512","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1696433617204},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"f11dca93e334b68a29e792f7abe682993fab7568","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"d180871d4440090241fc988736c1f3a7efb4b1ba","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"ab715dbf2b98bfeb5e7b7c43e92e5c02496cc2ea","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1696433617204},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"79ffcf92771cd48f4a686f9d8d7d610f39e9fc1f","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":1696433617204},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":1696433617204},{"_id":"themes/next/source/images/IMG_1598.jpg","hash":"d8d49bbd10eafe50277385dd96ebff38aac93ac0","modified":1696433617208},{"_id":"themes/next/source/images/IMG_1598.JPG","hash":"d8d49bbd10eafe50277385dd96ebff38aac93ac0","modified":1696433617204},{"_id":"themes/next/source/images/fire.png","hash":"4d90ee49a3d4191fe21553a8ebf28c231ae037f5","modified":1696433617208},{"_id":"public/search.xml","hash":"d20c0f85d3adfdaa91741d8028838e9fdc233c2a","modified":1704698747646},{"_id":"public/sitemap.xml","hash":"a99cfc4014f9f876c747939faef5840e83b70245","modified":1704698747646},{"_id":"public/about/index.html","hash":"25f4822b68d1de21eff06da4dd8744cca3c5ba67","modified":1704698747646},{"_id":"public/categories/index.html","hash":"4d59369fd1bbc725bf217f8173655e23e5b8f657","modified":1704698747646},{"_id":"public/archives/page/2/index.html","hash":"5c0a04b1485cab87e8779579dc575694622c32eb","modified":1704698747646},{"_id":"public/archives/2021/page/2/index.html","hash":"4a7e7e7a615ecc7fddb9c04f537988f7493fc250","modified":1704698747646},{"_id":"public/archives/2021/04/index.html","hash":"d924ad3ad83dea427d49c0fbcc8eb6c4a90155e4","modified":1704698747646},{"_id":"public/archives/2021/05/index.html","hash":"c47e1031c23e3943ab3638834d9238472d268cb8","modified":1704698747646},{"_id":"public/archives/2021/07/index.html","hash":"c522861979b3b620f1aa1e4490f7345a9c866d59","modified":1704698747646},{"_id":"public/archives/2021/08/index.html","hash":"3538d4426e4ea380922073a336c33489e8ec2cda","modified":1704698747646},{"_id":"public/archives/2024/index.html","hash":"f815834bcd31b3c84b9eb2f6fafd9f77296ec4dd","modified":1704698747646},{"_id":"public/archives/2024/01/index.html","hash":"4808d5e8e99a38516d9ae3bad9309b6460aea7bd","modified":1704698747646},{"_id":"public/categories/Linux/index.html","hash":"fbc8aabef11162a5ec44e3011355fcac1de50953","modified":1704698747646},{"_id":"public/categories/PHP-FPM/index.html","hash":"f502ca401261fc265fd958c1625935d5e1e5f609","modified":1704698747646},{"_id":"public/categories/GKE/index.html","hash":"ba0a8f909666d2fdc5a5006d5968c5682e4ffeb6","modified":1704698747646},{"_id":"public/categories/GCP/index.html","hash":"4e6d6eca2544da30520606a8a1a38464ef87478c","modified":1704698747646},{"_id":"public/categories/TCP-IP/index.html","hash":"552c8ff9c5757347390b399a4336031b46fbca04","modified":1704698747646},{"_id":"public/tags/GitHub/index.html","hash":"f95bcdc869dbd0fb1c0a67ea4483721da0792fa4","modified":1704698747646},{"_id":"public/tags/GitHub-Pages/index.html","hash":"ab61f5863ed76ae4dc4be48cfc7e05dc21f60a3e","modified":1704698747646},{"_id":"public/tags/PHP/index.html","hash":"7ca1e93e38824996bd4a69b3c724adea0255e65e","modified":1704698747646},{"_id":"public/tags/PHP-FPM/index.html","hash":"0118aa8a3fd94fce592b49b37072933e94b84c26","modified":1704698747646},{"_id":"public/tags/Nginx/index.html","hash":"4ebf217b27eb97fe6c1c55a37e0965f1ac7a6d98","modified":1704698747646},{"_id":"public/tags/GKE/index.html","hash":"78a3a5cdcc0fa489925de573ce95a8f57e0d725e","modified":1704698747646},{"_id":"public/tags/GCP/index.html","hash":"8510c14ffee856b9a184f2ca6771a30fad2eb842","modified":1704698747646},{"_id":"public/tags/K8s/index.html","hash":"a438961815f23645673eace15b8ff7b937b1b7d3","modified":1704698747646},{"_id":"public/tags/Bash/index.html","hash":"cd5fdbd00f18da60463a1804d512c873cbd67a01","modified":1704698747646},{"_id":"public/tags/Auto-Completion/index.html","hash":"0d96a0f8311a3ed1dd494c2738dff7ad6d2252c4","modified":1704698747646},{"_id":"public/tags/Bash-Completion/index.html","hash":"67dddd2ae3211893fb69a76cce02b1bd1c522c3f","modified":1704698747646},{"_id":"public/tags/Linux/index.html","hash":"2ea77bda4179d8e42f13ba67e9e27ef1eb790a3f","modified":1704698747646},{"_id":"public/tags/Google-Cloud-Platform/index.html","hash":"91411cd13bfb0b238b0a5fca62afbc8cecc2e56a","modified":1704698747646},{"_id":"public/tags/Cloud-NAT/index.html","hash":"265e944e7af0dbbb1a6d8bdb0ba70b007a0da18b","modified":1704698747646},{"_id":"public/tags/Disqus/index.html","hash":"7b6f17c0405f9699f8c7beebd9d1af82d81f7b62","modified":1704698747646},{"_id":"public/tags/SSH/index.html","hash":"0e99a8ae4db0116be9c4ce123307f2d6423d9772","modified":1704698747646},{"_id":"public/tags/fingerprint/index.html","hash":"48abbd7424102e668d7e2c1608d97ea684de1bb5","modified":1704698747646},{"_id":"public/tags/known-hosts/index.html","hash":"a0692699c983bc67b79970063acfba293daedf41","modified":1704698747646},{"_id":"public/tags/htpasswd/index.html","hash":"2329e4c0240003c0556c37f2d1eca30869d0733c","modified":1704698747646},{"_id":"public/tags/MD5/index.html","hash":"4d7dc5e78f1c10fc135647519ed7bb45ceda73d3","modified":1704698747646},{"_id":"public/tags/SHA1/index.html","hash":"c29d8f1125f9441a8dc8a12c7a7478ab07ea99be","modified":1704698747646},{"_id":"public/tags/Bcrypt/index.html","hash":"365bba74e1b19216b91b50293b31f53aa67ccf10","modified":1704698747646},{"_id":"public/tags/Apache/index.html","hash":"113efce3663bb8645f83e8b4b54cb88c54b78887","modified":1704698747646},{"_id":"public/tags/TCP/index.html","hash":"5be7c3d5cc444e5ec5286eb519712ecde79b119f","modified":1704698747646},{"_id":"public/tags/Kubernetes/index.html","hash":"cfb4c5f9ff810ba572d0a1adfd54d6c37c0658ef","modified":1704698747646},{"_id":"public/tags/index.html","hash":"4f10162f6869621bdf8a35867eb36854156247d6","modified":1704698747646},{"_id":"public/2021/08/17/TIME-WAIT狀態如何產生/index.html","hash":"2a3c11a9aed479ce6447ac9b9470c4ed73dc6065","modified":1704698747646},{"_id":"public/2024/01/08/htpasswd的使用/index.html","hash":"44ab241fe93dfdbfa07590e8c4f8122f4dd4f5e5","modified":1704698747646},{"_id":"public/2021/08/16/Hexo加入Disqus留言功能/index.html","hash":"57dce3beb92768ff464664f1520188a410ab4b93","modified":1704698747646},{"_id":"public/2021/08/09/SSH連線警告/index.html","hash":"9dbe6defaf7cad6f159373446f5d41a0e472780d","modified":1704698747646},{"_id":"public/2021/07/26/Hexo的關於功能/index.html","hash":"7f18f0187b0f22deb958e3cec2966bcf7f138062","modified":1704698747646},{"_id":"public/2021/07/23/Hexo的分類功能/index.html","hash":"4caa651da084f5d761320d50ffc6caea36006595","modified":1704698747646},{"_id":"public/2021/07/21/Hexo標籤的使用/index.html","hash":"478133429330e1b9ac031363fbaafc8260f870cc","modified":1704698747646},{"_id":"public/2021/07/20/Hexo文章插入圖片/index.html","hash":"c6cbd2fb5768dece375c333a96c6ea15d5fefbdb","modified":1704698747646},{"_id":"public/2021/05/22/如何修改PHP-FPM上傳檔案大小限制/index.html","hash":"f32085796f1d2e58f7f493494e83ad2e128cfe2b","modified":1704698747646},{"_id":"public/2021/05/11/Auto-Completion不區分大小寫/index.html","hash":"ac4c0b662fcd208397244374946b74e19aa3366e","modified":1704698747646},{"_id":"public/2021/05/10/Cloud-NAT的限制/index.html","hash":"c2e4333d18b93d1352094efe927c5c21dd7de22a","modified":1704698747646},{"_id":"public/2021/05/03/使用GitHub-Pages/index.html","hash":"0f45abd5452dcf701e48f75b39df6f28dce5a376","modified":1704698747646},{"_id":"public/2021/05/03/Hexo建立草稿/index.html","hash":"90eac3de5b2bb4d9ef87183ea7a8ce6ef93e3965","modified":1704698747646},{"_id":"public/2021/04/29/PHP-FPM行程優化/index.html","hash":"9051abdbb820107042485a7e916d6e07284fbbfb","modified":1704698747646},{"_id":"public/2021/04/26/在K8s使用FTP/index.html","hash":"2afc758cf4bd4b32c757328b800b65f4c6311503","modified":1704698747646},{"_id":"public/archives/index.html","hash":"a0896f05425f7d1119b33793bf2c3019ba2f003d","modified":1704698747646},{"_id":"public/archives/2021/index.html","hash":"f5ff3986a22cd006598f33595945a2a838799317","modified":1704698747646},{"_id":"public/categories/Hexo/index.html","hash":"3028783aee38da25bf8ec76bd541879cd4c5a50c","modified":1704698747646},{"_id":"public/index.html","hash":"add44b3aedee0fc05da4d6ae9f3f9cc7986231a4","modified":1704698747646},{"_id":"public/page/2/index.html","hash":"ad5102df76e794701285ffd0da2aaa3bfec91509","modified":1704698747646},{"_id":"public/tags/Hexo/index.html","hash":"181a71a2d9e1380da0e7f59548f452d04fbdcd98","modified":1704698747646},{"_id":"public/tags/blog/index.html","hash":"aa219508f8365fb517e6e0c4a5ba1222177edd0d","modified":1704698747646},{"_id":"public/tags/FTP/index.html","hash":"d4cdde429da9d84359e3410d6a0e48c6936fb61c","modified":1704698747646},{"_id":"public/CNAME","hash":"95562f77ecf37b55eb5e152b6425b521e566b09d","modified":1704698747646},{"_id":"public/google1629c45428e9c281.html","hash":"89a43015d373e502e603183c576bc7029317103c","modified":1704698747646},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1704698747646},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1704698747646},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1704698747646},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1704698747646},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1704698747646},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1704698747646},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1704698747646},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1704698747646},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1704698747646},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1704698747646},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1704698747646},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1704698747646},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1704698747646},{"_id":"public/2021/04/26/在K8s使用FTP/2.png","hash":"da233939eda25aeba01f733922b60106837aebfc","modified":1704698747646},{"_id":"public/2021/04/26/在K8s使用FTP/3.png","hash":"5c99be86c4881c89ff314475b3e77dafed1c6074","modified":1704698747646},{"_id":"public/2021/04/26/在K8s使用FTP/4.png","hash":"fede58c84dbd367be60b554214d534e7c4d20bd9","modified":1704698747646},{"_id":"public/2021/08/17/TIME-WAIT狀態如何產生/TCPIP-0.png","hash":"28fd258b24980e34b4bf2bc3e489e7a2c5917257","modified":1704698747646},{"_id":"public/2021/08/17/TIME-WAIT狀態如何產生/TCPIP-1.png","hash":"06ff680526d3a2e410950d696c5651f0c25911f1","modified":1704698747646},{"_id":"public/2021/08/17/TIME-WAIT狀態如何產生/TCPIP-2.png","hash":"e7cb9bb9f4e64c301812f2bf147fd5033250512c","modified":1704698747646},{"_id":"public/2021/08/17/TIME-WAIT狀態如何產生/TCPIP-3.png","hash":"901dd6d802f328d15cbcc23d787acd9d0aa3835e","modified":1704698747646},{"_id":"public/2021/04/26/在K8s使用FTP/1.png","hash":"bdc11e00fd5b72cc5d084d94b243d7f98db514c0","modified":1704698747646},{"_id":"public/js/algolia-search.js","hash":"a360423984cdd915d04365c51bcab440e52d7223","modified":1704698747646},{"_id":"public/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1704698747646},{"_id":"public/js/local-search.js","hash":"da2051e7cab184ae4aa64457c5db7476b4645fdc","modified":1704698747646},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1704698747646},{"_id":"public/js/next-boot.js","hash":"873e52a851a6ce8dc61b870fa7083da4d2304b7b","modified":1704698747646},{"_id":"public/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1704698747646},{"_id":"public/js/utils.js","hash":"42ef4f2c0c61aac8fbddd9534f5f86d83dc09c43","modified":1704698747646},{"_id":"public/js/schemes/muse.js","hash":"9d15d0d6a58b1df74827288f117af22b4b6aafe5","modified":1704698747646},{"_id":"public/css/main.css","hash":"c90eb270c52c404701884dcdefb37bad04876fe8","modified":1704698747646},{"_id":"public/images/IMG_1598.JPG","hash":"d8d49bbd10eafe50277385dd96ebff38aac93ac0","modified":1704698747646},{"_id":"public/images/IMG_1598.jpg","hash":"d8d49bbd10eafe50277385dd96ebff38aac93ac0","modified":1704698747646},{"_id":"public/images/fire.png","hash":"4d90ee49a3d4191fe21553a8ebf28c231ae037f5","modified":1704698747646},{"_id":"public/2021/08/16/Hexo加入Disqus留言功能/0.png","hash":"ea09ba1b2a9dde60015ffaab62b44cb2a81e3a2a","modified":1704698747646},{"_id":"public/2021/08/17/TIME-WAIT狀態如何產生/TCPIP-4.png","hash":"55913e713f9501ec1fd3957886438d86f189b03e","modified":1704698747646},{"_id":"public/2021/04/26/在K8s使用FTP/0.png","hash":"40400075bc99724afd4cb48dadf6b5753f46c3df","modified":1704698747646},{"_id":"public/2021/05/03/使用GitHub-Pages/1.png","hash":"6c8743520511e3e8d8f18f4ec47866a68672ad14","modified":1704698747646}],"Category":[{"name":"Linux","_id":"clr4lmcam0008mxv8hi466udr"},{"name":"Other","_id":"clr4lmcaq000dmxv8baze5qmc"},{"name":"PHP-FPM","_id":"clr4lmcat000imxv84ldj1b16"},{"name":"GKE","_id":"clr4lmcaw000nmxv89xjyd8tk"},{"name":"Nginx","_id":"clr4lmcaz000tmxv8f6rgdzof"},{"name":"GCP","_id":"clr4lmcb10010mxv8bbv9gx3g"},{"name":"Hexo","_id":"clr4lmcb30017mxv8ciwd1z5k"},{"name":"TCP/IP","_id":"clr4lmcbc002amxv85ljlcnbw"}],"Data":[{"_id":"post-body-end","data":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n"},{"_id":"styles","data":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n"},{"_id":"sidebar","data":"\n"}],"Page":[{"title":"about","date":"2021-04-20T07:37:30.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-04-20 15:37:30\ntype: \"about\"\n---\n","updated":"2023-10-04T15:33:37.196Z","path":"about/index.html","comments":1,"layout":"page","_id":"clr4lmcab0000mxv89uvy57uv","content":"","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"","more":""},{"title":"tags","date":"2021-04-20T07:37:19.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-04-20 15:37:19\ntype: \"tags\"\n---\n","updated":"2023-10-04T15:33:37.196Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clr4lmcah0002mxv85aoogwnh","content":"","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"","more":""},{"title":"categories","date":"2021-04-20T07:37:41.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-04-20 15:37:41\ntype: \"categories\"\n---\n","updated":"2023-10-04T15:33:37.196Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clr4lmcak0005mxv8ekk7bxy3","content":"","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"","more":""}],"Post":[{"title":"GitHub Pages自訂域名","_content":"\n## 前言\n\n\n\n## 參考資料\n\n- https://blog.hanklu.tw/post/2019/github-page-custom-domain/\n","source":"_drafts/GitHub-Pages自訂域名.md","raw":"---\ntitle: GitHub Pages自訂域名\ntags:\n  - Hexo\n  - GitHub\n  - GitHub Pages\n  - Domain\n  - DNS\n  - blog\n---\n\n## 前言\n\n\n\n## 參考資料\n\n- https://blog.hanklu.tw/post/2019/github-page-custom-domain/\n","slug":"GitHub-Pages自訂域名","published":0,"date":"2023-10-04T15:33:37.184Z","updated":"2023-10-04T15:33:37.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcae0001mxv8ftih03qw","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://blog.hanklu.tw/post/2019/github-page-custom-domain/\">https://blog.hanklu.tw/post/2019/github-page-custom-domain/</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://blog.hanklu.tw/post/2019/github-page-custom-domain/\">https://blog.hanklu.tw/post/2019/github-page-custom-domain/</a></li>\n</ul>\n"},{"title":"Nginx高併發優化","_content":"\n## 前言\n\n公司網站是採 K8s 架構，近期因為線上人數較多，目前的總連線數跟以前相比確實高出許多，但還不至於太誇張，後端4個 Nginx Pod 在運行 QPS 最高峰約莫接近 500，平均分攤在四個 Pod 上，一個 Pod 僅不過約 125 QPS，為了求穩定，還是需要做預防性的優化 Nginx，以避免後續人數越來越多導致效能下降甚至系統崩潰。\n\n所以今天會針對 Nginx 高併發如何優化的角度來切入\n\n<!--more-->\n\n## 連線原理\n\n在高併發的場景下，最怕的就是 Nginx 產生太多的 TIME_WAIT 狀態，在 TIME_WAIT 狀態結束之前，該 socket 會一直佔用的本地埠號而無法釋放\n，嚴重會導致系統所有可用埠號都被佔光，這時候就無法再建立任何連線，所以在高併發的場景，我們要盡可能的降低連線數，\n\n\n## 文後討論\n\n## 參考資料\n","source":"_drafts/Nginx高併發優化.md","raw":"---\ntitle: Nginx高併發優化\ntags:\n---\n\n## 前言\n\n公司網站是採 K8s 架構，近期因為線上人數較多，目前的總連線數跟以前相比確實高出許多，但還不至於太誇張，後端4個 Nginx Pod 在運行 QPS 最高峰約莫接近 500，平均分攤在四個 Pod 上，一個 Pod 僅不過約 125 QPS，為了求穩定，還是需要做預防性的優化 Nginx，以避免後續人數越來越多導致效能下降甚至系統崩潰。\n\n所以今天會針對 Nginx 高併發如何優化的角度來切入\n\n<!--more-->\n\n## 連線原理\n\n在高併發的場景下，最怕的就是 Nginx 產生太多的 TIME_WAIT 狀態，在 TIME_WAIT 狀態結束之前，該 socket 會一直佔用的本地埠號而無法釋放\n，嚴重會導致系統所有可用埠號都被佔光，這時候就無法再建立任何連線，所以在高併發的場景，我們要盡可能的降低連線數，\n\n\n## 文後討論\n\n## 參考資料\n","slug":"Nginx高併發優化","published":0,"date":"2023-10-04T15:33:37.184Z","updated":"2023-10-04T15:33:37.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcah0003mxv856k4bcbw","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>公司網站是採 K8s 架構，近期因為線上人數較多，目前的總連線數跟以前相比確實高出許多，但還不至於太誇張，後端4個 Nginx Pod 在運行 QPS 最高峰約莫接近 500，平均分攤在四個 Pod 上，一個 Pod 僅不過約 125 QPS，為了求穩定，還是需要做預防性的優化 Nginx，以避免後續人數越來越多導致效能下降甚至系統崩潰。</p>\n<p>所以今天會針對 Nginx 高併發如何優化的角度來切入</p>\n<span id=\"more\"></span>\n\n<h2 id=\"連線原理\"><a href=\"#連線原理\" class=\"headerlink\" title=\"連線原理\"></a>連線原理</h2><p>在高併發的場景下，最怕的就是 Nginx 產生太多的 TIME_WAIT 狀態，在 TIME_WAIT 狀態結束之前，該 socket 會一直佔用的本地埠號而無法釋放<br>，嚴重會導致系統所有可用埠號都被佔光，這時候就無法再建立任何連線，所以在高併發的場景，我們要盡可能的降低連線數，</p>\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2>","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>公司網站是採 K8s 架構，近期因為線上人數較多，目前的總連線數跟以前相比確實高出許多，但還不至於太誇張，後端4個 Nginx Pod 在運行 QPS 最高峰約莫接近 500，平均分攤在四個 Pod 上，一個 Pod 僅不過約 125 QPS，為了求穩定，還是需要做預防性的優化 Nginx，以避免後續人數越來越多導致效能下降甚至系統崩潰。</p>\n<p>所以今天會針對 Nginx 高併發如何優化的角度來切入</p>","more":"<h2 id=\"連線原理\"><a href=\"#連線原理\" class=\"headerlink\" title=\"連線原理\"></a>連線原理</h2><p>在高併發的場景下，最怕的就是 Nginx 產生太多的 TIME_WAIT 狀態，在 TIME_WAIT 狀態結束之前，該 socket 會一直佔用的本地埠號而無法釋放<br>，嚴重會導致系統所有可用埠號都被佔光，這時候就無法再建立任何連線，所以在高併發的場景，我們要盡可能的降低連線數，</p>\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2>"},{"title":"使用 SSL For Free 申請 Let's Encrypt 憑證","_content":"","source":"_drafts/SSL-For-Free_Let-s-Encrypt.md","raw":"---\ntitle: 使用 SSL For Free 申請 Let's Encrypt 憑證\ntags:\n  - Let's Encrypt\n  - SSL For Free\n  - SSL\n  - CA\n  - HTTPS\n  - SSL憑證\ncategories:\n  - Linux\n---\n","slug":"SSL-For-Free_Let-s-Encrypt","published":0,"date":"2023-10-04T15:33:37.184Z","updated":"2023-10-04T15:33:37.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcal0006mxv841j0dr81","content":"","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"","more":""},{"title":"Mac homebrew-core/homebrew-cask is a shallow clone","_content":"\n## 前言\n\n今天剛好要在 Mac 試著安裝 K3s 來試試，Mac 的安裝方式是使用 Homebrew 的方式來安裝，但是當我安裝到最後出現一些錯誤訊息，接著我拜訪 Google大神，大神告訴我要進行 `brew clean && brew update`\n\n但是當我輸入 `brew update` 就無情的跳出以下錯誤訊息\n\n<!-- more -->\n\n```\nError:\n homebrew-core is a shallow clone.\n homebrew-cask is a shallow clone.\nTo `brew update`, first run:\n git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow\n git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow\nThese commands may take a few minutes to run due to the large size of the repositories.\nThis restriction has been made on GitHub's request because updating shallow\nclones is an extremely expensive operation due to the tree layout and traffic of\nHomebrew/homebrew-core and Homebrew/homebrew-cask. We don't do this for you\nautomatically to avoid repeatedly performing an expensive unshallow operation in\nCI systems (which should instead be fixed to not use shallow clones). Sorry for\nthe inconvenience!\n```\n\n## 解決方式\n\n我根據上述的指令「分別」運行了以下兩行指令\n\n```\ngit -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow\ngit -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow\n```\n\n當我運行第一行時，大概過了一分鐘，電腦都沒有動靜，原本以為是不是當機了，所幸我就繼續等下去約莫 5~10分鐘後，終端機就開始有反應了，所以這邊要注意的是，當指令輸入後，需要一段時間的耐心等待，指令運行結果如下：\n\n```\n$ git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow\n\nremote: Enumerating objects: 783435, done.\nremote: Counting objects: 100% (783382/783382), done.\nremote: Compressing objects: 100% (261076/261076), done.\nremote: Total 773593 (delta 521667), reused 761412 (delta 509643), pack-reused 0\nReceiving objects: 100% (773593/773593), 309.85 MiB | 5.96 MiB/s, done.\nResolving deltas: 100% (521667/521667), completed with 8031 local objects.\nFrom https://github.com/Homebrew/homebrew-core\n  8c9395d92b..37e36e1536  master     -> origin/master\n```\n\n```\n$ git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow\n\nremote: Enumerating objects: 440238, done.\nremote: Counting objects: 100% (440214/440214), done.\nremote: Compressing objects: 100% (130363/130363), done.\nremote: Total 433313 (delta 310180), reused 425457 (delta 302375), pack-reused 0\nReceiving objects: 100% (433313/433313), 189.23 MiB | 8.34 MiB/s, done.\nResolving deltas: 100% (310180/310180), completed with 5087 local objects.\nFrom https://github.com/Homebrew/homebrew-cask\n  8a81ad4b60..76273d1300  master     -> origin/master\n```\n\n最後再進行一次 `brew update` 就正常可以執行了，雖然我不是很清楚實際原因，但大概跟 Homebrew 抓源有一點關係，總之問題就這樣解決了，如果有遇到的朋友們，也可以參照試試看\n","source":"_drafts/homebrew-shallow-clone.md","raw":"---\ntitle: Mac homebrew-core/homebrew-cask is a shallow clone\ntags:\n  - Mac\n  - homebrew\n  - brew\ncategories:\n    - Other\n---\n\n## 前言\n\n今天剛好要在 Mac 試著安裝 K3s 來試試，Mac 的安裝方式是使用 Homebrew 的方式來安裝，但是當我安裝到最後出現一些錯誤訊息，接著我拜訪 Google大神，大神告訴我要進行 `brew clean && brew update`\n\n但是當我輸入 `brew update` 就無情的跳出以下錯誤訊息\n\n<!-- more -->\n\n```\nError:\n homebrew-core is a shallow clone.\n homebrew-cask is a shallow clone.\nTo `brew update`, first run:\n git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow\n git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow\nThese commands may take a few minutes to run due to the large size of the repositories.\nThis restriction has been made on GitHub's request because updating shallow\nclones is an extremely expensive operation due to the tree layout and traffic of\nHomebrew/homebrew-core and Homebrew/homebrew-cask. We don't do this for you\nautomatically to avoid repeatedly performing an expensive unshallow operation in\nCI systems (which should instead be fixed to not use shallow clones). Sorry for\nthe inconvenience!\n```\n\n## 解決方式\n\n我根據上述的指令「分別」運行了以下兩行指令\n\n```\ngit -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow\ngit -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow\n```\n\n當我運行第一行時，大概過了一分鐘，電腦都沒有動靜，原本以為是不是當機了，所幸我就繼續等下去約莫 5~10分鐘後，終端機就開始有反應了，所以這邊要注意的是，當指令輸入後，需要一段時間的耐心等待，指令運行結果如下：\n\n```\n$ git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow\n\nremote: Enumerating objects: 783435, done.\nremote: Counting objects: 100% (783382/783382), done.\nremote: Compressing objects: 100% (261076/261076), done.\nremote: Total 773593 (delta 521667), reused 761412 (delta 509643), pack-reused 0\nReceiving objects: 100% (773593/773593), 309.85 MiB | 5.96 MiB/s, done.\nResolving deltas: 100% (521667/521667), completed with 8031 local objects.\nFrom https://github.com/Homebrew/homebrew-core\n  8c9395d92b..37e36e1536  master     -> origin/master\n```\n\n```\n$ git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow\n\nremote: Enumerating objects: 440238, done.\nremote: Counting objects: 100% (440214/440214), done.\nremote: Compressing objects: 100% (130363/130363), done.\nremote: Total 433313 (delta 310180), reused 425457 (delta 302375), pack-reused 0\nReceiving objects: 100% (433313/433313), 189.23 MiB | 8.34 MiB/s, done.\nResolving deltas: 100% (310180/310180), completed with 5087 local objects.\nFrom https://github.com/Homebrew/homebrew-cask\n  8a81ad4b60..76273d1300  master     -> origin/master\n```\n\n最後再進行一次 `brew update` 就正常可以執行了，雖然我不是很清楚實際原因，但大概跟 Homebrew 抓源有一點關係，總之問題就這樣解決了，如果有遇到的朋友們，也可以參照試試看\n","slug":"homebrew-shallow-clone","published":0,"date":"2023-10-04T15:33:37.184Z","updated":"2023-10-04T15:33:37.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcal0007mxv892i7girr","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天剛好要在 Mac 試著安裝 K3s 來試試，Mac 的安裝方式是使用 Homebrew 的方式來安裝，但是當我安裝到最後出現一些錯誤訊息，接著我拜訪 Google大神，大神告訴我要進行 <code>brew clean &amp;&amp; brew update</code></p>\n<p>但是當我輸入 <code>brew update</code> 就無情的跳出以下錯誤訊息</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error:</span><br><span class=\"line\"> homebrew-core is a shallow clone.</span><br><span class=\"line\"> homebrew-cask is a shallow clone.</span><br><span class=\"line\">To &#96;brew update&#96;, first run:</span><br><span class=\"line\"> git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core fetch --unshallow</span><br><span class=\"line\"> git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask fetch --unshallow</span><br><span class=\"line\">These commands may take a few minutes to run due to the large size of the repositories.</span><br><span class=\"line\">This restriction has been made on GitHub&#39;s request because updating shallow</span><br><span class=\"line\">clones is an extremely expensive operation due to the tree layout and traffic of</span><br><span class=\"line\">Homebrew&#x2F;homebrew-core and Homebrew&#x2F;homebrew-cask. We don&#39;t do this for you</span><br><span class=\"line\">automatically to avoid repeatedly performing an expensive unshallow operation in</span><br><span class=\"line\">CI systems (which should instead be fixed to not use shallow clones). Sorry for</span><br><span class=\"line\">the inconvenience!</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解決方式\"><a href=\"#解決方式\" class=\"headerlink\" title=\"解決方式\"></a>解決方式</h2><p>我根據上述的指令「分別」運行了以下兩行指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core fetch --unshallow</span><br><span class=\"line\">git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask fetch --unshallow</span><br></pre></td></tr></table></figure>\n\n<p>當我運行第一行時，大概過了一分鐘，電腦都沒有動靜，原本以為是不是當機了，所幸我就繼續等下去約莫 5~10分鐘後，終端機就開始有反應了，所以這邊要注意的是，當指令輸入後，需要一段時間的耐心等待，指令運行結果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core fetch --unshallow</span><br><span class=\"line\"></span><br><span class=\"line\">remote: Enumerating objects: 783435, done.</span><br><span class=\"line\">remote: Counting objects: 100% (783382&#x2F;783382), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (261076&#x2F;261076), done.</span><br><span class=\"line\">remote: Total 773593 (delta 521667), reused 761412 (delta 509643), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (773593&#x2F;773593), 309.85 MiB | 5.96 MiB&#x2F;s, done.</span><br><span class=\"line\">Resolving deltas: 100% (521667&#x2F;521667), completed with 8031 local objects.</span><br><span class=\"line\">From https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-core</span><br><span class=\"line\">  8c9395d92b..37e36e1536  master     -&gt; origin&#x2F;master</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask fetch --unshallow</span><br><span class=\"line\"></span><br><span class=\"line\">remote: Enumerating objects: 440238, done.</span><br><span class=\"line\">remote: Counting objects: 100% (440214&#x2F;440214), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (130363&#x2F;130363), done.</span><br><span class=\"line\">remote: Total 433313 (delta 310180), reused 425457 (delta 302375), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (433313&#x2F;433313), 189.23 MiB | 8.34 MiB&#x2F;s, done.</span><br><span class=\"line\">Resolving deltas: 100% (310180&#x2F;310180), completed with 5087 local objects.</span><br><span class=\"line\">From https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-cask</span><br><span class=\"line\">  8a81ad4b60..76273d1300  master     -&gt; origin&#x2F;master</span><br></pre></td></tr></table></figure>\n\n<p>最後再進行一次 <code>brew update</code> 就正常可以執行了，雖然我不是很清楚實際原因，但大概跟 Homebrew 抓源有一點關係，總之問題就這樣解決了，如果有遇到的朋友們，也可以參照試試看</p>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天剛好要在 Mac 試著安裝 K3s 來試試，Mac 的安裝方式是使用 Homebrew 的方式來安裝，但是當我安裝到最後出現一些錯誤訊息，接著我拜訪 Google大神，大神告訴我要進行 <code>brew clean &amp;&amp; brew update</code></p>\n<p>但是當我輸入 <code>brew update</code> 就無情的跳出以下錯誤訊息</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error:</span><br><span class=\"line\"> homebrew-core is a shallow clone.</span><br><span class=\"line\"> homebrew-cask is a shallow clone.</span><br><span class=\"line\">To &#96;brew update&#96;, first run:</span><br><span class=\"line\"> git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core fetch --unshallow</span><br><span class=\"line\"> git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask fetch --unshallow</span><br><span class=\"line\">These commands may take a few minutes to run due to the large size of the repositories.</span><br><span class=\"line\">This restriction has been made on GitHub&#39;s request because updating shallow</span><br><span class=\"line\">clones is an extremely expensive operation due to the tree layout and traffic of</span><br><span class=\"line\">Homebrew&#x2F;homebrew-core and Homebrew&#x2F;homebrew-cask. We don&#39;t do this for you</span><br><span class=\"line\">automatically to avoid repeatedly performing an expensive unshallow operation in</span><br><span class=\"line\">CI systems (which should instead be fixed to not use shallow clones). Sorry for</span><br><span class=\"line\">the inconvenience!</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解決方式\"><a href=\"#解決方式\" class=\"headerlink\" title=\"解決方式\"></a>解決方式</h2><p>我根據上述的指令「分別」運行了以下兩行指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core fetch --unshallow</span><br><span class=\"line\">git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask fetch --unshallow</span><br></pre></td></tr></table></figure>\n\n<p>當我運行第一行時，大概過了一分鐘，電腦都沒有動靜，原本以為是不是當機了，所幸我就繼續等下去約莫 5~10分鐘後，終端機就開始有反應了，所以這邊要注意的是，當指令輸入後，需要一段時間的耐心等待，指令運行結果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core fetch --unshallow</span><br><span class=\"line\"></span><br><span class=\"line\">remote: Enumerating objects: 783435, done.</span><br><span class=\"line\">remote: Counting objects: 100% (783382&#x2F;783382), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (261076&#x2F;261076), done.</span><br><span class=\"line\">remote: Total 773593 (delta 521667), reused 761412 (delta 509643), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (773593&#x2F;773593), 309.85 MiB | 5.96 MiB&#x2F;s, done.</span><br><span class=\"line\">Resolving deltas: 100% (521667&#x2F;521667), completed with 8031 local objects.</span><br><span class=\"line\">From https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-core</span><br><span class=\"line\">  8c9395d92b..37e36e1536  master     -&gt; origin&#x2F;master</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask fetch --unshallow</span><br><span class=\"line\"></span><br><span class=\"line\">remote: Enumerating objects: 440238, done.</span><br><span class=\"line\">remote: Counting objects: 100% (440214&#x2F;440214), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (130363&#x2F;130363), done.</span><br><span class=\"line\">remote: Total 433313 (delta 310180), reused 425457 (delta 302375), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (433313&#x2F;433313), 189.23 MiB | 8.34 MiB&#x2F;s, done.</span><br><span class=\"line\">Resolving deltas: 100% (310180&#x2F;310180), completed with 5087 local objects.</span><br><span class=\"line\">From https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-cask</span><br><span class=\"line\">  8a81ad4b60..76273d1300  master     -&gt; origin&#x2F;master</span><br></pre></td></tr></table></figure>\n\n<p>最後再進行一次 <code>brew update</code> 就正常可以執行了，雖然我不是很清楚實際原因，但大概跟 Homebrew 抓源有一點關係，總之問題就這樣解決了，如果有遇到的朋友們，也可以參照試試看</p>"},{"title":"max_execution_time 和 request_terminate_timeout 的比較","_content":"\n## 前言\n\n<!--more-->\n\n## 連線原理\n\n## 參考資料\n\n- https://www.twblogs.net/a/5eefd00bfcc715ab3d919a1d\n","source":"_drafts/max-execution-time-vs-request-terminate-timeout.md","raw":"---\ntitle: max_execution_time 和 request_terminate_timeout 的比較\ntags:\n  - PHP\n  - PHP-FPM\n  - Nginx\ncategories:\n  - PHP-FPM\n---\n\n## 前言\n\n<!--more-->\n\n## 連線原理\n\n## 參考資料\n\n- https://www.twblogs.net/a/5eefd00bfcc715ab3d919a1d\n","slug":"max-execution-time-vs-request-terminate-timeout","published":0,"date":"2023-10-04T15:33:37.184Z","updated":"2023-10-04T15:33:37.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcan0009mxv8g3madhxf","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><span id=\"more\"></span>\n\n<h2 id=\"連線原理\"><a href=\"#連線原理\" class=\"headerlink\" title=\"連線原理\"></a>連線原理</h2><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://www.twblogs.net/a/5eefd00bfcc715ab3d919a1d\">https://www.twblogs.net/a/5eefd00bfcc715ab3d919a1d</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>","more":"<h2 id=\"連線原理\"><a href=\"#連線原理\" class=\"headerlink\" title=\"連線原理\"></a>連線原理</h2><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://www.twblogs.net/a/5eefd00bfcc715ab3d919a1d\">https://www.twblogs.net/a/5eefd00bfcc715ab3d919a1d</a></li>\n</ul>"},{"title":"Kubernetes更新ConfigMap或Secret自動重啟Pod","_content":"\n## 前言\n\n有在使用 K8s 的朋友，後期應該都會遇到一個問題，內部服務有一些設定檔是使用 Configmap 單獨掛出來，或是一些機敏資料是使用 Secret 掛出來，當這些單獨掛出來的資料有異動重新 kubectl apply，主要服務卻沒有辦法自動重啟(因為大部分都需要重啟才能吃到新的設定Ex: Nginx)，這時候只能手動將服務砍掉讓它重啟，這使得使用上有那麼一點不便利，如果當要修改的設定檔一多，所耗費的時間也就越多，如果能夠讓設定檔有異動時，服務可以自動重啟，那就再好不過了。\n\n<!-- more -->\n\n為了解決這個問題，下面將要介紹一款開源的套件 Reloader，將它安裝在 K8s 內，並在 annatation 多加一些設定，Reloader 就會自動幫你偵測服務所掛載的 Configmap/Secret 資料是否有異動，當有異動時就會幫忙將做 Rolling Update\n\n## Reloader的安裝\n\n安裝 Reloader\n\n```\nkubectl apply -f https://raw.githubusercontent.com/stakater/Reloader/master/deployments/kubernetes/reloader.yaml\n```\n\n在預設下，Reloader 會部署在 `default` 的 namespace 且會幫你監視「所有 namespace」的 `Secret`、`ConfigMap` 是否有異動\n\n> 擷取官方：\n> By default, Reloader gets deployed in `default` namespace and watches changes `secrets` and `configmaps` in all namespaces.\n\n安裝後，在 K8s `default` namespace 會多一個 stakater-reloader 服務\n\n## Reloader的使用\n\n安裝後，我們必須告訴 Reloader，要請他幫我們監視哪個服務所掛載的 `Secret` 或 `ConfigMap`，\n\n假設 Deployment 名字是 foo，而他掛一個 ConfigMap 名稱叫 foo-configmap，然後在 deployment Object 的 annotation 加上主要設定，如下\n\n```\nkind: Deployment\nmetadata:\n  annotations:\n    configmap.reloader.stakater.com/reload: \"foo-configmap\"\n```\n\n同樣的，如果要監視 `Secret` 也是一樣的方式，只是 annotation 要稍微改一下，由 `configmap.reloader.stakater.com/reload` 改成 `secret.reloader.stakater.com/reload`，冒號後面的值則是帶入 `Secret` 名稱\n\n```\nkind: Deployment\nmetadata:\n  annotations:\n    secret.reloader.stakater.com/reload: \"foo-secret\"\n```\n\n如果 Deployment 同時掛載多個 `Secret` 或 `ConfigMap`，則以逗號分開，例如\n\n```\nkind: Deployment\nmetadata:\n  annotations:\n    configmap.reloader.stakater.com/reload: \"foo-configmap,bar-configmap,baz-configmap\"\n```\n\n當然也可以讓 Reloader 自行判斷，`reloader.stakater.com/auto: \"true\"` 會自行判斷 Deployment 是否有掛載 ConfigMap 或 Secret 當掛載的資料有異動時會自動重啟 Pod\n\n> 擷取官方：\n> `reloader.stakater.com/auto: \"true\"` will only reload the pod, if the configmap or secret is used (as a volume mount or as an env) in\n> `DeploymentConfigs/Deployment/Daemonsets/Statefulsets`\n\n```\nkind: Deployment\nmetadata:\n  annotations:\n    reloader.stakater.com/auto: \"true\"\n```\n\n## Reloader的實際應用\n\n如果懶得自己寫 YAML 的朋友，可以拿下面的 Nginx 範例部署到環境內做測試，Deployment/ConfigMap 都部署後，可以試著修改 ConfigMap 中 Nginx 設定檔內容，在重新部署，就會發現 Nginx 神奇的自己重新啟動。\n\nDeployment\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-reloader-test\n  namespace: default\n  labels:\n    app: nginx-reloader-test\n    annotations:\n      configmap.reloader.stakater.com/reload: \"nginx-config\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx-reloader-test\n  template:\n    metadata:\n      labels:\n        app: nginx-reloader-test\n    spec:\n      restartPolicy: Always\n      containers:\n      - name: nginx-reloader-test\n        image: nginx:1.21.1\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - name: nginx-conf-volume\n          mountPath: /etc/nginx/conf.d\n      volumes:\n      - name: nginx-conf-volume\n        configMap:\n          name: nginx-config\n```\n\nConfiMap\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: nginx-config\ndata:\n  nginx.conf: |\n    server {\n        listen       80;\n        server_name  localhost;\n        root   /usr/share/nginx/html;\n        index  index.php index.html index.htm;\n\n        # redirect server error pages to the static page /50x.html\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   /usr/share/nginx/html;\n        }\n\n        location / {\n            try_files $uri $uri/ =404;\n        }\n    }\n```\n\n## 文後討論\n\n官方 GitHub 底下還有蠻多可以調整的參數，如果有特殊需求的朋友，可以到 [官方GitHub](https://github.com/stakater/Reloader) 去挖寶，或許會找到你所需要，尤其是在 NOTES 的區塊，可以考慮好好讀一下\n\nhttps://github.com/stakater/Reloader#notes\n\n## 參考資料\n\n- https://github.com/stakater/Reloader\n","source":"_drafts/stakater-reloader.md","raw":"---\ntitle: Kubernetes更新ConfigMap或Secret自動重啟Pod\ntags:\n  - GKE\n  - GCP\n  - K8s\n  - kubernetes\n  - stakater\n  - reloader\n  - opensource\ncategories:\n  - GKE\n---\n\n## 前言\n\n有在使用 K8s 的朋友，後期應該都會遇到一個問題，內部服務有一些設定檔是使用 Configmap 單獨掛出來，或是一些機敏資料是使用 Secret 掛出來，當這些單獨掛出來的資料有異動重新 kubectl apply，主要服務卻沒有辦法自動重啟(因為大部分都需要重啟才能吃到新的設定Ex: Nginx)，這時候只能手動將服務砍掉讓它重啟，這使得使用上有那麼一點不便利，如果當要修改的設定檔一多，所耗費的時間也就越多，如果能夠讓設定檔有異動時，服務可以自動重啟，那就再好不過了。\n\n<!-- more -->\n\n為了解決這個問題，下面將要介紹一款開源的套件 Reloader，將它安裝在 K8s 內，並在 annatation 多加一些設定，Reloader 就會自動幫你偵測服務所掛載的 Configmap/Secret 資料是否有異動，當有異動時就會幫忙將做 Rolling Update\n\n## Reloader的安裝\n\n安裝 Reloader\n\n```\nkubectl apply -f https://raw.githubusercontent.com/stakater/Reloader/master/deployments/kubernetes/reloader.yaml\n```\n\n在預設下，Reloader 會部署在 `default` 的 namespace 且會幫你監視「所有 namespace」的 `Secret`、`ConfigMap` 是否有異動\n\n> 擷取官方：\n> By default, Reloader gets deployed in `default` namespace and watches changes `secrets` and `configmaps` in all namespaces.\n\n安裝後，在 K8s `default` namespace 會多一個 stakater-reloader 服務\n\n## Reloader的使用\n\n安裝後，我們必須告訴 Reloader，要請他幫我們監視哪個服務所掛載的 `Secret` 或 `ConfigMap`，\n\n假設 Deployment 名字是 foo，而他掛一個 ConfigMap 名稱叫 foo-configmap，然後在 deployment Object 的 annotation 加上主要設定，如下\n\n```\nkind: Deployment\nmetadata:\n  annotations:\n    configmap.reloader.stakater.com/reload: \"foo-configmap\"\n```\n\n同樣的，如果要監視 `Secret` 也是一樣的方式，只是 annotation 要稍微改一下，由 `configmap.reloader.stakater.com/reload` 改成 `secret.reloader.stakater.com/reload`，冒號後面的值則是帶入 `Secret` 名稱\n\n```\nkind: Deployment\nmetadata:\n  annotations:\n    secret.reloader.stakater.com/reload: \"foo-secret\"\n```\n\n如果 Deployment 同時掛載多個 `Secret` 或 `ConfigMap`，則以逗號分開，例如\n\n```\nkind: Deployment\nmetadata:\n  annotations:\n    configmap.reloader.stakater.com/reload: \"foo-configmap,bar-configmap,baz-configmap\"\n```\n\n當然也可以讓 Reloader 自行判斷，`reloader.stakater.com/auto: \"true\"` 會自行判斷 Deployment 是否有掛載 ConfigMap 或 Secret 當掛載的資料有異動時會自動重啟 Pod\n\n> 擷取官方：\n> `reloader.stakater.com/auto: \"true\"` will only reload the pod, if the configmap or secret is used (as a volume mount or as an env) in\n> `DeploymentConfigs/Deployment/Daemonsets/Statefulsets`\n\n```\nkind: Deployment\nmetadata:\n  annotations:\n    reloader.stakater.com/auto: \"true\"\n```\n\n## Reloader的實際應用\n\n如果懶得自己寫 YAML 的朋友，可以拿下面的 Nginx 範例部署到環境內做測試，Deployment/ConfigMap 都部署後，可以試著修改 ConfigMap 中 Nginx 設定檔內容，在重新部署，就會發現 Nginx 神奇的自己重新啟動。\n\nDeployment\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-reloader-test\n  namespace: default\n  labels:\n    app: nginx-reloader-test\n    annotations:\n      configmap.reloader.stakater.com/reload: \"nginx-config\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx-reloader-test\n  template:\n    metadata:\n      labels:\n        app: nginx-reloader-test\n    spec:\n      restartPolicy: Always\n      containers:\n      - name: nginx-reloader-test\n        image: nginx:1.21.1\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - name: nginx-conf-volume\n          mountPath: /etc/nginx/conf.d\n      volumes:\n      - name: nginx-conf-volume\n        configMap:\n          name: nginx-config\n```\n\nConfiMap\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: nginx-config\ndata:\n  nginx.conf: |\n    server {\n        listen       80;\n        server_name  localhost;\n        root   /usr/share/nginx/html;\n        index  index.php index.html index.htm;\n\n        # redirect server error pages to the static page /50x.html\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   /usr/share/nginx/html;\n        }\n\n        location / {\n            try_files $uri $uri/ =404;\n        }\n    }\n```\n\n## 文後討論\n\n官方 GitHub 底下還有蠻多可以調整的參數，如果有特殊需求的朋友，可以到 [官方GitHub](https://github.com/stakater/Reloader) 去挖寶，或許會找到你所需要，尤其是在 NOTES 的區塊，可以考慮好好讀一下\n\nhttps://github.com/stakater/Reloader#notes\n\n## 參考資料\n\n- https://github.com/stakater/Reloader\n","slug":"stakater-reloader","published":0,"date":"2023-10-04T15:33:37.184Z","updated":"2023-10-04T15:33:37.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcao000bmxv8d3i5hiwx","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有在使用 K8s 的朋友，後期應該都會遇到一個問題，內部服務有一些設定檔是使用 Configmap 單獨掛出來，或是一些機敏資料是使用 Secret 掛出來，當這些單獨掛出來的資料有異動重新 kubectl apply，主要服務卻沒有辦法自動重啟(因為大部分都需要重啟才能吃到新的設定Ex: Nginx)，這時候只能手動將服務砍掉讓它重啟，這使得使用上有那麼一點不便利，如果當要修改的設定檔一多，所耗費的時間也就越多，如果能夠讓設定檔有異動時，服務可以自動重啟，那就再好不過了。</p>\n<span id=\"more\"></span>\n\n<p>為了解決這個問題，下面將要介紹一款開源的套件 Reloader，將它安裝在 K8s 內，並在 annatation 多加一些設定，Reloader 就會自動幫你偵測服務所掛載的 Configmap/Secret 資料是否有異動，當有異動時就會幫忙將做 Rolling Update</p>\n<h2 id=\"Reloader的安裝\"><a href=\"#Reloader的安裝\" class=\"headerlink\" title=\"Reloader的安裝\"></a>Reloader的安裝</h2><p>安裝 Reloader</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;stakater&#x2F;Reloader&#x2F;master&#x2F;deployments&#x2F;kubernetes&#x2F;reloader.yaml</span><br></pre></td></tr></table></figure>\n\n<p>在預設下，Reloader 會部署在 <code>default</code> 的 namespace 且會幫你監視「所有 namespace」的 <code>Secret</code>、<code>ConfigMap</code> 是否有異動</p>\n<blockquote>\n<p>擷取官方：<br>By default, Reloader gets deployed in <code>default</code> namespace and watches changes <code>secrets</code> and <code>configmaps</code> in all namespaces.</p>\n</blockquote>\n<p>安裝後，在 K8s <code>default</code> namespace 會多一個 stakater-reloader 服務</p>\n<h2 id=\"Reloader的使用\"><a href=\"#Reloader的使用\" class=\"headerlink\" title=\"Reloader的使用\"></a>Reloader的使用</h2><p>安裝後，我們必須告訴 Reloader，要請他幫我們監視哪個服務所掛載的 <code>Secret</code> 或 <code>ConfigMap</code>，</p>\n<p>假設 Deployment 名字是 foo，而他掛一個 ConfigMap 名稱叫 foo-configmap，然後在 deployment Object 的 annotation 加上主要設定，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    configmap.reloader.stakater.com&#x2F;reload: &quot;foo-configmap&quot;</span><br></pre></td></tr></table></figure>\n\n<p>同樣的，如果要監視 <code>Secret</code> 也是一樣的方式，只是 annotation 要稍微改一下，由 <code>configmap.reloader.stakater.com/reload</code> 改成 <code>secret.reloader.stakater.com/reload</code>，冒號後面的值則是帶入 <code>Secret</code> 名稱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    secret.reloader.stakater.com&#x2F;reload: &quot;foo-secret&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果 Deployment 同時掛載多個 <code>Secret</code> 或 <code>ConfigMap</code>，則以逗號分開，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    configmap.reloader.stakater.com&#x2F;reload: &quot;foo-configmap,bar-configmap,baz-configmap&quot;</span><br></pre></td></tr></table></figure>\n\n<p>當然也可以讓 Reloader 自行判斷，<code>reloader.stakater.com/auto: &quot;true&quot;</code> 會自行判斷 Deployment 是否有掛載 ConfigMap 或 Secret 當掛載的資料有異動時會自動重啟 Pod</p>\n<blockquote>\n<p>擷取官方：<br><code>reloader.stakater.com/auto: &quot;true&quot;</code> will only reload the pod, if the configmap or secret is used (as a volume mount or as an env) in<br><code>DeploymentConfigs/Deployment/Daemonsets/Statefulsets</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    reloader.stakater.com&#x2F;auto: &quot;true&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reloader的實際應用\"><a href=\"#Reloader的實際應用\" class=\"headerlink\" title=\"Reloader的實際應用\"></a>Reloader的實際應用</h2><p>如果懶得自己寫 YAML 的朋友，可以拿下面的 Nginx 範例部署到環境內做測試，Deployment/ConfigMap 都部署後，可以試著修改 ConfigMap 中 Nginx 設定檔內容，在重新部署，就會發現 Nginx 神奇的自己重新啟動。</p>\n<p>Deployment</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apps&#x2F;v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-reloader-test</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: nginx-reloader-test</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      configmap.reloader.stakater.com&#x2F;reload: &quot;nginx-config&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: nginx-reloader-test</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: nginx-reloader-test</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      restartPolicy: Always</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: nginx-reloader-test</span><br><span class=\"line\">        image: nginx:1.21.1</span><br><span class=\"line\">        imagePullPolicy: Always</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 80</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: nginx-conf-volume</span><br><span class=\"line\">          mountPath: &#x2F;etc&#x2F;nginx&#x2F;conf.d</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: nginx-conf-volume</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: nginx-config</span><br></pre></td></tr></table></figure>\n\n<p>ConfiMap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-config</span><br><span class=\"line\">data:</span><br><span class=\"line\">  nginx.conf: |</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class=\"line\">        index  index.php index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page &#x2F;50x.html</span><br><span class=\"line\">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class=\"line\">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class=\"line\">            root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location &#x2F; &#123;</span><br><span class=\"line\">            try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><p>官方 GitHub 底下還有蠻多可以調整的參數，如果有特殊需求的朋友，可以到 <a href=\"https://github.com/stakater/Reloader\">官方GitHub</a> 去挖寶，或許會找到你所需要，尤其是在 NOTES 的區塊，可以考慮好好讀一下</p>\n<p><a href=\"https://github.com/stakater/Reloader#notes\">https://github.com/stakater/Reloader#notes</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://github.com/stakater/Reloader\">https://github.com/stakater/Reloader</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有在使用 K8s 的朋友，後期應該都會遇到一個問題，內部服務有一些設定檔是使用 Configmap 單獨掛出來，或是一些機敏資料是使用 Secret 掛出來，當這些單獨掛出來的資料有異動重新 kubectl apply，主要服務卻沒有辦法自動重啟(因為大部分都需要重啟才能吃到新的設定Ex: Nginx)，這時候只能手動將服務砍掉讓它重啟，這使得使用上有那麼一點不便利，如果當要修改的設定檔一多，所耗費的時間也就越多，如果能夠讓設定檔有異動時，服務可以自動重啟，那就再好不過了。</p>","more":"<p>為了解決這個問題，下面將要介紹一款開源的套件 Reloader，將它安裝在 K8s 內，並在 annatation 多加一些設定，Reloader 就會自動幫你偵測服務所掛載的 Configmap/Secret 資料是否有異動，當有異動時就會幫忙將做 Rolling Update</p>\n<h2 id=\"Reloader的安裝\"><a href=\"#Reloader的安裝\" class=\"headerlink\" title=\"Reloader的安裝\"></a>Reloader的安裝</h2><p>安裝 Reloader</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;stakater&#x2F;Reloader&#x2F;master&#x2F;deployments&#x2F;kubernetes&#x2F;reloader.yaml</span><br></pre></td></tr></table></figure>\n\n<p>在預設下，Reloader 會部署在 <code>default</code> 的 namespace 且會幫你監視「所有 namespace」的 <code>Secret</code>、<code>ConfigMap</code> 是否有異動</p>\n<blockquote>\n<p>擷取官方：<br>By default, Reloader gets deployed in <code>default</code> namespace and watches changes <code>secrets</code> and <code>configmaps</code> in all namespaces.</p>\n</blockquote>\n<p>安裝後，在 K8s <code>default</code> namespace 會多一個 stakater-reloader 服務</p>\n<h2 id=\"Reloader的使用\"><a href=\"#Reloader的使用\" class=\"headerlink\" title=\"Reloader的使用\"></a>Reloader的使用</h2><p>安裝後，我們必須告訴 Reloader，要請他幫我們監視哪個服務所掛載的 <code>Secret</code> 或 <code>ConfigMap</code>，</p>\n<p>假設 Deployment 名字是 foo，而他掛一個 ConfigMap 名稱叫 foo-configmap，然後在 deployment Object 的 annotation 加上主要設定，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    configmap.reloader.stakater.com&#x2F;reload: &quot;foo-configmap&quot;</span><br></pre></td></tr></table></figure>\n\n<p>同樣的，如果要監視 <code>Secret</code> 也是一樣的方式，只是 annotation 要稍微改一下，由 <code>configmap.reloader.stakater.com/reload</code> 改成 <code>secret.reloader.stakater.com/reload</code>，冒號後面的值則是帶入 <code>Secret</code> 名稱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    secret.reloader.stakater.com&#x2F;reload: &quot;foo-secret&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果 Deployment 同時掛載多個 <code>Secret</code> 或 <code>ConfigMap</code>，則以逗號分開，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    configmap.reloader.stakater.com&#x2F;reload: &quot;foo-configmap,bar-configmap,baz-configmap&quot;</span><br></pre></td></tr></table></figure>\n\n<p>當然也可以讓 Reloader 自行判斷，<code>reloader.stakater.com/auto: &quot;true&quot;</code> 會自行判斷 Deployment 是否有掛載 ConfigMap 或 Secret 當掛載的資料有異動時會自動重啟 Pod</p>\n<blockquote>\n<p>擷取官方：<br><code>reloader.stakater.com/auto: &quot;true&quot;</code> will only reload the pod, if the configmap or secret is used (as a volume mount or as an env) in<br><code>DeploymentConfigs/Deployment/Daemonsets/Statefulsets</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    reloader.stakater.com&#x2F;auto: &quot;true&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reloader的實際應用\"><a href=\"#Reloader的實際應用\" class=\"headerlink\" title=\"Reloader的實際應用\"></a>Reloader的實際應用</h2><p>如果懶得自己寫 YAML 的朋友，可以拿下面的 Nginx 範例部署到環境內做測試，Deployment/ConfigMap 都部署後，可以試著修改 ConfigMap 中 Nginx 設定檔內容，在重新部署，就會發現 Nginx 神奇的自己重新啟動。</p>\n<p>Deployment</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apps&#x2F;v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-reloader-test</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: nginx-reloader-test</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      configmap.reloader.stakater.com&#x2F;reload: &quot;nginx-config&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: nginx-reloader-test</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: nginx-reloader-test</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      restartPolicy: Always</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: nginx-reloader-test</span><br><span class=\"line\">        image: nginx:1.21.1</span><br><span class=\"line\">        imagePullPolicy: Always</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 80</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: nginx-conf-volume</span><br><span class=\"line\">          mountPath: &#x2F;etc&#x2F;nginx&#x2F;conf.d</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: nginx-conf-volume</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: nginx-config</span><br></pre></td></tr></table></figure>\n\n<p>ConfiMap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-config</span><br><span class=\"line\">data:</span><br><span class=\"line\">  nginx.conf: |</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class=\"line\">        index  index.php index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page &#x2F;50x.html</span><br><span class=\"line\">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class=\"line\">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class=\"line\">            root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location &#x2F; &#123;</span><br><span class=\"line\">            try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><p>官方 GitHub 底下還有蠻多可以調整的參數，如果有特殊需求的朋友，可以到 <a href=\"https://github.com/stakater/Reloader\">官方GitHub</a> 去挖寶，或許會找到你所需要，尤其是在 NOTES 的區塊，可以考慮好好讀一下</p>\n<p><a href=\"https://github.com/stakater/Reloader#notes\">https://github.com/stakater/Reloader#notes</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://github.com/stakater/Reloader\">https://github.com/stakater/Reloader</a></li>\n</ul>"},{"title":"什麼是HSTS","_content":"\n## 前言\n\nHTTP 強制安全傳輸(HTTP Strict Transport Security, HSTS)，就是告訴瀏覽器該網站請強制使用 HTTPS 協定作加密連線，以減少連線過程可能遭遇的風險\n\n開啟 HSTS 後未來瀏覽器就會自動將 HTTP 轉為 HTTPS 請求，**即使憑證失效，使用者也無法忽略警告繼續瀏覽網站**。\n\n在 HTTP Repose Header 加入 Strict-Transport-Security(STS) 參數就能告訴瀏覽器該網站使用 HTTPS 連線，在遇到使用 HTTP 訪問時就能自動跳轉到 HTTPS。\n\n<!--more-->\n\n## HTTP To HTTPS 跳轉過程\n\n在還沒有 HTTPS 的年代，都以 80 port 明碼的方式與伺服器通訊，正常情況下可以返回資料\n\n![](HSTS-0.png)\n\n但如果瀏覽器與伺服器之間出現了 Hacker 劫持，伺服器所返回的資料就有可能被有所竄改\n\n![](HSTS-1.png)\n\n後來 SSL加密的出現，我們可以在伺服器端利用 301/302 跳轉強制讓走 80 的客戶自動導轉 443，這也是為了因應平時我們會在瀏覽器習慣性輸入 `www.example.com`。\n\n當瀏覽器走的是 HTTP，請求到達伺服器後，伺服器告訴瀏覽器 302 跳轉，然後瀏覽器重新請求，透過 HTTPS 方式，443 埠號通訊。\n\n![](HSTS-2.png)\n\n也因為不是直接輸入 `https://`，故第一次發起的請求還是使用 80 port，Hacker 利用這一點，也可以進行劫持的動作\n\n![](HSTS-3.png)\n\n## HSTS 運作原理\n\n1. 伺服器啟用 HSTS 功能，伺服器會在 Repose Header 中新增 Strict-Transport-Security，並設置 max-age 時間\n\n2. 客戶端第一次與伺服器連線時，伺服器回應時會帶上 STS Header\n\n3. 如果下次客戶端使用 HTTP 訪問時，只要 max-age 未過期，客戶端會進行內部 307 跳轉，使用 Chrome 瀏覽器開啟「開發人員工具」，可以看到 307 Redirect Internel 的狀態碼\n\n4. Redirect Internel 是客戶端本機瀏覽器 HTTP To HTTPS 跳轉過程，跳轉完成後客戶端就會以 HTTPS 訪問伺服器，這樣就能確保客戶端訪問伺服器時是使用 HTTPS 加密連線\n\n> 總結：使用 HSTS 時，當 max-age 未過期，客戶端會在「自己的瀏覽器」進行 307 跳轉成 HTTPS，再去訪問伺服器\n\n## HSTS 優點\n\n1. 啟用 HSTS 可以有效降低 MITM\n\n2. 保客戶端在有效時間內使用 HTTPS 訪問伺服器\n\n## HSTS 缺點\n\n1. 在瀏覽器未有 STS Header 時，首次使用 80 port 訪問伺服器時，有可能遭受 MITM\n\n2. 無法忽視憑證過期或失效，只要憑證過期或失效就無法訪問網站\n\n3. 如果客戶端在接收到 Strict-Transport-Security(STS) Response Header 前就已經是被劫持狀態，因客戶端並非直接與伺服器連線，故伺服器無法將 STS Response Header 帶給客戶端(因為都被中間人擋下來了)\n\n4. 若清除瀏覽器快取，下次訪問網站時，會使用 HTTP 訪問，伺服器回應會重新帶上 STS Header\n\n> 關於第一點首次訪問使用 HTTP 的問題，其實可以使用 Preload List 的方式來解決，後續會再寫一篇有關 Preload List\n\n## HSTS 的注意事項\n\n1. IP 的請求 HSTS 無法處理，例如：`http://1.1.1.1` Response Header 中設置了 STS，瀏覽器也不會理會\n\n2. HSTS 只能在 80 和 443 埠號之間的轉換，如果服務是 8080 埠號，即便設置了 STS 也無效\n\n3. 當憑證一旦失效，網站會無法順利開啟\n\n4. 如果伺服器的 HTTPS 沒有設定好就開啟了 STS 的 Response Header，並且設置了很長的過期時間，那麼在你伺服器 HTTPS 設定好之前，用戶都是沒辦法連到伺服器，除非 max-age 過期了(因為客戶端會強制使用 HTTPS 與伺服器連線)\n\n## 參考資料\n\n- https://free.com.tw/hsts-preload-list/\n- https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/668827/\n","source":"_drafts/什麼是HSTS.md","raw":"---\ntitle: 什麼是HSTS\ntags:\n  - HSTS\n  - SSL\n  - HTTPS\n  - Nginx\ncategories:\n  - Nginx\n---\n\n## 前言\n\nHTTP 強制安全傳輸(HTTP Strict Transport Security, HSTS)，就是告訴瀏覽器該網站請強制使用 HTTPS 協定作加密連線，以減少連線過程可能遭遇的風險\n\n開啟 HSTS 後未來瀏覽器就會自動將 HTTP 轉為 HTTPS 請求，**即使憑證失效，使用者也無法忽略警告繼續瀏覽網站**。\n\n在 HTTP Repose Header 加入 Strict-Transport-Security(STS) 參數就能告訴瀏覽器該網站使用 HTTPS 連線，在遇到使用 HTTP 訪問時就能自動跳轉到 HTTPS。\n\n<!--more-->\n\n## HTTP To HTTPS 跳轉過程\n\n在還沒有 HTTPS 的年代，都以 80 port 明碼的方式與伺服器通訊，正常情況下可以返回資料\n\n![](HSTS-0.png)\n\n但如果瀏覽器與伺服器之間出現了 Hacker 劫持，伺服器所返回的資料就有可能被有所竄改\n\n![](HSTS-1.png)\n\n後來 SSL加密的出現，我們可以在伺服器端利用 301/302 跳轉強制讓走 80 的客戶自動導轉 443，這也是為了因應平時我們會在瀏覽器習慣性輸入 `www.example.com`。\n\n當瀏覽器走的是 HTTP，請求到達伺服器後，伺服器告訴瀏覽器 302 跳轉，然後瀏覽器重新請求，透過 HTTPS 方式，443 埠號通訊。\n\n![](HSTS-2.png)\n\n也因為不是直接輸入 `https://`，故第一次發起的請求還是使用 80 port，Hacker 利用這一點，也可以進行劫持的動作\n\n![](HSTS-3.png)\n\n## HSTS 運作原理\n\n1. 伺服器啟用 HSTS 功能，伺服器會在 Repose Header 中新增 Strict-Transport-Security，並設置 max-age 時間\n\n2. 客戶端第一次與伺服器連線時，伺服器回應時會帶上 STS Header\n\n3. 如果下次客戶端使用 HTTP 訪問時，只要 max-age 未過期，客戶端會進行內部 307 跳轉，使用 Chrome 瀏覽器開啟「開發人員工具」，可以看到 307 Redirect Internel 的狀態碼\n\n4. Redirect Internel 是客戶端本機瀏覽器 HTTP To HTTPS 跳轉過程，跳轉完成後客戶端就會以 HTTPS 訪問伺服器，這樣就能確保客戶端訪問伺服器時是使用 HTTPS 加密連線\n\n> 總結：使用 HSTS 時，當 max-age 未過期，客戶端會在「自己的瀏覽器」進行 307 跳轉成 HTTPS，再去訪問伺服器\n\n## HSTS 優點\n\n1. 啟用 HSTS 可以有效降低 MITM\n\n2. 保客戶端在有效時間內使用 HTTPS 訪問伺服器\n\n## HSTS 缺點\n\n1. 在瀏覽器未有 STS Header 時，首次使用 80 port 訪問伺服器時，有可能遭受 MITM\n\n2. 無法忽視憑證過期或失效，只要憑證過期或失效就無法訪問網站\n\n3. 如果客戶端在接收到 Strict-Transport-Security(STS) Response Header 前就已經是被劫持狀態，因客戶端並非直接與伺服器連線，故伺服器無法將 STS Response Header 帶給客戶端(因為都被中間人擋下來了)\n\n4. 若清除瀏覽器快取，下次訪問網站時，會使用 HTTP 訪問，伺服器回應會重新帶上 STS Header\n\n> 關於第一點首次訪問使用 HTTP 的問題，其實可以使用 Preload List 的方式來解決，後續會再寫一篇有關 Preload List\n\n## HSTS 的注意事項\n\n1. IP 的請求 HSTS 無法處理，例如：`http://1.1.1.1` Response Header 中設置了 STS，瀏覽器也不會理會\n\n2. HSTS 只能在 80 和 443 埠號之間的轉換，如果服務是 8080 埠號，即便設置了 STS 也無效\n\n3. 當憑證一旦失效，網站會無法順利開啟\n\n4. 如果伺服器的 HTTPS 沒有設定好就開啟了 STS 的 Response Header，並且設置了很長的過期時間，那麼在你伺服器 HTTPS 設定好之前，用戶都是沒辦法連到伺服器，除非 max-age 過期了(因為客戶端會強制使用 HTTPS 與伺服器連線)\n\n## 參考資料\n\n- https://free.com.tw/hsts-preload-list/\n- https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/668827/\n","slug":"什麼是HSTS","published":0,"date":"2023-10-04T15:33:37.184Z","updated":"2023-10-04T15:33:37.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcap000cmxv80f5j31ht","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>HTTP 強制安全傳輸(HTTP Strict Transport Security, HSTS)，就是告訴瀏覽器該網站請強制使用 HTTPS 協定作加密連線，以減少連線過程可能遭遇的風險</p>\n<p>開啟 HSTS 後未來瀏覽器就會自動將 HTTP 轉為 HTTPS 請求，<strong>即使憑證失效，使用者也無法忽略警告繼續瀏覽網站</strong>。</p>\n<p>在 HTTP Repose Header 加入 Strict-Transport-Security(STS) 參數就能告訴瀏覽器該網站使用 HTTPS 連線，在遇到使用 HTTP 訪問時就能自動跳轉到 HTTPS。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"HTTP-To-HTTPS-跳轉過程\"><a href=\"#HTTP-To-HTTPS-跳轉過程\" class=\"headerlink\" title=\"HTTP To HTTPS 跳轉過程\"></a>HTTP To HTTPS 跳轉過程</h2><p>在還沒有 HTTPS 的年代，都以 80 port 明碼的方式與伺服器通訊，正常情況下可以返回資料</p>\n<p><img src=\"HSTS-0.png\"></p>\n<p>但如果瀏覽器與伺服器之間出現了 Hacker 劫持，伺服器所返回的資料就有可能被有所竄改</p>\n<p><img src=\"HSTS-1.png\"></p>\n<p>後來 SSL加密的出現，我們可以在伺服器端利用 301/302 跳轉強制讓走 80 的客戶自動導轉 443，這也是為了因應平時我們會在瀏覽器習慣性輸入 <code>www.example.com</code>。</p>\n<p>當瀏覽器走的是 HTTP，請求到達伺服器後，伺服器告訴瀏覽器 302 跳轉，然後瀏覽器重新請求，透過 HTTPS 方式，443 埠號通訊。</p>\n<p><img src=\"HSTS-2.png\"></p>\n<p>也因為不是直接輸入 <code>https://</code>，故第一次發起的請求還是使用 80 port，Hacker 利用這一點，也可以進行劫持的動作</p>\n<p><img src=\"HSTS-3.png\"></p>\n<h2 id=\"HSTS-運作原理\"><a href=\"#HSTS-運作原理\" class=\"headerlink\" title=\"HSTS 運作原理\"></a>HSTS 運作原理</h2><ol>\n<li><p>伺服器啟用 HSTS 功能，伺服器會在 Repose Header 中新增 Strict-Transport-Security，並設置 max-age 時間</p>\n</li>\n<li><p>客戶端第一次與伺服器連線時，伺服器回應時會帶上 STS Header</p>\n</li>\n<li><p>如果下次客戶端使用 HTTP 訪問時，只要 max-age 未過期，客戶端會進行內部 307 跳轉，使用 Chrome 瀏覽器開啟「開發人員工具」，可以看到 307 Redirect Internel 的狀態碼</p>\n</li>\n<li><p>Redirect Internel 是客戶端本機瀏覽器 HTTP To HTTPS 跳轉過程，跳轉完成後客戶端就會以 HTTPS 訪問伺服器，這樣就能確保客戶端訪問伺服器時是使用 HTTPS 加密連線</p>\n</li>\n</ol>\n<blockquote>\n<p>總結：使用 HSTS 時，當 max-age 未過期，客戶端會在「自己的瀏覽器」進行 307 跳轉成 HTTPS，再去訪問伺服器</p>\n</blockquote>\n<h2 id=\"HSTS-優點\"><a href=\"#HSTS-優點\" class=\"headerlink\" title=\"HSTS 優點\"></a>HSTS 優點</h2><ol>\n<li><p>啟用 HSTS 可以有效降低 MITM</p>\n</li>\n<li><p>保客戶端在有效時間內使用 HTTPS 訪問伺服器</p>\n</li>\n</ol>\n<h2 id=\"HSTS-缺點\"><a href=\"#HSTS-缺點\" class=\"headerlink\" title=\"HSTS 缺點\"></a>HSTS 缺點</h2><ol>\n<li><p>在瀏覽器未有 STS Header 時，首次使用 80 port 訪問伺服器時，有可能遭受 MITM</p>\n</li>\n<li><p>無法忽視憑證過期或失效，只要憑證過期或失效就無法訪問網站</p>\n</li>\n<li><p>如果客戶端在接收到 Strict-Transport-Security(STS) Response Header 前就已經是被劫持狀態，因客戶端並非直接與伺服器連線，故伺服器無法將 STS Response Header 帶給客戶端(因為都被中間人擋下來了)</p>\n</li>\n<li><p>若清除瀏覽器快取，下次訪問網站時，會使用 HTTP 訪問，伺服器回應會重新帶上 STS Header</p>\n</li>\n</ol>\n<blockquote>\n<p>關於第一點首次訪問使用 HTTP 的問題，其實可以使用 Preload List 的方式來解決，後續會再寫一篇有關 Preload List</p>\n</blockquote>\n<h2 id=\"HSTS-的注意事項\"><a href=\"#HSTS-的注意事項\" class=\"headerlink\" title=\"HSTS 的注意事項\"></a>HSTS 的注意事項</h2><ol>\n<li><p>IP 的請求 HSTS 無法處理，例如：<code>http://1.1.1.1</code> Response Header 中設置了 STS，瀏覽器也不會理會</p>\n</li>\n<li><p>HSTS 只能在 80 和 443 埠號之間的轉換，如果服務是 8080 埠號，即便設置了 STS 也無效</p>\n</li>\n<li><p>當憑證一旦失效，網站會無法順利開啟</p>\n</li>\n<li><p>如果伺服器的 HTTPS 沒有設定好就開啟了 STS 的 Response Header，並且設置了很長的過期時間，那麼在你伺服器 HTTPS 設定好之前，用戶都是沒辦法連到伺服器，除非 max-age 過期了(因為客戶端會強制使用 HTTPS 與伺服器連線)</p>\n</li>\n</ol>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://free.com.tw/hsts-preload-list/\">https://free.com.tw/hsts-preload-list/</a></li>\n<li><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/668827/\">https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/668827/</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>HTTP 強制安全傳輸(HTTP Strict Transport Security, HSTS)，就是告訴瀏覽器該網站請強制使用 HTTPS 協定作加密連線，以減少連線過程可能遭遇的風險</p>\n<p>開啟 HSTS 後未來瀏覽器就會自動將 HTTP 轉為 HTTPS 請求，<strong>即使憑證失效，使用者也無法忽略警告繼續瀏覽網站</strong>。</p>\n<p>在 HTTP Repose Header 加入 Strict-Transport-Security(STS) 參數就能告訴瀏覽器該網站使用 HTTPS 連線，在遇到使用 HTTP 訪問時就能自動跳轉到 HTTPS。</p>","more":"<h2 id=\"HTTP-To-HTTPS-跳轉過程\"><a href=\"#HTTP-To-HTTPS-跳轉過程\" class=\"headerlink\" title=\"HTTP To HTTPS 跳轉過程\"></a>HTTP To HTTPS 跳轉過程</h2><p>在還沒有 HTTPS 的年代，都以 80 port 明碼的方式與伺服器通訊，正常情況下可以返回資料</p>\n<p><img src=\"HSTS-0.png\"></p>\n<p>但如果瀏覽器與伺服器之間出現了 Hacker 劫持，伺服器所返回的資料就有可能被有所竄改</p>\n<p><img src=\"HSTS-1.png\"></p>\n<p>後來 SSL加密的出現，我們可以在伺服器端利用 301/302 跳轉強制讓走 80 的客戶自動導轉 443，這也是為了因應平時我們會在瀏覽器習慣性輸入 <code>www.example.com</code>。</p>\n<p>當瀏覽器走的是 HTTP，請求到達伺服器後，伺服器告訴瀏覽器 302 跳轉，然後瀏覽器重新請求，透過 HTTPS 方式，443 埠號通訊。</p>\n<p><img src=\"HSTS-2.png\"></p>\n<p>也因為不是直接輸入 <code>https://</code>，故第一次發起的請求還是使用 80 port，Hacker 利用這一點，也可以進行劫持的動作</p>\n<p><img src=\"HSTS-3.png\"></p>\n<h2 id=\"HSTS-運作原理\"><a href=\"#HSTS-運作原理\" class=\"headerlink\" title=\"HSTS 運作原理\"></a>HSTS 運作原理</h2><ol>\n<li><p>伺服器啟用 HSTS 功能，伺服器會在 Repose Header 中新增 Strict-Transport-Security，並設置 max-age 時間</p>\n</li>\n<li><p>客戶端第一次與伺服器連線時，伺服器回應時會帶上 STS Header</p>\n</li>\n<li><p>如果下次客戶端使用 HTTP 訪問時，只要 max-age 未過期，客戶端會進行內部 307 跳轉，使用 Chrome 瀏覽器開啟「開發人員工具」，可以看到 307 Redirect Internel 的狀態碼</p>\n</li>\n<li><p>Redirect Internel 是客戶端本機瀏覽器 HTTP To HTTPS 跳轉過程，跳轉完成後客戶端就會以 HTTPS 訪問伺服器，這樣就能確保客戶端訪問伺服器時是使用 HTTPS 加密連線</p>\n</li>\n</ol>\n<blockquote>\n<p>總結：使用 HSTS 時，當 max-age 未過期，客戶端會在「自己的瀏覽器」進行 307 跳轉成 HTTPS，再去訪問伺服器</p>\n</blockquote>\n<h2 id=\"HSTS-優點\"><a href=\"#HSTS-優點\" class=\"headerlink\" title=\"HSTS 優點\"></a>HSTS 優點</h2><ol>\n<li><p>啟用 HSTS 可以有效降低 MITM</p>\n</li>\n<li><p>保客戶端在有效時間內使用 HTTPS 訪問伺服器</p>\n</li>\n</ol>\n<h2 id=\"HSTS-缺點\"><a href=\"#HSTS-缺點\" class=\"headerlink\" title=\"HSTS 缺點\"></a>HSTS 缺點</h2><ol>\n<li><p>在瀏覽器未有 STS Header 時，首次使用 80 port 訪問伺服器時，有可能遭受 MITM</p>\n</li>\n<li><p>無法忽視憑證過期或失效，只要憑證過期或失效就無法訪問網站</p>\n</li>\n<li><p>如果客戶端在接收到 Strict-Transport-Security(STS) Response Header 前就已經是被劫持狀態，因客戶端並非直接與伺服器連線，故伺服器無法將 STS Response Header 帶給客戶端(因為都被中間人擋下來了)</p>\n</li>\n<li><p>若清除瀏覽器快取，下次訪問網站時，會使用 HTTP 訪問，伺服器回應會重新帶上 STS Header</p>\n</li>\n</ol>\n<blockquote>\n<p>關於第一點首次訪問使用 HTTP 的問題，其實可以使用 Preload List 的方式來解決，後續會再寫一篇有關 Preload List</p>\n</blockquote>\n<h2 id=\"HSTS-的注意事項\"><a href=\"#HSTS-的注意事項\" class=\"headerlink\" title=\"HSTS 的注意事項\"></a>HSTS 的注意事項</h2><ol>\n<li><p>IP 的請求 HSTS 無法處理，例如：<code>http://1.1.1.1</code> Response Header 中設置了 STS，瀏覽器也不會理會</p>\n</li>\n<li><p>HSTS 只能在 80 和 443 埠號之間的轉換，如果服務是 8080 埠號，即便設置了 STS 也無效</p>\n</li>\n<li><p>當憑證一旦失效，網站會無法順利開啟</p>\n</li>\n<li><p>如果伺服器的 HTTPS 沒有設定好就開啟了 STS 的 Response Header，並且設置了很長的過期時間，那麼在你伺服器 HTTPS 設定好之前，用戶都是沒辦法連到伺服器，除非 max-age 過期了(因為客戶端會強制使用 HTTPS 與伺服器連線)</p>\n</li>\n</ol>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://free.com.tw/hsts-preload-list/\">https://free.com.tw/hsts-preload-list/</a></li>\n<li><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/668827/\">https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/668827/</a></li>\n</ul>"},{"title":"如何自簽憑證(Self-signed certificate)","_content":"\n## 前言\n\n常常我們在自己本機或開發環境可能需要使用憑證，但是透過憑證認證機構（Certificate Authority，CA）來去做簽發會需要額外花費一筆費用，下面會使用 openssl 的指令來自簽憑證，自簽憑證因為非憑證認證機構所簽發，所以會被瀏覽器判定為不安全的，但還是有加密的效果\n\nGoogle Chrome 於2017年1月1日起，終止支援所有SHA-1憑證，所以下面的範例會以SHA-2(SHA256) 來簽發\n\n<!--more-->\n\n## 自簽憑證的方式\n\n安裝 openssl 套件，如果是用紅帽系列的作業系統，可以直接 yum 安裝，如果是使用 Mac OS X 或者其他作業系統，再自行依照個系統的方式來安裝\n\n```\nyum install openssl\n```\n\n產生私鑰(private key)，名稱為 ca.key，名稱可以自取 `[key_Name].key`\n\n```\nopenssl genrsa -out ca.key 4096\n```\n\n利用剛剛的私鑰來產生csr，這邊指令產生出來的檔案名稱為 ca.csr，名稱可以自取 `[csr_Name].csr`，記得加上 `-sha256` 參數\n\n> 如果是要拿到憑證認證機構(CA) 去簽發，就是拿 csr 去提交並驗證，完成後證認證機構就會給你 crt 檔案\n\n```\nopenssl req -new -sha256 -key ca.key -out ca.csr\n```\n\n再來系統會請你填入憑證資訊，以下僅供參考，請依照自己的實際環境填寫\n\n```\nCountry Name (2 letter code) []:TW → 一定要填兩個字母\nState or Province Name (full name) []:Taichung\nLocality Name (eg, city) []:Taichung\nOrganization Name (eg, company) []:abc\nOrganizational Unit Name (eg, section) []:RD\nCommon Name (eg, fully qualified host name) []:localhost → 依照自己的實際情況填寫，如果是跑 localhost 就填入 localhost\nEmail Address []:xx@gmail.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []: 直接 enter 略過\n```\n\n驗證是否為 SHA256 → Signature Algorithm: sha256WithRSAEncryption\n\n```\nopenssl req -in ca.csr -text\n```\n\n因為這邊訴求是自簽憑證，所以我們必須自己擔任憑證認證機構，自己簽發自己的 crt，拿著剛剛產生的 key 和 csr 來簽發，下面簽發到期天數是3650天，可以自行調整，輸出的 crt 的檔名為 ca.crt，名稱可以自取 `[crt_Name].crt`，這邊也要記得加上 `-sha256` 參數\n\n```\nopenssl x509 -req -days 3650 -in ca.csr -signkey ca.key -sha256 -out ca.crt\n```\n\n驗證是否為 SHA256 → Signature Algorithm: sha256WithRSAEncryption\n\n```\nopenssl x509 -in ca.crt -text\n```\n\n以上就是自簽憑證的方式\n\n## 參考資料\n\n- https://blog.codebar.tw/self-signed-certificate-by-using-openssl-ec22a0257a28\n- https://blog.gslin.org/archives/2014/11/20/5353/openssl-%E7%94%A2%E7%94%9F%E4%B8%A6%E7%B0%BD%E5%87%BA-sha2-sha256-%E7%9A%84%E6%86%91%E8%AD%89/\n","source":"_drafts/如何自簽憑證.md","raw":"---\ntitle: 如何自簽憑證(Self-signed certificate)\ntags:\n  - openssl\n  - CA\n  - HTTPS\n  - SSL憑證\n  - certificate\n  - SHA256\n  - SHA-2\ncategories:\n  - Linux\n---\n\n## 前言\n\n常常我們在自己本機或開發環境可能需要使用憑證，但是透過憑證認證機構（Certificate Authority，CA）來去做簽發會需要額外花費一筆費用，下面會使用 openssl 的指令來自簽憑證，自簽憑證因為非憑證認證機構所簽發，所以會被瀏覽器判定為不安全的，但還是有加密的效果\n\nGoogle Chrome 於2017年1月1日起，終止支援所有SHA-1憑證，所以下面的範例會以SHA-2(SHA256) 來簽發\n\n<!--more-->\n\n## 自簽憑證的方式\n\n安裝 openssl 套件，如果是用紅帽系列的作業系統，可以直接 yum 安裝，如果是使用 Mac OS X 或者其他作業系統，再自行依照個系統的方式來安裝\n\n```\nyum install openssl\n```\n\n產生私鑰(private key)，名稱為 ca.key，名稱可以自取 `[key_Name].key`\n\n```\nopenssl genrsa -out ca.key 4096\n```\n\n利用剛剛的私鑰來產生csr，這邊指令產生出來的檔案名稱為 ca.csr，名稱可以自取 `[csr_Name].csr`，記得加上 `-sha256` 參數\n\n> 如果是要拿到憑證認證機構(CA) 去簽發，就是拿 csr 去提交並驗證，完成後證認證機構就會給你 crt 檔案\n\n```\nopenssl req -new -sha256 -key ca.key -out ca.csr\n```\n\n再來系統會請你填入憑證資訊，以下僅供參考，請依照自己的實際環境填寫\n\n```\nCountry Name (2 letter code) []:TW → 一定要填兩個字母\nState or Province Name (full name) []:Taichung\nLocality Name (eg, city) []:Taichung\nOrganization Name (eg, company) []:abc\nOrganizational Unit Name (eg, section) []:RD\nCommon Name (eg, fully qualified host name) []:localhost → 依照自己的實際情況填寫，如果是跑 localhost 就填入 localhost\nEmail Address []:xx@gmail.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []: 直接 enter 略過\n```\n\n驗證是否為 SHA256 → Signature Algorithm: sha256WithRSAEncryption\n\n```\nopenssl req -in ca.csr -text\n```\n\n因為這邊訴求是自簽憑證，所以我們必須自己擔任憑證認證機構，自己簽發自己的 crt，拿著剛剛產生的 key 和 csr 來簽發，下面簽發到期天數是3650天，可以自行調整，輸出的 crt 的檔名為 ca.crt，名稱可以自取 `[crt_Name].crt`，這邊也要記得加上 `-sha256` 參數\n\n```\nopenssl x509 -req -days 3650 -in ca.csr -signkey ca.key -sha256 -out ca.crt\n```\n\n驗證是否為 SHA256 → Signature Algorithm: sha256WithRSAEncryption\n\n```\nopenssl x509 -in ca.crt -text\n```\n\n以上就是自簽憑證的方式\n\n## 參考資料\n\n- https://blog.codebar.tw/self-signed-certificate-by-using-openssl-ec22a0257a28\n- https://blog.gslin.org/archives/2014/11/20/5353/openssl-%E7%94%A2%E7%94%9F%E4%B8%A6%E7%B0%BD%E5%87%BA-sha2-sha256-%E7%9A%84%E6%86%91%E8%AD%89/\n","slug":"如何自簽憑證","published":0,"date":"2023-10-04T15:33:37.188Z","updated":"2023-10-04T15:33:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcaq000fmxv80t587l1i","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>常常我們在自己本機或開發環境可能需要使用憑證，但是透過憑證認證機構（Certificate Authority，CA）來去做簽發會需要額外花費一筆費用，下面會使用 openssl 的指令來自簽憑證，自簽憑證因為非憑證認證機構所簽發，所以會被瀏覽器判定為不安全的，但還是有加密的效果</p>\n<p>Google Chrome 於2017年1月1日起，終止支援所有SHA-1憑證，所以下面的範例會以SHA-2(SHA256) 來簽發</p>\n<span id=\"more\"></span>\n\n<h2 id=\"自簽憑證的方式\"><a href=\"#自簽憑證的方式\" class=\"headerlink\" title=\"自簽憑證的方式\"></a>自簽憑證的方式</h2><p>安裝 openssl 套件，如果是用紅帽系列的作業系統，可以直接 yum 安裝，如果是使用 Mac OS X 或者其他作業系統，再自行依照個系統的方式來安裝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install openssl</span><br></pre></td></tr></table></figure>\n\n<p>產生私鑰(private key)，名稱為 ca.key，名稱可以自取 <code>[key_Name].key</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out ca.key 4096</span><br></pre></td></tr></table></figure>\n\n<p>利用剛剛的私鑰來產生csr，這邊指令產生出來的檔案名稱為 ca.csr，名稱可以自取 <code>[csr_Name].csr</code>，記得加上 <code>-sha256</code> 參數</p>\n<blockquote>\n<p>如果是要拿到憑證認證機構(CA) 去簽發，就是拿 csr 去提交並驗證，完成後證認證機構就會給你 crt 檔案</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -sha256 -key ca.key -out ca.csr</span><br></pre></td></tr></table></figure>\n\n<p>再來系統會請你填入憑證資訊，以下僅供參考，請依照自己的實際環境填寫</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Country Name (2 letter code) []:TW → 一定要填兩個字母</span><br><span class=\"line\">State or Province Name (full name) []:Taichung</span><br><span class=\"line\">Locality Name (eg, city) []:Taichung</span><br><span class=\"line\">Organization Name (eg, company) []:abc</span><br><span class=\"line\">Organizational Unit Name (eg, section) []:RD</span><br><span class=\"line\">Common Name (eg, fully qualified host name) []:localhost → 依照自己的實際情況填寫，如果是跑 localhost 就填入 localhost</span><br><span class=\"line\">Email Address []:xx@gmail.com</span><br><span class=\"line\"></span><br><span class=\"line\">Please enter the following &#39;extra&#39; attributes</span><br><span class=\"line\">to be sent with your certificate request</span><br><span class=\"line\">A challenge password []: 直接 enter 略過</span><br></pre></td></tr></table></figure>\n\n<p>驗證是否為 SHA256 → Signature Algorithm: sha256WithRSAEncryption</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -in ca.csr -text</span><br></pre></td></tr></table></figure>\n\n<p>因為這邊訴求是自簽憑證，所以我們必須自己擔任憑證認證機構，自己簽發自己的 crt，拿著剛剛產生的 key 和 csr 來簽發，下面簽發到期天數是3650天，可以自行調整，輸出的 crt 的檔名為 ca.crt，名稱可以自取 <code>[crt_Name].crt</code>，這邊也要記得加上 <code>-sha256</code> 參數</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 3650 -in ca.csr -signkey ca.key -sha256 -out ca.crt</span><br></pre></td></tr></table></figure>\n\n<p>驗證是否為 SHA256 → Signature Algorithm: sha256WithRSAEncryption</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -in ca.crt -text</span><br></pre></td></tr></table></figure>\n\n<p>以上就是自簽憑證的方式</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://blog.codebar.tw/self-signed-certificate-by-using-openssl-ec22a0257a28\">https://blog.codebar.tw/self-signed-certificate-by-using-openssl-ec22a0257a28</a></li>\n<li><a href=\"https://blog.gslin.org/archives/2014/11/20/5353/openssl-%E7%94%A2%E7%94%9F%E4%B8%A6%E7%B0%BD%E5%87%BA-sha2-sha256-%E7%9A%84%E6%86%91%E8%AD%89/\">https://blog.gslin.org/archives/2014/11/20/5353/openssl-%E7%94%A2%E7%94%9F%E4%B8%A6%E7%B0%BD%E5%87%BA-sha2-sha256-%E7%9A%84%E6%86%91%E8%AD%89/</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>常常我們在自己本機或開發環境可能需要使用憑證，但是透過憑證認證機構（Certificate Authority，CA）來去做簽發會需要額外花費一筆費用，下面會使用 openssl 的指令來自簽憑證，自簽憑證因為非憑證認證機構所簽發，所以會被瀏覽器判定為不安全的，但還是有加密的效果</p>\n<p>Google Chrome 於2017年1月1日起，終止支援所有SHA-1憑證，所以下面的範例會以SHA-2(SHA256) 來簽發</p>","more":"<h2 id=\"自簽憑證的方式\"><a href=\"#自簽憑證的方式\" class=\"headerlink\" title=\"自簽憑證的方式\"></a>自簽憑證的方式</h2><p>安裝 openssl 套件，如果是用紅帽系列的作業系統，可以直接 yum 安裝，如果是使用 Mac OS X 或者其他作業系統，再自行依照個系統的方式來安裝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install openssl</span><br></pre></td></tr></table></figure>\n\n<p>產生私鑰(private key)，名稱為 ca.key，名稱可以自取 <code>[key_Name].key</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out ca.key 4096</span><br></pre></td></tr></table></figure>\n\n<p>利用剛剛的私鑰來產生csr，這邊指令產生出來的檔案名稱為 ca.csr，名稱可以自取 <code>[csr_Name].csr</code>，記得加上 <code>-sha256</code> 參數</p>\n<blockquote>\n<p>如果是要拿到憑證認證機構(CA) 去簽發，就是拿 csr 去提交並驗證，完成後證認證機構就會給你 crt 檔案</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -sha256 -key ca.key -out ca.csr</span><br></pre></td></tr></table></figure>\n\n<p>再來系統會請你填入憑證資訊，以下僅供參考，請依照自己的實際環境填寫</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Country Name (2 letter code) []:TW → 一定要填兩個字母</span><br><span class=\"line\">State or Province Name (full name) []:Taichung</span><br><span class=\"line\">Locality Name (eg, city) []:Taichung</span><br><span class=\"line\">Organization Name (eg, company) []:abc</span><br><span class=\"line\">Organizational Unit Name (eg, section) []:RD</span><br><span class=\"line\">Common Name (eg, fully qualified host name) []:localhost → 依照自己的實際情況填寫，如果是跑 localhost 就填入 localhost</span><br><span class=\"line\">Email Address []:xx@gmail.com</span><br><span class=\"line\"></span><br><span class=\"line\">Please enter the following &#39;extra&#39; attributes</span><br><span class=\"line\">to be sent with your certificate request</span><br><span class=\"line\">A challenge password []: 直接 enter 略過</span><br></pre></td></tr></table></figure>\n\n<p>驗證是否為 SHA256 → Signature Algorithm: sha256WithRSAEncryption</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -in ca.csr -text</span><br></pre></td></tr></table></figure>\n\n<p>因為這邊訴求是自簽憑證，所以我們必須自己擔任憑證認證機構，自己簽發自己的 crt，拿著剛剛產生的 key 和 csr 來簽發，下面簽發到期天數是3650天，可以自行調整，輸出的 crt 的檔名為 ca.crt，名稱可以自取 <code>[crt_Name].crt</code>，這邊也要記得加上 <code>-sha256</code> 參數</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 3650 -in ca.csr -signkey ca.key -sha256 -out ca.crt</span><br></pre></td></tr></table></figure>\n\n<p>驗證是否為 SHA256 → Signature Algorithm: sha256WithRSAEncryption</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -in ca.crt -text</span><br></pre></td></tr></table></figure>\n\n<p>以上就是自簽憑證的方式</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://blog.codebar.tw/self-signed-certificate-by-using-openssl-ec22a0257a28\">https://blog.codebar.tw/self-signed-certificate-by-using-openssl-ec22a0257a28</a></li>\n<li><a href=\"https://blog.gslin.org/archives/2014/11/20/5353/openssl-%E7%94%A2%E7%94%9F%E4%B8%A6%E7%B0%BD%E5%87%BA-sha2-sha256-%E7%9A%84%E6%86%91%E8%AD%89/\">https://blog.gslin.org/archives/2014/11/20/5353/openssl-%E7%94%A2%E7%94%9F%E4%B8%A6%E7%B0%BD%E5%87%BA-sha2-sha256-%E7%9A%84%E6%86%91%E8%AD%89/</a></li>\n</ul>"},{"title":"Auto Completion不區分大小寫","date":"2021-05-11T08:25:56.000Z","_content":"\n## 前言\n\nBash Completion 可以讓你在使用 Bash 指令時，按「Tab」鍵，讓系統自動幫你把指令補齊，這可以加速你在輸入指令時的速度。\n\n但如果今天我想要進入 Test 的目錄，依照習慣預設輸入法會是小寫所以大部的人會輸入成\n\n- 輸入 `cd t` 再按 Tab 鍵\n\n此時系統就無法幫忙補齊，因為預設會區分大小寫，如果要忽略大小寫可以參考以下方式\n\n<!--more-->\n\n## 解決方式\n\n在家目錄底下有個 `.inputrc` 的檔案，可以最後面補上 `set completion-ignore-case On` 即可。 或者直接輸入以下指令\n\n```\n$ echo 'set completion-ignore-case On' >> ~/.inputrc\n```\n\n## 參考資料\n\n- https://caloskao.org/linux-make-tab-auto-completion-case-insensitive-in-the-terminal/\n","source":"_posts/Auto-Completion不區分大小寫.md","raw":"---\ntitle: Auto Completion不區分大小寫\ntags:\n  - Bash\n  - Auto Completion\n  - Bash Completion\n  - Linux\ndate: 2021-05-11 16:25:56\ncategories:\n  - Linux\n---\n\n## 前言\n\nBash Completion 可以讓你在使用 Bash 指令時，按「Tab」鍵，讓系統自動幫你把指令補齊，這可以加速你在輸入指令時的速度。\n\n但如果今天我想要進入 Test 的目錄，依照習慣預設輸入法會是小寫所以大部的人會輸入成\n\n- 輸入 `cd t` 再按 Tab 鍵\n\n此時系統就無法幫忙補齊，因為預設會區分大小寫，如果要忽略大小寫可以參考以下方式\n\n<!--more-->\n\n## 解決方式\n\n在家目錄底下有個 `.inputrc` 的檔案，可以最後面補上 `set completion-ignore-case On` 即可。 或者直接輸入以下指令\n\n```\n$ echo 'set completion-ignore-case On' >> ~/.inputrc\n```\n\n## 參考資料\n\n- https://caloskao.org/linux-make-tab-auto-completion-case-insensitive-in-the-terminal/\n","slug":"Auto-Completion不區分大小寫","published":1,"updated":"2023-10-04T15:33:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcas000gmxv88zsi8wsz","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Bash Completion 可以讓你在使用 Bash 指令時，按「Tab」鍵，讓系統自動幫你把指令補齊，這可以加速你在輸入指令時的速度。</p>\n<p>但如果今天我想要進入 Test 的目錄，依照習慣預設輸入法會是小寫所以大部的人會輸入成</p>\n<ul>\n<li>輸入 <code>cd t</code> 再按 Tab 鍵</li>\n</ul>\n<p>此時系統就無法幫忙補齊，因為預設會區分大小寫，如果要忽略大小寫可以參考以下方式</p>\n<span id=\"more\"></span>\n\n<h2 id=\"解決方式\"><a href=\"#解決方式\" class=\"headerlink\" title=\"解決方式\"></a>解決方式</h2><p>在家目錄底下有個 <code>.inputrc</code> 的檔案，可以最後面補上 <code>set completion-ignore-case On</code> 即可。 或者直接輸入以下指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &#39;set completion-ignore-case On&#39; &gt;&gt; ~&#x2F;.inputrc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://caloskao.org/linux-make-tab-auto-completion-case-insensitive-in-the-terminal/\">https://caloskao.org/linux-make-tab-auto-completion-case-insensitive-in-the-terminal/</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Bash Completion 可以讓你在使用 Bash 指令時，按「Tab」鍵，讓系統自動幫你把指令補齊，這可以加速你在輸入指令時的速度。</p>\n<p>但如果今天我想要進入 Test 的目錄，依照習慣預設輸入法會是小寫所以大部的人會輸入成</p>\n<ul>\n<li>輸入 <code>cd t</code> 再按 Tab 鍵</li>\n</ul>\n<p>此時系統就無法幫忙補齊，因為預設會區分大小寫，如果要忽略大小寫可以參考以下方式</p>","more":"<h2 id=\"解決方式\"><a href=\"#解決方式\" class=\"headerlink\" title=\"解決方式\"></a>解決方式</h2><p>在家目錄底下有個 <code>.inputrc</code> 的檔案，可以最後面補上 <code>set completion-ignore-case On</code> 即可。 或者直接輸入以下指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &#39;set completion-ignore-case On&#39; &gt;&gt; ~&#x2F;.inputrc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://caloskao.org/linux-make-tab-auto-completion-case-insensitive-in-the-terminal/\">https://caloskao.org/linux-make-tab-auto-completion-case-insensitive-in-the-terminal/</a></li>\n</ul>"},{"title":"Cloud NAT的限制","date":"2021-05-10T14:04:32.000Z","_content":"\n## 前言\n\n因公司產品是採用 GKE 的基礎設施，為了讓 GKE 對外有一個 static IP，所以有加上 Cloud NAT 的功能，一開始加上去並沒有什麼問題，但日子長了之後，某一天發現要再擴增 Node 時，沒有辦法順利擴增，查了好一段時間才知道，原來是 Cloud NAT 導致要擴增 Node 時沒有辦法擴增，這其實很難想像得到，因為基本上不會有理由去懷疑是 Cloud NAT 所致。\n\n所以這邊紀錄一下遇到的問題，說不定你也正遇到跟我一樣的問題\n\n<!--more-->\n\n## Cloud NAT\n\n在 Cloud NAT 的進階設定中，有一個欄位叫做「每個 VM\n執行個體的最低通訊埠數量」，如果你是使用英文介面會顯示「Minimum ports per VM instance」，就是這個數值會去影響可以運行的機器數量，後來參考外國的一篇文章才了解到此設定的重要性(參考的資料放在文後)，此數值不僅會決定你所選取的 VPC 內可以使用的機器數量，還會決定你的每台機器從 NAT 出去的連線數量，以下詳細說明\n\n### 連線量\n\n「每個 VM 執行個體的最低通訊埠數量」所填入的數值，本質意義是在說明: 你指定的 VPC 底下的每一台機器透過 Cloud NAT 到相同目的 IP 與 port 且使用相同的通訊協定(TCP or UDP) 的連線數量。\n\n舉例來說：預設數值為64，我的 VPC 內有三台機器，其中一台機器連線到 `TCP 1.1.1.1:1000` 此目的的數量有64條，這時此台機器要再連線此目的的連線就會被 drop 掉，導致後續的連線會異常，但是還是可以連線到「其他目的」。\n\n> 此處的「其他目的」是指與 `TCP 1.1.1.1:1000` 不同的「目的IP」或「目的Port」或「通訊協定」\n\n以下都是可以正常連線的目的，而且連線數是個別分開計算，這樣舉例會比較清楚\n\n- UDP 1.1.1.1:1000\n- TCP 2.2.2.2:1000\n- UDP 2.2.2.2:1000\n- TCP 2.2.2.2:2000\n- UDP 2.2.2.2:3000\n\n### 機器數量\n\n再來要討論「每個 VM 執行個體的最低通訊埠數量」的數值要怎麼計算 VPC 底下可以開幾台 Node\n\n每個 Cloud NAT 的 IP 有 65536 個連接埠分別給 TCP 與 UDP 使用，其中有 1024 個是公認通訊埠號(well-known port numbers)，所以實際可使用的連接埠為 64512(65536-1024)，如果使用 Google 給的預設數值64，那每個 NAT IP 可以支援相對應 VPC 底下高達 1008 台 Node (64512/64)，但是缺點就是可乘載的連線數量相對就比較少，如果想要擴增可乘載的機器數量，可以增加 NAT IP 來解決，如果在 Cloud NAT 放上第二組 NAT IP，此時 Node 就可以到 2016(1008*2) 那麼多。\n\n## 參考資料\n\n- https://medium.com/bluekiri/high-availability-nat-gateway-at-google-cloud-platform-with-cloud-nat-8a792b1c4cc4\n","source":"_posts/Cloud-NAT的限制.md","raw":"---\ntitle: Cloud NAT的限制\ntags:\n  - GKE\n  - GCP\n  - Google Cloud Platform\n  - Cloud NAT\ndate: 2021-05-10 22:04:32\ncategories:\n  - GCP\n---\n\n## 前言\n\n因公司產品是採用 GKE 的基礎設施，為了讓 GKE 對外有一個 static IP，所以有加上 Cloud NAT 的功能，一開始加上去並沒有什麼問題，但日子長了之後，某一天發現要再擴增 Node 時，沒有辦法順利擴增，查了好一段時間才知道，原來是 Cloud NAT 導致要擴增 Node 時沒有辦法擴增，這其實很難想像得到，因為基本上不會有理由去懷疑是 Cloud NAT 所致。\n\n所以這邊紀錄一下遇到的問題，說不定你也正遇到跟我一樣的問題\n\n<!--more-->\n\n## Cloud NAT\n\n在 Cloud NAT 的進階設定中，有一個欄位叫做「每個 VM\n執行個體的最低通訊埠數量」，如果你是使用英文介面會顯示「Minimum ports per VM instance」，就是這個數值會去影響可以運行的機器數量，後來參考外國的一篇文章才了解到此設定的重要性(參考的資料放在文後)，此數值不僅會決定你所選取的 VPC 內可以使用的機器數量，還會決定你的每台機器從 NAT 出去的連線數量，以下詳細說明\n\n### 連線量\n\n「每個 VM 執行個體的最低通訊埠數量」所填入的數值，本質意義是在說明: 你指定的 VPC 底下的每一台機器透過 Cloud NAT 到相同目的 IP 與 port 且使用相同的通訊協定(TCP or UDP) 的連線數量。\n\n舉例來說：預設數值為64，我的 VPC 內有三台機器，其中一台機器連線到 `TCP 1.1.1.1:1000` 此目的的數量有64條，這時此台機器要再連線此目的的連線就會被 drop 掉，導致後續的連線會異常，但是還是可以連線到「其他目的」。\n\n> 此處的「其他目的」是指與 `TCP 1.1.1.1:1000` 不同的「目的IP」或「目的Port」或「通訊協定」\n\n以下都是可以正常連線的目的，而且連線數是個別分開計算，這樣舉例會比較清楚\n\n- UDP 1.1.1.1:1000\n- TCP 2.2.2.2:1000\n- UDP 2.2.2.2:1000\n- TCP 2.2.2.2:2000\n- UDP 2.2.2.2:3000\n\n### 機器數量\n\n再來要討論「每個 VM 執行個體的最低通訊埠數量」的數值要怎麼計算 VPC 底下可以開幾台 Node\n\n每個 Cloud NAT 的 IP 有 65536 個連接埠分別給 TCP 與 UDP 使用，其中有 1024 個是公認通訊埠號(well-known port numbers)，所以實際可使用的連接埠為 64512(65536-1024)，如果使用 Google 給的預設數值64，那每個 NAT IP 可以支援相對應 VPC 底下高達 1008 台 Node (64512/64)，但是缺點就是可乘載的連線數量相對就比較少，如果想要擴增可乘載的機器數量，可以增加 NAT IP 來解決，如果在 Cloud NAT 放上第二組 NAT IP，此時 Node 就可以到 2016(1008*2) 那麼多。\n\n## 參考資料\n\n- https://medium.com/bluekiri/high-availability-nat-gateway-at-google-cloud-platform-with-cloud-nat-8a792b1c4cc4\n","slug":"Cloud-NAT的限制","published":1,"updated":"2023-10-04T15:33:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcau000kmxv89ew84xim","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因公司產品是採用 GKE 的基礎設施，為了讓 GKE 對外有一個 static IP，所以有加上 Cloud NAT 的功能，一開始加上去並沒有什麼問題，但日子長了之後，某一天發現要再擴增 Node 時，沒有辦法順利擴增，查了好一段時間才知道，原來是 Cloud NAT 導致要擴增 Node 時沒有辦法擴增，這其實很難想像得到，因為基本上不會有理由去懷疑是 Cloud NAT 所致。</p>\n<p>所以這邊紀錄一下遇到的問題，說不定你也正遇到跟我一樣的問題</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Cloud-NAT\"><a href=\"#Cloud-NAT\" class=\"headerlink\" title=\"Cloud NAT\"></a>Cloud NAT</h2><p>在 Cloud NAT 的進階設定中，有一個欄位叫做「每個 VM<br>執行個體的最低通訊埠數量」，如果你是使用英文介面會顯示「Minimum ports per VM instance」，就是這個數值會去影響可以運行的機器數量，後來參考外國的一篇文章才了解到此設定的重要性(參考的資料放在文後)，此數值不僅會決定你所選取的 VPC 內可以使用的機器數量，還會決定你的每台機器從 NAT 出去的連線數量，以下詳細說明</p>\n<h3 id=\"連線量\"><a href=\"#連線量\" class=\"headerlink\" title=\"連線量\"></a>連線量</h3><p>「每個 VM 執行個體的最低通訊埠數量」所填入的數值，本質意義是在說明: 你指定的 VPC 底下的每一台機器透過 Cloud NAT 到相同目的 IP 與 port 且使用相同的通訊協定(TCP or UDP) 的連線數量。</p>\n<p>舉例來說：預設數值為64，我的 VPC 內有三台機器，其中一台機器連線到 <code>TCP 1.1.1.1:1000</code> 此目的的數量有64條，這時此台機器要再連線此目的的連線就會被 drop 掉，導致後續的連線會異常，但是還是可以連線到「其他目的」。</p>\n<blockquote>\n<p>此處的「其他目的」是指與 <code>TCP 1.1.1.1:1000</code> 不同的「目的IP」或「目的Port」或「通訊協定」</p>\n</blockquote>\n<p>以下都是可以正常連線的目的，而且連線數是個別分開計算，這樣舉例會比較清楚</p>\n<ul>\n<li>UDP 1.1.1.1:1000</li>\n<li>TCP 2.2.2.2:1000</li>\n<li>UDP 2.2.2.2:1000</li>\n<li>TCP 2.2.2.2:2000</li>\n<li>UDP 2.2.2.2:3000</li>\n</ul>\n<h3 id=\"機器數量\"><a href=\"#機器數量\" class=\"headerlink\" title=\"機器數量\"></a>機器數量</h3><p>再來要討論「每個 VM 執行個體的最低通訊埠數量」的數值要怎麼計算 VPC 底下可以開幾台 Node</p>\n<p>每個 Cloud NAT 的 IP 有 65536 個連接埠分別給 TCP 與 UDP 使用，其中有 1024 個是公認通訊埠號(well-known port numbers)，所以實際可使用的連接埠為 64512(65536-1024)，如果使用 Google 給的預設數值64，那每個 NAT IP 可以支援相對應 VPC 底下高達 1008 台 Node (64512/64)，但是缺點就是可乘載的連線數量相對就比較少，如果想要擴增可乘載的機器數量，可以增加 NAT IP 來解決，如果在 Cloud NAT 放上第二組 NAT IP，此時 Node 就可以到 2016(1008*2) 那麼多。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://medium.com/bluekiri/high-availability-nat-gateway-at-google-cloud-platform-with-cloud-nat-8a792b1c4cc4\">https://medium.com/bluekiri/high-availability-nat-gateway-at-google-cloud-platform-with-cloud-nat-8a792b1c4cc4</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因公司產品是採用 GKE 的基礎設施，為了讓 GKE 對外有一個 static IP，所以有加上 Cloud NAT 的功能，一開始加上去並沒有什麼問題，但日子長了之後，某一天發現要再擴增 Node 時，沒有辦法順利擴增，查了好一段時間才知道，原來是 Cloud NAT 導致要擴增 Node 時沒有辦法擴增，這其實很難想像得到，因為基本上不會有理由去懷疑是 Cloud NAT 所致。</p>\n<p>所以這邊紀錄一下遇到的問題，說不定你也正遇到跟我一樣的問題</p>","more":"<h2 id=\"Cloud-NAT\"><a href=\"#Cloud-NAT\" class=\"headerlink\" title=\"Cloud NAT\"></a>Cloud NAT</h2><p>在 Cloud NAT 的進階設定中，有一個欄位叫做「每個 VM<br>執行個體的最低通訊埠數量」，如果你是使用英文介面會顯示「Minimum ports per VM instance」，就是這個數值會去影響可以運行的機器數量，後來參考外國的一篇文章才了解到此設定的重要性(參考的資料放在文後)，此數值不僅會決定你所選取的 VPC 內可以使用的機器數量，還會決定你的每台機器從 NAT 出去的連線數量，以下詳細說明</p>\n<h3 id=\"連線量\"><a href=\"#連線量\" class=\"headerlink\" title=\"連線量\"></a>連線量</h3><p>「每個 VM 執行個體的最低通訊埠數量」所填入的數值，本質意義是在說明: 你指定的 VPC 底下的每一台機器透過 Cloud NAT 到相同目的 IP 與 port 且使用相同的通訊協定(TCP or UDP) 的連線數量。</p>\n<p>舉例來說：預設數值為64，我的 VPC 內有三台機器，其中一台機器連線到 <code>TCP 1.1.1.1:1000</code> 此目的的數量有64條，這時此台機器要再連線此目的的連線就會被 drop 掉，導致後續的連線會異常，但是還是可以連線到「其他目的」。</p>\n<blockquote>\n<p>此處的「其他目的」是指與 <code>TCP 1.1.1.1:1000</code> 不同的「目的IP」或「目的Port」或「通訊協定」</p>\n</blockquote>\n<p>以下都是可以正常連線的目的，而且連線數是個別分開計算，這樣舉例會比較清楚</p>\n<ul>\n<li>UDP 1.1.1.1:1000</li>\n<li>TCP 2.2.2.2:1000</li>\n<li>UDP 2.2.2.2:1000</li>\n<li>TCP 2.2.2.2:2000</li>\n<li>UDP 2.2.2.2:3000</li>\n</ul>\n<h3 id=\"機器數量\"><a href=\"#機器數量\" class=\"headerlink\" title=\"機器數量\"></a>機器數量</h3><p>再來要討論「每個 VM 執行個體的最低通訊埠數量」的數值要怎麼計算 VPC 底下可以開幾台 Node</p>\n<p>每個 Cloud NAT 的 IP 有 65536 個連接埠分別給 TCP 與 UDP 使用，其中有 1024 個是公認通訊埠號(well-known port numbers)，所以實際可使用的連接埠為 64512(65536-1024)，如果使用 Google 給的預設數值64，那每個 NAT IP 可以支援相對應 VPC 底下高達 1008 台 Node (64512/64)，但是缺點就是可乘載的連線數量相對就比較少，如果想要擴增可乘載的機器數量，可以增加 NAT IP 來解決，如果在 Cloud NAT 放上第二組 NAT IP，此時 Node 就可以到 2016(1008*2) 那麼多。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://medium.com/bluekiri/high-availability-nat-gateway-at-google-cloud-platform-with-cloud-nat-8a792b1c4cc4\">https://medium.com/bluekiri/high-availability-nat-gateway-at-google-cloud-platform-with-cloud-nat-8a792b1c4cc4</a></li>\n</ul>"},{"title":"Hexo加入Disqus留言功能","date":"2021-08-16T02:38:09.000Z","_content":"\n## 前言\n\n當我們利用 Hexo 架設好部落格並選定主題後，我們可能會希望讀者們可以針對文章予以回饋，這時候留言板功能就顯得格外重要，在 Hexo 中我們可以整併 Disqus 留言功能進去，讓文章的結尾可以有一塊專門留言的留言板，好讓讀者能夠留下寶貴的意見或問題\n\n<!--more-->\n\n## Disqus 留言功能啟用/使用\n\nDisqus 留言功能屬於第三方的功能，所以我們需要到 [Disqus 官方](https://disqus.com) 註冊帳號，註冊期間會請你填入 shortname，請留意一下，shortname 設定後是無法再修改的\n\n註冊後再到 `./themes/next/_config.yml` 內 Disqus 的區塊去做設定，將 enable 參數值改成 true，shortname 的值改成 Disqus 當時申請時所填入的 shortname\n\n```\n# Disqus\n# For more information: https://disqus.com\ndisqus:\n  enable: false\n  shortname: YOUR_SHORTNAME\n  count: true\n```\n\n## 文後討論\n\n因 Disqus 屬於第三方管理，所以相關後台設定需要到 Disqus 登入自己的帳號來調整，例如：留言通知、更改語言等等...\n\n這邊順便提一下，Disqus 預設不允許讀者在沒有登入 Disqus 的情況下進行留言，如果想要讓讀者可以在沒有登入 Disqus 的情況下留言，可以到 Disqus 的後台下述路徑去調整\n\n```\nSettings → Admin → Edit Settings → 選擇要修改的部落格 → Coummunity → Moderation → Guest Commenting打勾\n```\n\n> 路徑的部分可能隨時間官方會有所調整，若有更動，可能需要稍微找一下\n\n雖然如此，但是讀者最少還是得留下「名字」跟「E-mail」才能進行留言，如圖\n\n![](0.png)\n","source":"_posts/Hexo加入Disqus留言功能.md","raw":"---\ntitle: Hexo加入Disqus留言功能\ntags:\n  - Hexo\n  - blog\n  - Disqus\ncategories:\n  - Hexo\ndate: 2021-08-16 10:38:09\n---\n\n## 前言\n\n當我們利用 Hexo 架設好部落格並選定主題後，我們可能會希望讀者們可以針對文章予以回饋，這時候留言板功能就顯得格外重要，在 Hexo 中我們可以整併 Disqus 留言功能進去，讓文章的結尾可以有一塊專門留言的留言板，好讓讀者能夠留下寶貴的意見或問題\n\n<!--more-->\n\n## Disqus 留言功能啟用/使用\n\nDisqus 留言功能屬於第三方的功能，所以我們需要到 [Disqus 官方](https://disqus.com) 註冊帳號，註冊期間會請你填入 shortname，請留意一下，shortname 設定後是無法再修改的\n\n註冊後再到 `./themes/next/_config.yml` 內 Disqus 的區塊去做設定，將 enable 參數值改成 true，shortname 的值改成 Disqus 當時申請時所填入的 shortname\n\n```\n# Disqus\n# For more information: https://disqus.com\ndisqus:\n  enable: false\n  shortname: YOUR_SHORTNAME\n  count: true\n```\n\n## 文後討論\n\n因 Disqus 屬於第三方管理，所以相關後台設定需要到 Disqus 登入自己的帳號來調整，例如：留言通知、更改語言等等...\n\n這邊順便提一下，Disqus 預設不允許讀者在沒有登入 Disqus 的情況下進行留言，如果想要讓讀者可以在沒有登入 Disqus 的情況下留言，可以到 Disqus 的後台下述路徑去調整\n\n```\nSettings → Admin → Edit Settings → 選擇要修改的部落格 → Coummunity → Moderation → Guest Commenting打勾\n```\n\n> 路徑的部分可能隨時間官方會有所調整，若有更動，可能需要稍微找一下\n\n雖然如此，但是讀者最少還是得留下「名字」跟「E-mail」才能進行留言，如圖\n\n![](0.png)\n","slug":"Hexo加入Disqus留言功能","published":1,"updated":"2023-10-04T15:33:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcav000lmxv8dzov24uf","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>當我們利用 Hexo 架設好部落格並選定主題後，我們可能會希望讀者們可以針對文章予以回饋，這時候留言板功能就顯得格外重要，在 Hexo 中我們可以整併 Disqus 留言功能進去，讓文章的結尾可以有一塊專門留言的留言板，好讓讀者能夠留下寶貴的意見或問題</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Disqus-留言功能啟用-使用\"><a href=\"#Disqus-留言功能啟用-使用\" class=\"headerlink\" title=\"Disqus 留言功能啟用/使用\"></a>Disqus 留言功能啟用/使用</h2><p>Disqus 留言功能屬於第三方的功能，所以我們需要到 <a href=\"https://disqus.com/\">Disqus 官方</a> 註冊帳號，註冊期間會請你填入 shortname，請留意一下，shortname 設定後是無法再修改的</p>\n<p>註冊後再到 <code>./themes/next/_config.yml</code> 內 Disqus 的區塊去做設定，將 enable 參數值改成 true，shortname 的值改成 Disqus 當時申請時所填入的 shortname</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Disqus</span><br><span class=\"line\"># For more information: https:&#x2F;&#x2F;disqus.com</span><br><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  shortname: YOUR_SHORTNAME</span><br><span class=\"line\">  count: true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><p>因 Disqus 屬於第三方管理，所以相關後台設定需要到 Disqus 登入自己的帳號來調整，例如：留言通知、更改語言等等…</p>\n<p>這邊順便提一下，Disqus 預設不允許讀者在沒有登入 Disqus 的情況下進行留言，如果想要讓讀者可以在沒有登入 Disqus 的情況下留言，可以到 Disqus 的後台下述路徑去調整</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings → Admin → Edit Settings → 選擇要修改的部落格 → Coummunity → Moderation → Guest Commenting打勾</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>路徑的部分可能隨時間官方會有所調整，若有更動，可能需要稍微找一下</p>\n</blockquote>\n<p>雖然如此，但是讀者最少還是得留下「名字」跟「E-mail」才能進行留言，如圖</p>\n<p><img src=\"0.png\"></p>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>當我們利用 Hexo 架設好部落格並選定主題後，我們可能會希望讀者們可以針對文章予以回饋，這時候留言板功能就顯得格外重要，在 Hexo 中我們可以整併 Disqus 留言功能進去，讓文章的結尾可以有一塊專門留言的留言板，好讓讀者能夠留下寶貴的意見或問題</p>","more":"<h2 id=\"Disqus-留言功能啟用-使用\"><a href=\"#Disqus-留言功能啟用-使用\" class=\"headerlink\" title=\"Disqus 留言功能啟用/使用\"></a>Disqus 留言功能啟用/使用</h2><p>Disqus 留言功能屬於第三方的功能，所以我們需要到 <a href=\"https://disqus.com/\">Disqus 官方</a> 註冊帳號，註冊期間會請你填入 shortname，請留意一下，shortname 設定後是無法再修改的</p>\n<p>註冊後再到 <code>./themes/next/_config.yml</code> 內 Disqus 的區塊去做設定，將 enable 參數值改成 true，shortname 的值改成 Disqus 當時申請時所填入的 shortname</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Disqus</span><br><span class=\"line\"># For more information: https:&#x2F;&#x2F;disqus.com</span><br><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  shortname: YOUR_SHORTNAME</span><br><span class=\"line\">  count: true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><p>因 Disqus 屬於第三方管理，所以相關後台設定需要到 Disqus 登入自己的帳號來調整，例如：留言通知、更改語言等等…</p>\n<p>這邊順便提一下，Disqus 預設不允許讀者在沒有登入 Disqus 的情況下進行留言，如果想要讓讀者可以在沒有登入 Disqus 的情況下留言，可以到 Disqus 的後台下述路徑去調整</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings → Admin → Edit Settings → 選擇要修改的部落格 → Coummunity → Moderation → Guest Commenting打勾</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>路徑的部分可能隨時間官方會有所調整，若有更動，可能需要稍微找一下</p>\n</blockquote>\n<p>雖然如此，但是讀者最少還是得留下「名字」跟「E-mail」才能進行留言，如圖</p>\n<p><img src=\"0.png\"></p>"},{"title":"Hexo建立草稿","date":"2021-05-03T02:26:06.000Z","_content":"\n## 前言\n\n使用 Hexo 來當作技術部落格不僅簡單且快速，在剛開始架設完成後，可以使用指令 `hexo new [title]` 來建立文章並且撰寫，但是這樣的方式會延伸一個問題，如果這篇文章還處理撰寫的階段，但是我有修改其他已完成的文章需要發佈出去，但是不想把未完成的文章也一起發佈，此時就會有一些困擾，此篇會來說明如果使用 Hexo 的草稿功能。\n\n<!--more-->\n\n## Hexo 草稿\n\n一般來說，我們建立文章都是使用此指令\n\n```\n$ hexo new [Title] [FileName]\n```\n\n如果今天要建立 Hexo 草稿，我們可以將上述指令改成\n\n```\n$ hexo new draft [Title] [FileName]\n```\n\n那此時產生出來的草稿會放在 `./source/_drafts`\n\n> 如果是使用 `hexo new [title]` 則會放在 `./source/_posts`\n\n當我們要發佈一篇文章時，我們會使用 `hexo g` 和 `hexo d` 來編譯產生靜態檔與發佈文章，而草稿目錄內的文章不會被發佈出去，是 **因為 `hexo g` 並不會編譯 `./source/_drafts` 底下的檔案**。\n\n如果放在草稿目錄底下的文章完成後，想在本機先預覽檢查時，可以使用此指令\n\n> 此處「文後討論」有補充說明\n\n```\n$ hexo s --draft\n```\n\n確認文章沒問題後，我們就可以將草稿 publish，使用此指令\n\n> 這邊的 publish 是將檔案從 _drafts 移動到 _posts\n\n```\n$ hexo publish [FileName]  # 這邊是接 FileName，不包含副檔名 .md\n```\n\n接下來就跟放在 _posts 底下的文章發佈沒有兩樣，先進行移除舊的靜態檔與快取\n\n```\n$ hexo cl\n```\n\n然後進行編譯的動作\n\n```\n$ hexo g\n```\n\n最後再發佈\n\n```\n$ hexo d\n```\n\n## 文後討論\n\n看完上述，你可能會想，那能不能讓 `hexo s` 自動將 _drafts 底下的檔案自動預覽出來，而不要在指令後面又多加一個參數 `--draft`?\n\n答案是 可以的!\n\n此時要去調整 `./_config.yml` 內的設定，將下面的參數值由 false 調整為 true 即可\n\n> 非 themes 底下的 _config.yml\n\n```\nrender_drafts: true\n```\n\n調整之後，以後要預覽 _drafts 內的文章，就跟一般放在 _posts 底下的一樣，只要使用 `hexo s` 通通都可以在本機預覽得到。\n\n## 參考資料\n\n- https://www.dazhuanlan.com/2019/11/02/5dbc7ecc737a5/\n","source":"_posts/Hexo建立草稿.md","raw":"---\ntitle: Hexo建立草稿\ntags:\n  - Hexo\n  - blog\ncategories:\n  - Hexo\ndate: 2021-05-03 10:26:06\n---\n\n## 前言\n\n使用 Hexo 來當作技術部落格不僅簡單且快速，在剛開始架設完成後，可以使用指令 `hexo new [title]` 來建立文章並且撰寫，但是這樣的方式會延伸一個問題，如果這篇文章還處理撰寫的階段，但是我有修改其他已完成的文章需要發佈出去，但是不想把未完成的文章也一起發佈，此時就會有一些困擾，此篇會來說明如果使用 Hexo 的草稿功能。\n\n<!--more-->\n\n## Hexo 草稿\n\n一般來說，我們建立文章都是使用此指令\n\n```\n$ hexo new [Title] [FileName]\n```\n\n如果今天要建立 Hexo 草稿，我們可以將上述指令改成\n\n```\n$ hexo new draft [Title] [FileName]\n```\n\n那此時產生出來的草稿會放在 `./source/_drafts`\n\n> 如果是使用 `hexo new [title]` 則會放在 `./source/_posts`\n\n當我們要發佈一篇文章時，我們會使用 `hexo g` 和 `hexo d` 來編譯產生靜態檔與發佈文章，而草稿目錄內的文章不會被發佈出去，是 **因為 `hexo g` 並不會編譯 `./source/_drafts` 底下的檔案**。\n\n如果放在草稿目錄底下的文章完成後，想在本機先預覽檢查時，可以使用此指令\n\n> 此處「文後討論」有補充說明\n\n```\n$ hexo s --draft\n```\n\n確認文章沒問題後，我們就可以將草稿 publish，使用此指令\n\n> 這邊的 publish 是將檔案從 _drafts 移動到 _posts\n\n```\n$ hexo publish [FileName]  # 這邊是接 FileName，不包含副檔名 .md\n```\n\n接下來就跟放在 _posts 底下的文章發佈沒有兩樣，先進行移除舊的靜態檔與快取\n\n```\n$ hexo cl\n```\n\n然後進行編譯的動作\n\n```\n$ hexo g\n```\n\n最後再發佈\n\n```\n$ hexo d\n```\n\n## 文後討論\n\n看完上述，你可能會想，那能不能讓 `hexo s` 自動將 _drafts 底下的檔案自動預覽出來，而不要在指令後面又多加一個參數 `--draft`?\n\n答案是 可以的!\n\n此時要去調整 `./_config.yml` 內的設定，將下面的參數值由 false 調整為 true 即可\n\n> 非 themes 底下的 _config.yml\n\n```\nrender_drafts: true\n```\n\n調整之後，以後要預覽 _drafts 內的文章，就跟一般放在 _posts 底下的一樣，只要使用 `hexo s` 通通都可以在本機預覽得到。\n\n## 參考資料\n\n- https://www.dazhuanlan.com/2019/11/02/5dbc7ecc737a5/\n","slug":"Hexo建立草稿","published":1,"updated":"2023-10-04T15:33:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcax000pmxv8972f4pa5","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用 Hexo 來當作技術部落格不僅簡單且快速，在剛開始架設完成後，可以使用指令 <code>hexo new [title]</code> 來建立文章並且撰寫，但是這樣的方式會延伸一個問題，如果這篇文章還處理撰寫的階段，但是我有修改其他已完成的文章需要發佈出去，但是不想把未完成的文章也一起發佈，此時就會有一些困擾，此篇會來說明如果使用 Hexo 的草稿功能。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Hexo-草稿\"><a href=\"#Hexo-草稿\" class=\"headerlink\" title=\"Hexo 草稿\"></a>Hexo 草稿</h2><p>一般來說，我們建立文章都是使用此指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [Title] [FileName]</span><br></pre></td></tr></table></figure>\n\n<p>如果今天要建立 Hexo 草稿，我們可以將上述指令改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new draft [Title] [FileName]</span><br></pre></td></tr></table></figure>\n\n<p>那此時產生出來的草稿會放在 <code>./source/_drafts</code></p>\n<blockquote>\n<p>如果是使用 <code>hexo new [title]</code> 則會放在 <code>./source/_posts</code></p>\n</blockquote>\n<p>當我們要發佈一篇文章時，我們會使用 <code>hexo g</code> 和 <code>hexo d</code> 來編譯產生靜態檔與發佈文章，而草稿目錄內的文章不會被發佈出去，是 <strong>因為 <code>hexo g</code> 並不會編譯 <code>./source/_drafts</code> 底下的檔案</strong>。</p>\n<p>如果放在草稿目錄底下的文章完成後，想在本機先預覽檢查時，可以使用此指令</p>\n<blockquote>\n<p>此處「文後討論」有補充說明</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s --draft</span><br></pre></td></tr></table></figure>\n\n<p>確認文章沒問題後，我們就可以將草稿 publish，使用此指令</p>\n<blockquote>\n<p>這邊的 publish 是將檔案從 _drafts 移動到 _posts</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [FileName]  # 這邊是接 FileName，不包含副檔名 .md</span><br></pre></td></tr></table></figure>\n\n<p>接下來就跟放在 _posts 底下的文章發佈沒有兩樣，先進行移除舊的靜態檔與快取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo cl</span><br></pre></td></tr></table></figure>\n\n<p>然後進行編譯的動作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n\n<p>最後再發佈</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><p>看完上述，你可能會想，那能不能讓 <code>hexo s</code> 自動將 _drafts 底下的檔案自動預覽出來，而不要在指令後面又多加一個參數 <code>--draft</code>?</p>\n<p>答案是 可以的!</p>\n<p>此時要去調整 <code>./_config.yml</code> 內的設定，將下面的參數值由 false 調整為 true 即可</p>\n<blockquote>\n<p>非 themes 底下的 _config.yml</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render_drafts: true</span><br></pre></td></tr></table></figure>\n\n<p>調整之後，以後要預覽 _drafts 內的文章，就跟一般放在 _posts 底下的一樣，只要使用 <code>hexo s</code> 通通都可以在本機預覽得到。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://www.dazhuanlan.com/2019/11/02/5dbc7ecc737a5/\">https://www.dazhuanlan.com/2019/11/02/5dbc7ecc737a5/</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用 Hexo 來當作技術部落格不僅簡單且快速，在剛開始架設完成後，可以使用指令 <code>hexo new [title]</code> 來建立文章並且撰寫，但是這樣的方式會延伸一個問題，如果這篇文章還處理撰寫的階段，但是我有修改其他已完成的文章需要發佈出去，但是不想把未完成的文章也一起發佈，此時就會有一些困擾，此篇會來說明如果使用 Hexo 的草稿功能。</p>","more":"<h2 id=\"Hexo-草稿\"><a href=\"#Hexo-草稿\" class=\"headerlink\" title=\"Hexo 草稿\"></a>Hexo 草稿</h2><p>一般來說，我們建立文章都是使用此指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [Title] [FileName]</span><br></pre></td></tr></table></figure>\n\n<p>如果今天要建立 Hexo 草稿，我們可以將上述指令改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new draft [Title] [FileName]</span><br></pre></td></tr></table></figure>\n\n<p>那此時產生出來的草稿會放在 <code>./source/_drafts</code></p>\n<blockquote>\n<p>如果是使用 <code>hexo new [title]</code> 則會放在 <code>./source/_posts</code></p>\n</blockquote>\n<p>當我們要發佈一篇文章時，我們會使用 <code>hexo g</code> 和 <code>hexo d</code> 來編譯產生靜態檔與發佈文章，而草稿目錄內的文章不會被發佈出去，是 <strong>因為 <code>hexo g</code> 並不會編譯 <code>./source/_drafts</code> 底下的檔案</strong>。</p>\n<p>如果放在草稿目錄底下的文章完成後，想在本機先預覽檢查時，可以使用此指令</p>\n<blockquote>\n<p>此處「文後討論」有補充說明</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s --draft</span><br></pre></td></tr></table></figure>\n\n<p>確認文章沒問題後，我們就可以將草稿 publish，使用此指令</p>\n<blockquote>\n<p>這邊的 publish 是將檔案從 _drafts 移動到 _posts</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [FileName]  # 這邊是接 FileName，不包含副檔名 .md</span><br></pre></td></tr></table></figure>\n\n<p>接下來就跟放在 _posts 底下的文章發佈沒有兩樣，先進行移除舊的靜態檔與快取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo cl</span><br></pre></td></tr></table></figure>\n\n<p>然後進行編譯的動作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n\n<p>最後再發佈</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><p>看完上述，你可能會想，那能不能讓 <code>hexo s</code> 自動將 _drafts 底下的檔案自動預覽出來，而不要在指令後面又多加一個參數 <code>--draft</code>?</p>\n<p>答案是 可以的!</p>\n<p>此時要去調整 <code>./_config.yml</code> 內的設定，將下面的參數值由 false 調整為 true 即可</p>\n<blockquote>\n<p>非 themes 底下的 _config.yml</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render_drafts: true</span><br></pre></td></tr></table></figure>\n\n<p>調整之後，以後要預覽 _drafts 內的文章，就跟一般放在 _posts 底下的一樣，只要使用 <code>hexo s</code> 通通都可以在本機預覽得到。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://www.dazhuanlan.com/2019/11/02/5dbc7ecc737a5/\">https://www.dazhuanlan.com/2019/11/02/5dbc7ecc737a5/</a></li>\n</ul>"},{"title":"Hexo文章插入圖片","date":"2021-07-20T04:21:06.000Z","_content":"\n## 前言\n\nHexo 中的文章是使用 Markdown 的語法，有時候文章中可能會需要一些圖片來予以輔助，這時候我們可能會需要調整一些設定來存放我們的圖片\n\n## 文章插入圖片\n\n這邊先講一下 Markdown 插入圖片的語法\n\n```\n![](圖片路徑)\n```\n\n<!--more-->\n\n再來我們可以更改 Hexo 的設定檔，來讓我們建立文章時，能夠自動將該文章存放圖片的目錄也一起建立起來，修改 `./_config.xml`，並將下面參數值調整為 true\n\n```\npost_asset_folder: true\n```\n\n調整後當我們使用 `hexo new \"新文章\"` 建立文章後，就會自動在 `./source/_posts` 建立一個與文章相同名稱的目錄，然後就能將圖片放進去\n\n而 Markdown 要調用圖片時，圖片路徑只需要填上圖片名稱即可，例如：圖片名稱為 123.png\n\n```\n![](123.png)\n```\n\n## 文後討論\n\n上述方式對於每篇文章都需要插入圖片的使用者非常方便，但是如果你的文章只有少數幾篇需要圖片輔助的話，可能會造成 `./source/_posts` 會有很多空的目錄，所以如果只有少數幾篇需要使用到圖片的話，這邊給兩個建議：\n1. 設定自動建立圖片存放目錄，然後自己手動將無需使用到圖片的文章的目錄刪除\n2. 乾脆不要設定，自己手動建立與文章相同名稱的目錄來存放圖片\n","source":"_posts/Hexo文章插入圖片.md","raw":"---\ntitle: Hexo文章插入圖片\ntags:\n  - Hexo\n  - blog\ncategories:\n  - Hexo\ndate: 2021-07-20 12:21:06\n---\n\n## 前言\n\nHexo 中的文章是使用 Markdown 的語法，有時候文章中可能會需要一些圖片來予以輔助，這時候我們可能會需要調整一些設定來存放我們的圖片\n\n## 文章插入圖片\n\n這邊先講一下 Markdown 插入圖片的語法\n\n```\n![](圖片路徑)\n```\n\n<!--more-->\n\n再來我們可以更改 Hexo 的設定檔，來讓我們建立文章時，能夠自動將該文章存放圖片的目錄也一起建立起來，修改 `./_config.xml`，並將下面參數值調整為 true\n\n```\npost_asset_folder: true\n```\n\n調整後當我們使用 `hexo new \"新文章\"` 建立文章後，就會自動在 `./source/_posts` 建立一個與文章相同名稱的目錄，然後就能將圖片放進去\n\n而 Markdown 要調用圖片時，圖片路徑只需要填上圖片名稱即可，例如：圖片名稱為 123.png\n\n```\n![](123.png)\n```\n\n## 文後討論\n\n上述方式對於每篇文章都需要插入圖片的使用者非常方便，但是如果你的文章只有少數幾篇需要圖片輔助的話，可能會造成 `./source/_posts` 會有很多空的目錄，所以如果只有少數幾篇需要使用到圖片的話，這邊給兩個建議：\n1. 設定自動建立圖片存放目錄，然後自己手動將無需使用到圖片的文章的目錄刪除\n2. 乾脆不要設定，自己手動建立與文章相同名稱的目錄來存放圖片\n","slug":"Hexo文章插入圖片","published":1,"updated":"2023-10-04T15:33:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcay000rmxv86bxrf63v","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Hexo 中的文章是使用 Markdown 的語法，有時候文章中可能會需要一些圖片來予以輔助，這時候我們可能會需要調整一些設定來存放我們的圖片</p>\n<h2 id=\"文章插入圖片\"><a href=\"#文章插入圖片\" class=\"headerlink\" title=\"文章插入圖片\"></a>文章插入圖片</h2><p>這邊先講一下 Markdown 插入圖片的語法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](圖片路徑)</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>再來我們可以更改 Hexo 的設定檔，來讓我們建立文章時，能夠自動將該文章存放圖片的目錄也一起建立起來，修改 <code>./_config.xml</code>，並將下面參數值調整為 true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure>\n\n<p>調整後當我們使用 <code>hexo new &quot;新文章&quot;</code> 建立文章後，就會自動在 <code>./source/_posts</code> 建立一個與文章相同名稱的目錄，然後就能將圖片放進去</p>\n<p>而 Markdown 要調用圖片時，圖片路徑只需要填上圖片名稱即可，例如：圖片名稱為 123.png</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](123.png)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><p>上述方式對於每篇文章都需要插入圖片的使用者非常方便，但是如果你的文章只有少數幾篇需要圖片輔助的話，可能會造成 <code>./source/_posts</code> 會有很多空的目錄，所以如果只有少數幾篇需要使用到圖片的話，這邊給兩個建議：</p>\n<ol>\n<li>設定自動建立圖片存放目錄，然後自己手動將無需使用到圖片的文章的目錄刪除</li>\n<li>乾脆不要設定，自己手動建立與文章相同名稱的目錄來存放圖片</li>\n</ol>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Hexo 中的文章是使用 Markdown 的語法，有時候文章中可能會需要一些圖片來予以輔助，這時候我們可能會需要調整一些設定來存放我們的圖片</p>\n<h2 id=\"文章插入圖片\"><a href=\"#文章插入圖片\" class=\"headerlink\" title=\"文章插入圖片\"></a>文章插入圖片</h2><p>這邊先講一下 Markdown 插入圖片的語法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](圖片路徑)</span><br></pre></td></tr></table></figure>","more":"<p>再來我們可以更改 Hexo 的設定檔，來讓我們建立文章時，能夠自動將該文章存放圖片的目錄也一起建立起來，修改 <code>./_config.xml</code>，並將下面參數值調整為 true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure>\n\n<p>調整後當我們使用 <code>hexo new &quot;新文章&quot;</code> 建立文章後，就會自動在 <code>./source/_posts</code> 建立一個與文章相同名稱的目錄，然後就能將圖片放進去</p>\n<p>而 Markdown 要調用圖片時，圖片路徑只需要填上圖片名稱即可，例如：圖片名稱為 123.png</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](123.png)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><p>上述方式對於每篇文章都需要插入圖片的使用者非常方便，但是如果你的文章只有少數幾篇需要圖片輔助的話，可能會造成 <code>./source/_posts</code> 會有很多空的目錄，所以如果只有少數幾篇需要使用到圖片的話，這邊給兩個建議：</p>\n<ol>\n<li>設定自動建立圖片存放目錄，然後自己手動將無需使用到圖片的文章的目錄刪除</li>\n<li>乾脆不要設定，自己手動建立與文章相同名稱的目錄來存放圖片</li>\n</ol>"},{"title":"Hexo的標籤功能","date":"2021-07-21T03:32:57.000Z","_content":"\n## 前言\n\nHexo 網站中的文章可以使用標籤(tags)，標籤有點像是關鍵字的作用，可以替每篇不同的文章給予不同的標籤，這可以讓讀者針對標籤來快速篩選文章\n\n<!--more-->\n\n## 標籤的啟用/使用\n\n啟用標籤功能，讓標籤連結出現在網站上，首先調整 `./themes/next/_config.yml` 中的下述設定，將 `tags: /tags/ || fa fa-tags` 註解「取消」，這樣就可以讓網站出現標籤的連結\n\n```\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n只有連結並沒有用處，點擊標籤連結時，要能夠顯示相關頁面，所以使用下述指令，讓 Hexo 幫你產生連結檔\n\n```\n$ hexo new page tags\n```\n\nHexo 會在 `./source` 底下產生 tags 目錄，目錄內會有一個 index.md 檔案\n\ntags 頁面建立後，還需將 index.md 檔案打開，並且加入 type 參數，如下\n\n```\n---\ntitle: tags\ndate: 2021-04-20 15:37:19\ntype: \"tags\"\n---\n```\n\n這樣基本上標籤功能就已經完成設定\n\n在使用時，只要在文章建立後加上 tags，並把要標籤的值加上去即可，如下\n\n```\n---\ntitle: 標籤測試\ntags:\n  - TEST\n  - TAG\ndate: 2021-05-22 16:17:39\n---\n```\n\n## 後記\n\n該篇與 Hexo的分類/關於功能 設定方式極度雷同，如有需要可以搭配一起設定，另外兩篇請參考下面連結\n\n- [Hexo的分類功能](https://blog.tonyjhang.tk/2021/07/23/Hexo%E7%9A%84%E5%88%86%E9%A1%9E%E5%8A%9F%E8%83%BD/)\n- [Hexo的關於功能](https://blog.tonyjhang.tk/2021/07/26/Hexo%E7%9A%84%E9%97%9C%E6%96%BC%E5%8A%9F%E8%83%BD/)\n","source":"_posts/Hexo標籤的使用.md","raw":"---\ntitle: Hexo的標籤功能\ntags:\n  - Hexo\n  - blog\ncategories:\n  - Hexo\ndate: 2021-07-21 11:32:57\n---\n\n## 前言\n\nHexo 網站中的文章可以使用標籤(tags)，標籤有點像是關鍵字的作用，可以替每篇不同的文章給予不同的標籤，這可以讓讀者針對標籤來快速篩選文章\n\n<!--more-->\n\n## 標籤的啟用/使用\n\n啟用標籤功能，讓標籤連結出現在網站上，首先調整 `./themes/next/_config.yml` 中的下述設定，將 `tags: /tags/ || fa fa-tags` 註解「取消」，這樣就可以讓網站出現標籤的連結\n\n```\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n只有連結並沒有用處，點擊標籤連結時，要能夠顯示相關頁面，所以使用下述指令，讓 Hexo 幫你產生連結檔\n\n```\n$ hexo new page tags\n```\n\nHexo 會在 `./source` 底下產生 tags 目錄，目錄內會有一個 index.md 檔案\n\ntags 頁面建立後，還需將 index.md 檔案打開，並且加入 type 參數，如下\n\n```\n---\ntitle: tags\ndate: 2021-04-20 15:37:19\ntype: \"tags\"\n---\n```\n\n這樣基本上標籤功能就已經完成設定\n\n在使用時，只要在文章建立後加上 tags，並把要標籤的值加上去即可，如下\n\n```\n---\ntitle: 標籤測試\ntags:\n  - TEST\n  - TAG\ndate: 2021-05-22 16:17:39\n---\n```\n\n## 後記\n\n該篇與 Hexo的分類/關於功能 設定方式極度雷同，如有需要可以搭配一起設定，另外兩篇請參考下面連結\n\n- [Hexo的分類功能](https://blog.tonyjhang.tk/2021/07/23/Hexo%E7%9A%84%E5%88%86%E9%A1%9E%E5%8A%9F%E8%83%BD/)\n- [Hexo的關於功能](https://blog.tonyjhang.tk/2021/07/26/Hexo%E7%9A%84%E9%97%9C%E6%96%BC%E5%8A%9F%E8%83%BD/)\n","slug":"Hexo標籤的使用","published":1,"updated":"2023-10-04T15:33:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcaz000umxv8h0010n7k","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Hexo 網站中的文章可以使用標籤(tags)，標籤有點像是關鍵字的作用，可以替每篇不同的文章給予不同的標籤，這可以讓讀者針對標籤來快速篩選文章</p>\n<span id=\"more\"></span>\n\n<h2 id=\"標籤的啟用-使用\"><a href=\"#標籤的啟用-使用\" class=\"headerlink\" title=\"標籤的啟用/使用\"></a>標籤的啟用/使用</h2><p>啟用標籤功能，讓標籤連結出現在網站上，首先調整 <code>./themes/next/_config.yml</code> 中的下述設定，將 <code>tags: /tags/ || fa fa-tags</code> 註解「取消」，這樣就可以讓網站出現標籤的連結</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: &#x2F; || fa fa-home</span><br><span class=\"line\">  about: &#x2F;about&#x2F; || fa fa-user</span><br><span class=\"line\">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class=\"line\">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class=\"line\">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class=\"line\">  #schedule: &#x2F;schedule&#x2F; || fa fa-calendar</span><br><span class=\"line\">  #sitemap: &#x2F;sitemap.xml || fa fa-sitemap</span><br><span class=\"line\">  #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat</span><br></pre></td></tr></table></figure>\n\n<p>只有連結並沒有用處，點擊標籤連結時，要能夠顯示相關頁面，所以使用下述指令，讓 Hexo 幫你產生連結檔</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>Hexo 會在 <code>./source</code> 底下產生 tags 目錄，目錄內會有一個 index.md 檔案</p>\n<p>tags 頁面建立後，還需將 index.md 檔案打開，並且加入 type 參數，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2021-04-20 15:37:19</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>這樣基本上標籤功能就已經完成設定</p>\n<p>在使用時，只要在文章建立後加上 tags，並把要標籤的值加上去即可，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 標籤測試</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - TEST</span><br><span class=\"line\">  - TAG</span><br><span class=\"line\">date: 2021-05-22 16:17:39</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>該篇與 Hexo的分類/關於功能 設定方式極度雷同，如有需要可以搭配一起設定，另外兩篇請參考下面連結</p>\n<ul>\n<li><a href=\"https://blog.tonyjhang.tk/2021/07/23/Hexo%E7%9A%84%E5%88%86%E9%A1%9E%E5%8A%9F%E8%83%BD/\">Hexo的分類功能</a></li>\n<li><a href=\"https://blog.tonyjhang.tk/2021/07/26/Hexo%E7%9A%84%E9%97%9C%E6%96%BC%E5%8A%9F%E8%83%BD/\">Hexo的關於功能</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Hexo 網站中的文章可以使用標籤(tags)，標籤有點像是關鍵字的作用，可以替每篇不同的文章給予不同的標籤，這可以讓讀者針對標籤來快速篩選文章</p>","more":"<h2 id=\"標籤的啟用-使用\"><a href=\"#標籤的啟用-使用\" class=\"headerlink\" title=\"標籤的啟用/使用\"></a>標籤的啟用/使用</h2><p>啟用標籤功能，讓標籤連結出現在網站上，首先調整 <code>./themes/next/_config.yml</code> 中的下述設定，將 <code>tags: /tags/ || fa fa-tags</code> 註解「取消」，這樣就可以讓網站出現標籤的連結</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: &#x2F; || fa fa-home</span><br><span class=\"line\">  about: &#x2F;about&#x2F; || fa fa-user</span><br><span class=\"line\">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class=\"line\">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class=\"line\">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class=\"line\">  #schedule: &#x2F;schedule&#x2F; || fa fa-calendar</span><br><span class=\"line\">  #sitemap: &#x2F;sitemap.xml || fa fa-sitemap</span><br><span class=\"line\">  #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat</span><br></pre></td></tr></table></figure>\n\n<p>只有連結並沒有用處，點擊標籤連結時，要能夠顯示相關頁面，所以使用下述指令，讓 Hexo 幫你產生連結檔</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>Hexo 會在 <code>./source</code> 底下產生 tags 目錄，目錄內會有一個 index.md 檔案</p>\n<p>tags 頁面建立後，還需將 index.md 檔案打開，並且加入 type 參數，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2021-04-20 15:37:19</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>這樣基本上標籤功能就已經完成設定</p>\n<p>在使用時，只要在文章建立後加上 tags，並把要標籤的值加上去即可，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 標籤測試</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - TEST</span><br><span class=\"line\">  - TAG</span><br><span class=\"line\">date: 2021-05-22 16:17:39</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>該篇與 Hexo的分類/關於功能 設定方式極度雷同，如有需要可以搭配一起設定，另外兩篇請參考下面連結</p>\n<ul>\n<li><a href=\"https://blog.tonyjhang.tk/2021/07/23/Hexo%E7%9A%84%E5%88%86%E9%A1%9E%E5%8A%9F%E8%83%BD/\">Hexo的分類功能</a></li>\n<li><a href=\"https://blog.tonyjhang.tk/2021/07/26/Hexo%E7%9A%84%E9%97%9C%E6%96%BC%E5%8A%9F%E8%83%BD/\">Hexo的關於功能</a></li>\n</ul>"},{"title":"Hexo的分類功能","date":"2021-07-23T02:26:06.000Z","_content":"\n## 前言\n\nHexo 的分類功能其實跟資料夾的功能差不多，作者可以自行將文章做分類，讓讀者在找尋時可以依據分類來快速找到相關的文章，功能上與標籤(tags) 有點大同小異\n\n<!--more-->\n\n## 分類的啟用/使用\n\n啟用分類功能，讓分類連結出現在網站上，首先調整 `./themes/next/_config.yml` 中的下述設定，將 `categories: /categories/ || fa fa-th` 註解「取消」，這樣就可以讓網站出現分類的連結\n\n```\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n只有連結並沒有用處，點擊分類連結時，要能夠顯示相關頁面，所以使用下述指令，讓 Hexo 幫你產生連結檔\n\n```\n$ hexo new page categories\n```\n\nHexo 會在 `./source` 底下產生 categories 目錄，目錄內會有一個 index.md 檔案\n\ncategories 頁面建立後，還需將 index.md 檔案打開，並且加入 type 參數，如下\n\n```\n---\ntitle: categories\ndate: 2021-04-20 15:37:19\ntype: \"categories\"\n---\n```\n\n這樣基本上分類功能就已經完成設定\n\n在使用時，只要在文章建立後加上 categories，並把要分類的值加上去即可，如下\n\n```\n---\ntitle: 分類測試\ndate: 2021-05-22 16:17:39\ncategories:\n  - Hexo\n---\n```\n\n這樣該篇文章就會被納入 Hexo 這個分類底下\n\n## 文後討論\n\n如果文章內的 categories 設定如下\n\n```\n---\ntitle: 分類測試\ndate: 2021-05-22 16:17:39\ncategories:\n  - Hexo\n  - NexT\n---\n```\n\n此時該文章將被分類到 Hexo 中的 NexT 底下，如：Hexo/NexT/分類測試\n\n## 後記\n\n該篇與 Hexo的標籤/關於功能 設定方式極度雷同，如有需要可以搭配一起設定，另外兩篇請參考下面連結\n\n- [Hexo的標籤功能](https://blog.tonyjhang.tk/2021/07/21/Hexo%E6%A8%99%E7%B1%A4%E7%9A%84%E4%BD%BF%E7%94%A8/)\n- [Hexo的關於功能](https://blog.tonyjhang.tk/2021/07/26/Hexo%E7%9A%84%E9%97%9C%E6%96%BC%E5%8A%9F%E8%83%BD/)\n","source":"_posts/Hexo的分類功能.md","raw":"---\ntitle: Hexo的分類功能\ntags:\n  - Hexo\n  - blog\ncategories:\n  - Hexo\ndate: 2021-07-23 10:26:06\n---\n\n## 前言\n\nHexo 的分類功能其實跟資料夾的功能差不多，作者可以自行將文章做分類，讓讀者在找尋時可以依據分類來快速找到相關的文章，功能上與標籤(tags) 有點大同小異\n\n<!--more-->\n\n## 分類的啟用/使用\n\n啟用分類功能，讓分類連結出現在網站上，首先調整 `./themes/next/_config.yml` 中的下述設定，將 `categories: /categories/ || fa fa-th` 註解「取消」，這樣就可以讓網站出現分類的連結\n\n```\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n只有連結並沒有用處，點擊分類連結時，要能夠顯示相關頁面，所以使用下述指令，讓 Hexo 幫你產生連結檔\n\n```\n$ hexo new page categories\n```\n\nHexo 會在 `./source` 底下產生 categories 目錄，目錄內會有一個 index.md 檔案\n\ncategories 頁面建立後，還需將 index.md 檔案打開，並且加入 type 參數，如下\n\n```\n---\ntitle: categories\ndate: 2021-04-20 15:37:19\ntype: \"categories\"\n---\n```\n\n這樣基本上分類功能就已經完成設定\n\n在使用時，只要在文章建立後加上 categories，並把要分類的值加上去即可，如下\n\n```\n---\ntitle: 分類測試\ndate: 2021-05-22 16:17:39\ncategories:\n  - Hexo\n---\n```\n\n這樣該篇文章就會被納入 Hexo 這個分類底下\n\n## 文後討論\n\n如果文章內的 categories 設定如下\n\n```\n---\ntitle: 分類測試\ndate: 2021-05-22 16:17:39\ncategories:\n  - Hexo\n  - NexT\n---\n```\n\n此時該文章將被分類到 Hexo 中的 NexT 底下，如：Hexo/NexT/分類測試\n\n## 後記\n\n該篇與 Hexo的標籤/關於功能 設定方式極度雷同，如有需要可以搭配一起設定，另外兩篇請參考下面連結\n\n- [Hexo的標籤功能](https://blog.tonyjhang.tk/2021/07/21/Hexo%E6%A8%99%E7%B1%A4%E7%9A%84%E4%BD%BF%E7%94%A8/)\n- [Hexo的關於功能](https://blog.tonyjhang.tk/2021/07/26/Hexo%E7%9A%84%E9%97%9C%E6%96%BC%E5%8A%9F%E8%83%BD/)\n","slug":"Hexo的分類功能","published":1,"updated":"2023-10-04T15:33:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcb0000xmxv8fejp4rvy","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Hexo 的分類功能其實跟資料夾的功能差不多，作者可以自行將文章做分類，讓讀者在找尋時可以依據分類來快速找到相關的文章，功能上與標籤(tags) 有點大同小異</p>\n<span id=\"more\"></span>\n\n<h2 id=\"分類的啟用-使用\"><a href=\"#分類的啟用-使用\" class=\"headerlink\" title=\"分類的啟用/使用\"></a>分類的啟用/使用</h2><p>啟用分類功能，讓分類連結出現在網站上，首先調整 <code>./themes/next/_config.yml</code> 中的下述設定，將 <code>categories: /categories/ || fa fa-th</code> 註解「取消」，這樣就可以讓網站出現分類的連結</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: &#x2F; || fa fa-home</span><br><span class=\"line\">  about: &#x2F;about&#x2F; || fa fa-user</span><br><span class=\"line\">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class=\"line\">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class=\"line\">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class=\"line\">  #schedule: &#x2F;schedule&#x2F; || fa fa-calendar</span><br><span class=\"line\">  #sitemap: &#x2F;sitemap.xml || fa fa-sitemap</span><br><span class=\"line\">  #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat</span><br></pre></td></tr></table></figure>\n\n<p>只有連結並沒有用處，點擊分類連結時，要能夠顯示相關頁面，所以使用下述指令，讓 Hexo 幫你產生連結檔</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>Hexo 會在 <code>./source</code> 底下產生 categories 目錄，目錄內會有一個 index.md 檔案</p>\n<p>categories 頁面建立後，還需將 index.md 檔案打開，並且加入 type 參數，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2021-04-20 15:37:19</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>這樣基本上分類功能就已經完成設定</p>\n<p>在使用時，只要在文章建立後加上 categories，並把要分類的值加上去即可，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分類測試</span><br><span class=\"line\">date: 2021-05-22 16:17:39</span><br><span class=\"line\">categories:</span><br><span class=\"line\">  - Hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>這樣該篇文章就會被納入 Hexo 這個分類底下</p>\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><p>如果文章內的 categories 設定如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分類測試</span><br><span class=\"line\">date: 2021-05-22 16:17:39</span><br><span class=\"line\">categories:</span><br><span class=\"line\">  - Hexo</span><br><span class=\"line\">  - NexT</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>此時該文章將被分類到 Hexo 中的 NexT 底下，如：Hexo/NexT/分類測試</p>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>該篇與 Hexo的標籤/關於功能 設定方式極度雷同，如有需要可以搭配一起設定，另外兩篇請參考下面連結</p>\n<ul>\n<li><a href=\"https://blog.tonyjhang.tk/2021/07/21/Hexo%E6%A8%99%E7%B1%A4%E7%9A%84%E4%BD%BF%E7%94%A8/\">Hexo的標籤功能</a></li>\n<li><a href=\"https://blog.tonyjhang.tk/2021/07/26/Hexo%E7%9A%84%E9%97%9C%E6%96%BC%E5%8A%9F%E8%83%BD/\">Hexo的關於功能</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Hexo 的分類功能其實跟資料夾的功能差不多，作者可以自行將文章做分類，讓讀者在找尋時可以依據分類來快速找到相關的文章，功能上與標籤(tags) 有點大同小異</p>","more":"<h2 id=\"分類的啟用-使用\"><a href=\"#分類的啟用-使用\" class=\"headerlink\" title=\"分類的啟用/使用\"></a>分類的啟用/使用</h2><p>啟用分類功能，讓分類連結出現在網站上，首先調整 <code>./themes/next/_config.yml</code> 中的下述設定，將 <code>categories: /categories/ || fa fa-th</code> 註解「取消」，這樣就可以讓網站出現分類的連結</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: &#x2F; || fa fa-home</span><br><span class=\"line\">  about: &#x2F;about&#x2F; || fa fa-user</span><br><span class=\"line\">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class=\"line\">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class=\"line\">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class=\"line\">  #schedule: &#x2F;schedule&#x2F; || fa fa-calendar</span><br><span class=\"line\">  #sitemap: &#x2F;sitemap.xml || fa fa-sitemap</span><br><span class=\"line\">  #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat</span><br></pre></td></tr></table></figure>\n\n<p>只有連結並沒有用處，點擊分類連結時，要能夠顯示相關頁面，所以使用下述指令，讓 Hexo 幫你產生連結檔</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>Hexo 會在 <code>./source</code> 底下產生 categories 目錄，目錄內會有一個 index.md 檔案</p>\n<p>categories 頁面建立後，還需將 index.md 檔案打開，並且加入 type 參數，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2021-04-20 15:37:19</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>這樣基本上分類功能就已經完成設定</p>\n<p>在使用時，只要在文章建立後加上 categories，並把要分類的值加上去即可，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分類測試</span><br><span class=\"line\">date: 2021-05-22 16:17:39</span><br><span class=\"line\">categories:</span><br><span class=\"line\">  - Hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>這樣該篇文章就會被納入 Hexo 這個分類底下</p>\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><p>如果文章內的 categories 設定如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分類測試</span><br><span class=\"line\">date: 2021-05-22 16:17:39</span><br><span class=\"line\">categories:</span><br><span class=\"line\">  - Hexo</span><br><span class=\"line\">  - NexT</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>此時該文章將被分類到 Hexo 中的 NexT 底下，如：Hexo/NexT/分類測試</p>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>該篇與 Hexo的標籤/關於功能 設定方式極度雷同，如有需要可以搭配一起設定，另外兩篇請參考下面連結</p>\n<ul>\n<li><a href=\"https://blog.tonyjhang.tk/2021/07/21/Hexo%E6%A8%99%E7%B1%A4%E7%9A%84%E4%BD%BF%E7%94%A8/\">Hexo的標籤功能</a></li>\n<li><a href=\"https://blog.tonyjhang.tk/2021/07/26/Hexo%E7%9A%84%E9%97%9C%E6%96%BC%E5%8A%9F%E8%83%BD/\">Hexo的關於功能</a></li>\n</ul>"},{"title":"PHP-FPM行程優化","date":"2021-04-29T09:21:21.000Z","_content":"\n## 前言\n\n近期公司內部 PHP-FPM 有頂到一些行程相關的上限，導致網頁要處理後端程式時無法處理，進而造成服務異常。 而這樣子的問題不外乎可以從 LOG 去看到一些觸發到這個問題的根本原因是什麼。\n\n以下列了兩個行程不夠時常見的 Error Log\n\n```\nWARNING: [pool www] server reached pm.max_children setting (5), consider raising it\n```\n\n```\nWARNING: [pool www] seems busy (you may need to increase pm.start_servers, or pm.min/max_spare_servers), spawning 32 children, there are 0 idle, and 19 total child\n```\n\n<!--more-->\n\nPHP-FPM 行程優化相關參數，以下為預設值，需要依照每台機器狀態不同去調教\n\n```\npm = dynamic\npm.max_children = 5\npm.start_servers = 2\npm.min_spare_servers = 1\npm.max_spare_servers = 3\n\npm.max_requests = 500\npm.process_idle_timeout = 10s # 需搭配 pm = ondemand\n```\n\n以下會針對每個項目去解釋其用途\n\n## pm (Process Manager)\n\npm 為行程管理(Process Manager) 的縮寫，此參數主要是在設定 pm 要使用哪種模式來管理行程，可以區分兩大類型，共三種模式可以選擇，預設是使用 dynamic\n\n### 固定行程數量\n- static: 設定此模式，只有 `pm.max_children` 參數會生效，行程數量則根據 `pm.max_children`，效能較好，因為 child process 會保持一個固定的數量，但是比較佔記憶體，因為即便請求較少量時，依然會佔用，所以較不建議使用此模式\n\n### 動態行程數量\n\n皆根據 `pm.max_children`、`pm.start_servers`、`pm.min_spare_servers`、`pm.max_spare_servers` 動態調整\n\n- dynamic: 根據使用量用多寡開行程，但當使用量比較低時，會保留固定行程(根據 `pm.min_spare_servers` 或 `pm.max_spare_servers`)，隨時等著接收新的連線\n- ondemand: 用多少量就開多少行程\n\n#### dynamic 實際運作\n\n當我們設定 `pm = dynamic` 並啟動時，首先會產生一定數量的行程(根據 `pm.start_servers`)，此參數可以想像成是最小數量的子程序，而最大數量的子程序則根據 `pm.max_children`，有了最大和最小子程序數量，也就是說服務過程中子程序數量會在最大和最小子程序數量間變化。\n\n而閒置的子程序數量則由 `pm.min_spare_servers`、`pm.max_spare_servers` 控制，超過 `pm.max_spare_servers` 的閒置子程序則會被 Kill。\n\n因為 dynamic 模式可以針對伺服器的回應做最大的優化，但相反的代價是可能造成更多記憶體的佔用，這邊舉例來說，假設 `pm.max_spare_servers = 10`、`pm.max_children = 20`，在某個尖峰時段，這時候最大數量的子程序 20 個都處於忙碌狀態，0個閒置的子程序，過了尖峰時段，請求下降，而當初忙碌的 20 個子程序目前處於閒置狀態，此時 PHP-FPM 只會 Kill 掉 10 個子程序，而最後剩下 10 個閒置的子程序來等待請求，這也就是會造成在尖峰後請求數大量減少後，記憶體卻沒有大量降低的主要原因，而如果把主機重啟，記憶體則會將得更低，這是因為重啟用子程序數量會變成最小閒置行程數量(`pm.min_spare_servers`)\n\n#### ondemand 實際運作\n\n`pm = ondemand` 的運作方式與 dynamic 恰好相反，dynamic 針對伺服器的回應做最大的優化，而 ondemand 則是最佳化記憶體。\n\n而運作方式是，每個閒置的子程序在持續閒置超過 `pm.process_idle_timeout` 設定的時間，就會被 Kill 掉，這樣的模式讓主機在尖峰時期過後可以自然地降低記憶體的使用率，如果長時間都沒有請求連線時，只會有一個 PHP-FPM 主程序。\n\n那壞處則是，如果遇到尖峰時期，或 `pm.process_idle_timeout` 設定得太短的話，會造成伺服器頻繁的建立子程序，而造成效能不佳\n\n## pm.max_children(最大行程數量)\n\n`pm.max_children` 參數在 `pm` 等於 `static` 即為開啟的行程數，而在 `dynamic` 與 `ondemand` 模式下，則是代表最大可開啟的行程數量。\n\n最大行程數量的多寡是根據本身主機的記憶體大小來決定，當記憶體越大時，就可以設定較多的行程數量。 此設定值如果設太小的話會造成處理請求的速度下降，設定太大的話會造成當機，因為記憶體耗盡，所以要依硬體資源來調較。\n\n可以利用以下指令去查詢行程使用的記憶體量\n\n```\n$ ps -ylC php-fpm --sort:rss\n\nS   UID     PID    PPID  C PRI  NI   RSS    SZ WCHAN  TTY          TIME CMD\nS     0       1       0  0  80   0  4760 20195 do_epo ?        00:02:11 php-fpm\nS    33       9       1  0  80   0 20260 22581 -      ?        00:01:20 php-fpm\nS    33       8       1  0  80   0 20464 22582 -      ?        00:01:42 php-fpm\nS    33       7       1  0  80   0 20476 22584 -      ?        00:01:43 php-fpm\n```\n\nRSS 欄位為子程序使用的記憶體大小，單位為KB，20476 約莫 20MB，但是因為每個子程序所使用的記憶體大小都不太一樣，所以我們可以使用下面的指令來求出子程序平均使用記憶體大小\n\n```\nps --no-headers -o \"rss,cmd\" -C php-fpm | awk '{ sum+=$1 } END { printf (\"%d%s\\n\", sum/NR/1024,\"Mb\") }'\n```\n\n至於 `pm.max_children` 應該要設定多少才合理，以下有一個計算公式\n\n```\npm.max_children = Total RAM / Max child process size\n```\n\n> 這邊的 Total RAM 需要扣除已經使用的記憶體，例如系統或其他程序使用後所剩餘的記憶體\n\n## pm.start_servers(初始行程數量)\n\n`pm.start_servers` 可設定 PHP-FPM 服務在一開始啟動時，要配置多少個行程\n\n`pm.start_servers` 同樣有一個計算公式可以參考\n\n```\npm.start_servers = min_spare_servers + (max_spare_servers - min_spare_servers) / 2\n```\n\n## pm.min_spare_servers(最小閒置行程數量)\n\n`pm.min_spare_servers` 設定 PHP-FPM 最小閒置行程的數量\n\n## pm.max_spare_servers(最大閒置行程數量)\n\n`pm.max_spare_servers` 設定 PHP-FPM 最大閒置行程的數量\n\n> 這邊需要注意的是 `pm.max_spare_servers` 的值只能小於等於 `pm.max_children`\n\n## pm.max_requests(單一行程可處理連線數)\n\n`pm.max_requests` 可設定單一 PHP-FPM 最多可以處理多少個連線，當一個行程處理的連線數達到設定值時，此行程會被 Kill 掉，而重新產生另一個新的行程\n\n## 參考資料\n\n- https://kejyuntw.gitbooks.io/ubuntu-learning-notes/content/web/php/web-php-max-children.html\n- https://support.plesk.com/hc/en-us/articles/360011988053-How-to-calculate-pm-max-children-value-\n- https://www.mdeditor.tw/pl/p9Vf/zh-tw\n","source":"_posts/PHP-FPM行程優化.md","raw":"---\ntitle: PHP-FPM行程優化\ndate: 2021-04-29 17:21:21\ntags:\n  - PHP-FPM\n  - PHP\ncategories:\n  - PHP-FPM\n---\n\n## 前言\n\n近期公司內部 PHP-FPM 有頂到一些行程相關的上限，導致網頁要處理後端程式時無法處理，進而造成服務異常。 而這樣子的問題不外乎可以從 LOG 去看到一些觸發到這個問題的根本原因是什麼。\n\n以下列了兩個行程不夠時常見的 Error Log\n\n```\nWARNING: [pool www] server reached pm.max_children setting (5), consider raising it\n```\n\n```\nWARNING: [pool www] seems busy (you may need to increase pm.start_servers, or pm.min/max_spare_servers), spawning 32 children, there are 0 idle, and 19 total child\n```\n\n<!--more-->\n\nPHP-FPM 行程優化相關參數，以下為預設值，需要依照每台機器狀態不同去調教\n\n```\npm = dynamic\npm.max_children = 5\npm.start_servers = 2\npm.min_spare_servers = 1\npm.max_spare_servers = 3\n\npm.max_requests = 500\npm.process_idle_timeout = 10s # 需搭配 pm = ondemand\n```\n\n以下會針對每個項目去解釋其用途\n\n## pm (Process Manager)\n\npm 為行程管理(Process Manager) 的縮寫，此參數主要是在設定 pm 要使用哪種模式來管理行程，可以區分兩大類型，共三種模式可以選擇，預設是使用 dynamic\n\n### 固定行程數量\n- static: 設定此模式，只有 `pm.max_children` 參數會生效，行程數量則根據 `pm.max_children`，效能較好，因為 child process 會保持一個固定的數量，但是比較佔記憶體，因為即便請求較少量時，依然會佔用，所以較不建議使用此模式\n\n### 動態行程數量\n\n皆根據 `pm.max_children`、`pm.start_servers`、`pm.min_spare_servers`、`pm.max_spare_servers` 動態調整\n\n- dynamic: 根據使用量用多寡開行程，但當使用量比較低時，會保留固定行程(根據 `pm.min_spare_servers` 或 `pm.max_spare_servers`)，隨時等著接收新的連線\n- ondemand: 用多少量就開多少行程\n\n#### dynamic 實際運作\n\n當我們設定 `pm = dynamic` 並啟動時，首先會產生一定數量的行程(根據 `pm.start_servers`)，此參數可以想像成是最小數量的子程序，而最大數量的子程序則根據 `pm.max_children`，有了最大和最小子程序數量，也就是說服務過程中子程序數量會在最大和最小子程序數量間變化。\n\n而閒置的子程序數量則由 `pm.min_spare_servers`、`pm.max_spare_servers` 控制，超過 `pm.max_spare_servers` 的閒置子程序則會被 Kill。\n\n因為 dynamic 模式可以針對伺服器的回應做最大的優化，但相反的代價是可能造成更多記憶體的佔用，這邊舉例來說，假設 `pm.max_spare_servers = 10`、`pm.max_children = 20`，在某個尖峰時段，這時候最大數量的子程序 20 個都處於忙碌狀態，0個閒置的子程序，過了尖峰時段，請求下降，而當初忙碌的 20 個子程序目前處於閒置狀態，此時 PHP-FPM 只會 Kill 掉 10 個子程序，而最後剩下 10 個閒置的子程序來等待請求，這也就是會造成在尖峰後請求數大量減少後，記憶體卻沒有大量降低的主要原因，而如果把主機重啟，記憶體則會將得更低，這是因為重啟用子程序數量會變成最小閒置行程數量(`pm.min_spare_servers`)\n\n#### ondemand 實際運作\n\n`pm = ondemand` 的運作方式與 dynamic 恰好相反，dynamic 針對伺服器的回應做最大的優化，而 ondemand 則是最佳化記憶體。\n\n而運作方式是，每個閒置的子程序在持續閒置超過 `pm.process_idle_timeout` 設定的時間，就會被 Kill 掉，這樣的模式讓主機在尖峰時期過後可以自然地降低記憶體的使用率，如果長時間都沒有請求連線時，只會有一個 PHP-FPM 主程序。\n\n那壞處則是，如果遇到尖峰時期，或 `pm.process_idle_timeout` 設定得太短的話，會造成伺服器頻繁的建立子程序，而造成效能不佳\n\n## pm.max_children(最大行程數量)\n\n`pm.max_children` 參數在 `pm` 等於 `static` 即為開啟的行程數，而在 `dynamic` 與 `ondemand` 模式下，則是代表最大可開啟的行程數量。\n\n最大行程數量的多寡是根據本身主機的記憶體大小來決定，當記憶體越大時，就可以設定較多的行程數量。 此設定值如果設太小的話會造成處理請求的速度下降，設定太大的話會造成當機，因為記憶體耗盡，所以要依硬體資源來調較。\n\n可以利用以下指令去查詢行程使用的記憶體量\n\n```\n$ ps -ylC php-fpm --sort:rss\n\nS   UID     PID    PPID  C PRI  NI   RSS    SZ WCHAN  TTY          TIME CMD\nS     0       1       0  0  80   0  4760 20195 do_epo ?        00:02:11 php-fpm\nS    33       9       1  0  80   0 20260 22581 -      ?        00:01:20 php-fpm\nS    33       8       1  0  80   0 20464 22582 -      ?        00:01:42 php-fpm\nS    33       7       1  0  80   0 20476 22584 -      ?        00:01:43 php-fpm\n```\n\nRSS 欄位為子程序使用的記憶體大小，單位為KB，20476 約莫 20MB，但是因為每個子程序所使用的記憶體大小都不太一樣，所以我們可以使用下面的指令來求出子程序平均使用記憶體大小\n\n```\nps --no-headers -o \"rss,cmd\" -C php-fpm | awk '{ sum+=$1 } END { printf (\"%d%s\\n\", sum/NR/1024,\"Mb\") }'\n```\n\n至於 `pm.max_children` 應該要設定多少才合理，以下有一個計算公式\n\n```\npm.max_children = Total RAM / Max child process size\n```\n\n> 這邊的 Total RAM 需要扣除已經使用的記憶體，例如系統或其他程序使用後所剩餘的記憶體\n\n## pm.start_servers(初始行程數量)\n\n`pm.start_servers` 可設定 PHP-FPM 服務在一開始啟動時，要配置多少個行程\n\n`pm.start_servers` 同樣有一個計算公式可以參考\n\n```\npm.start_servers = min_spare_servers + (max_spare_servers - min_spare_servers) / 2\n```\n\n## pm.min_spare_servers(最小閒置行程數量)\n\n`pm.min_spare_servers` 設定 PHP-FPM 最小閒置行程的數量\n\n## pm.max_spare_servers(最大閒置行程數量)\n\n`pm.max_spare_servers` 設定 PHP-FPM 最大閒置行程的數量\n\n> 這邊需要注意的是 `pm.max_spare_servers` 的值只能小於等於 `pm.max_children`\n\n## pm.max_requests(單一行程可處理連線數)\n\n`pm.max_requests` 可設定單一 PHP-FPM 最多可以處理多少個連線，當一個行程處理的連線數達到設定值時，此行程會被 Kill 掉，而重新產生另一個新的行程\n\n## 參考資料\n\n- https://kejyuntw.gitbooks.io/ubuntu-learning-notes/content/web/php/web-php-max-children.html\n- https://support.plesk.com/hc/en-us/articles/360011988053-How-to-calculate-pm-max-children-value-\n- https://www.mdeditor.tw/pl/p9Vf/zh-tw\n","slug":"PHP-FPM行程優化","published":1,"updated":"2023-10-04T15:33:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcb1000zmxv85chm3bdg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>近期公司內部 PHP-FPM 有頂到一些行程相關的上限，導致網頁要處理後端程式時無法處理，進而造成服務異常。 而這樣子的問題不外乎可以從 LOG 去看到一些觸發到這個問題的根本原因是什麼。</p>\n<p>以下列了兩個行程不夠時常見的 Error Log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARNING: [pool www] server reached pm.max_children setting (5), consider raising it</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARNING: [pool www] seems busy (you may need to increase pm.start_servers, or pm.min&#x2F;max_spare_servers), spawning 32 children, there are 0 idle, and 19 total child</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>PHP-FPM 行程優化相關參數，以下為預設值，需要依照每台機器狀態不同去調教</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm &#x3D; dynamic</span><br><span class=\"line\">pm.max_children &#x3D; 5</span><br><span class=\"line\">pm.start_servers &#x3D; 2</span><br><span class=\"line\">pm.min_spare_servers &#x3D; 1</span><br><span class=\"line\">pm.max_spare_servers &#x3D; 3</span><br><span class=\"line\"></span><br><span class=\"line\">pm.max_requests &#x3D; 500</span><br><span class=\"line\">pm.process_idle_timeout &#x3D; 10s # 需搭配 pm &#x3D; ondemand</span><br></pre></td></tr></table></figure>\n\n<p>以下會針對每個項目去解釋其用途</p>\n<h2 id=\"pm-Process-Manager\"><a href=\"#pm-Process-Manager\" class=\"headerlink\" title=\"pm (Process Manager)\"></a>pm (Process Manager)</h2><p>pm 為行程管理(Process Manager) 的縮寫，此參數主要是在設定 pm 要使用哪種模式來管理行程，可以區分兩大類型，共三種模式可以選擇，預設是使用 dynamic</p>\n<h3 id=\"固定行程數量\"><a href=\"#固定行程數量\" class=\"headerlink\" title=\"固定行程數量\"></a>固定行程數量</h3><ul>\n<li>static: 設定此模式，只有 <code>pm.max_children</code> 參數會生效，行程數量則根據 <code>pm.max_children</code>，效能較好，因為 child process 會保持一個固定的數量，但是比較佔記憶體，因為即便請求較少量時，依然會佔用，所以較不建議使用此模式</li>\n</ul>\n<h3 id=\"動態行程數量\"><a href=\"#動態行程數量\" class=\"headerlink\" title=\"動態行程數量\"></a>動態行程數量</h3><p>皆根據 <code>pm.max_children</code>、<code>pm.start_servers</code>、<code>pm.min_spare_servers</code>、<code>pm.max_spare_servers</code> 動態調整</p>\n<ul>\n<li>dynamic: 根據使用量用多寡開行程，但當使用量比較低時，會保留固定行程(根據 <code>pm.min_spare_servers</code> 或 <code>pm.max_spare_servers</code>)，隨時等著接收新的連線</li>\n<li>ondemand: 用多少量就開多少行程</li>\n</ul>\n<h4 id=\"dynamic-實際運作\"><a href=\"#dynamic-實際運作\" class=\"headerlink\" title=\"dynamic 實際運作\"></a>dynamic 實際運作</h4><p>當我們設定 <code>pm = dynamic</code> 並啟動時，首先會產生一定數量的行程(根據 <code>pm.start_servers</code>)，此參數可以想像成是最小數量的子程序，而最大數量的子程序則根據 <code>pm.max_children</code>，有了最大和最小子程序數量，也就是說服務過程中子程序數量會在最大和最小子程序數量間變化。</p>\n<p>而閒置的子程序數量則由 <code>pm.min_spare_servers</code>、<code>pm.max_spare_servers</code> 控制，超過 <code>pm.max_spare_servers</code> 的閒置子程序則會被 Kill。</p>\n<p>因為 dynamic 模式可以針對伺服器的回應做最大的優化，但相反的代價是可能造成更多記憶體的佔用，這邊舉例來說，假設 <code>pm.max_spare_servers = 10</code>、<code>pm.max_children = 20</code>，在某個尖峰時段，這時候最大數量的子程序 20 個都處於忙碌狀態，0個閒置的子程序，過了尖峰時段，請求下降，而當初忙碌的 20 個子程序目前處於閒置狀態，此時 PHP-FPM 只會 Kill 掉 10 個子程序，而最後剩下 10 個閒置的子程序來等待請求，這也就是會造成在尖峰後請求數大量減少後，記憶體卻沒有大量降低的主要原因，而如果把主機重啟，記憶體則會將得更低，這是因為重啟用子程序數量會變成最小閒置行程數量(<code>pm.min_spare_servers</code>)</p>\n<h4 id=\"ondemand-實際運作\"><a href=\"#ondemand-實際運作\" class=\"headerlink\" title=\"ondemand 實際運作\"></a>ondemand 實際運作</h4><p><code>pm = ondemand</code> 的運作方式與 dynamic 恰好相反，dynamic 針對伺服器的回應做最大的優化，而 ondemand 則是最佳化記憶體。</p>\n<p>而運作方式是，每個閒置的子程序在持續閒置超過 <code>pm.process_idle_timeout</code> 設定的時間，就會被 Kill 掉，這樣的模式讓主機在尖峰時期過後可以自然地降低記憶體的使用率，如果長時間都沒有請求連線時，只會有一個 PHP-FPM 主程序。</p>\n<p>那壞處則是，如果遇到尖峰時期，或 <code>pm.process_idle_timeout</code> 設定得太短的話，會造成伺服器頻繁的建立子程序，而造成效能不佳</p>\n<h2 id=\"pm-max-children-最大行程數量\"><a href=\"#pm-max-children-最大行程數量\" class=\"headerlink\" title=\"pm.max_children(最大行程數量)\"></a>pm.max_children(最大行程數量)</h2><p><code>pm.max_children</code> 參數在 <code>pm</code> 等於 <code>static</code> 即為開啟的行程數，而在 <code>dynamic</code> 與 <code>ondemand</code> 模式下，則是代表最大可開啟的行程數量。</p>\n<p>最大行程數量的多寡是根據本身主機的記憶體大小來決定，當記憶體越大時，就可以設定較多的行程數量。 此設定值如果設太小的話會造成處理請求的速度下降，設定太大的話會造成當機，因為記憶體耗盡，所以要依硬體資源來調較。</p>\n<p>可以利用以下指令去查詢行程使用的記憶體量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps -ylC php-fpm --sort:rss</span><br><span class=\"line\"></span><br><span class=\"line\">S   UID     PID    PPID  C PRI  NI   RSS    SZ WCHAN  TTY          TIME CMD</span><br><span class=\"line\">S     0       1       0  0  80   0  4760 20195 do_epo ?        00:02:11 php-fpm</span><br><span class=\"line\">S    33       9       1  0  80   0 20260 22581 -      ?        00:01:20 php-fpm</span><br><span class=\"line\">S    33       8       1  0  80   0 20464 22582 -      ?        00:01:42 php-fpm</span><br><span class=\"line\">S    33       7       1  0  80   0 20476 22584 -      ?        00:01:43 php-fpm</span><br></pre></td></tr></table></figure>\n\n<p>RSS 欄位為子程序使用的記憶體大小，單位為KB，20476 約莫 20MB，但是因為每個子程序所使用的記憶體大小都不太一樣，所以我們可以使用下面的指令來求出子程序平均使用記憶體大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps --no-headers -o &quot;rss,cmd&quot; -C php-fpm | awk &#39;&#123; sum+&#x3D;$1 &#125; END &#123; printf (&quot;%d%s\\n&quot;, sum&#x2F;NR&#x2F;1024,&quot;Mb&quot;) &#125;&#39;</span><br></pre></td></tr></table></figure>\n\n<p>至於 <code>pm.max_children</code> 應該要設定多少才合理，以下有一個計算公式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.max_children &#x3D; Total RAM &#x2F; Max child process size</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>這邊的 Total RAM 需要扣除已經使用的記憶體，例如系統或其他程序使用後所剩餘的記憶體</p>\n</blockquote>\n<h2 id=\"pm-start-servers-初始行程數量\"><a href=\"#pm-start-servers-初始行程數量\" class=\"headerlink\" title=\"pm.start_servers(初始行程數量)\"></a>pm.start_servers(初始行程數量)</h2><p><code>pm.start_servers</code> 可設定 PHP-FPM 服務在一開始啟動時，要配置多少個行程</p>\n<p><code>pm.start_servers</code> 同樣有一個計算公式可以參考</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.start_servers &#x3D; min_spare_servers + (max_spare_servers - min_spare_servers) &#x2F; 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pm-min-spare-servers-最小閒置行程數量\"><a href=\"#pm-min-spare-servers-最小閒置行程數量\" class=\"headerlink\" title=\"pm.min_spare_servers(最小閒置行程數量)\"></a>pm.min_spare_servers(最小閒置行程數量)</h2><p><code>pm.min_spare_servers</code> 設定 PHP-FPM 最小閒置行程的數量</p>\n<h2 id=\"pm-max-spare-servers-最大閒置行程數量\"><a href=\"#pm-max-spare-servers-最大閒置行程數量\" class=\"headerlink\" title=\"pm.max_spare_servers(最大閒置行程數量)\"></a>pm.max_spare_servers(最大閒置行程數量)</h2><p><code>pm.max_spare_servers</code> 設定 PHP-FPM 最大閒置行程的數量</p>\n<blockquote>\n<p>這邊需要注意的是 <code>pm.max_spare_servers</code> 的值只能小於等於 <code>pm.max_children</code></p>\n</blockquote>\n<h2 id=\"pm-max-requests-單一行程可處理連線數\"><a href=\"#pm-max-requests-單一行程可處理連線數\" class=\"headerlink\" title=\"pm.max_requests(單一行程可處理連線數)\"></a>pm.max_requests(單一行程可處理連線數)</h2><p><code>pm.max_requests</code> 可設定單一 PHP-FPM 最多可以處理多少個連線，當一個行程處理的連線數達到設定值時，此行程會被 Kill 掉，而重新產生另一個新的行程</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://kejyuntw.gitbooks.io/ubuntu-learning-notes/content/web/php/web-php-max-children.html\">https://kejyuntw.gitbooks.io/ubuntu-learning-notes/content/web/php/web-php-max-children.html</a></li>\n<li><a href=\"https://support.plesk.com/hc/en-us/articles/360011988053-How-to-calculate-pm-max-children-value-\">https://support.plesk.com/hc/en-us/articles/360011988053-How-to-calculate-pm-max-children-value-</a></li>\n<li><a href=\"https://www.mdeditor.tw/pl/p9Vf/zh-tw\">https://www.mdeditor.tw/pl/p9Vf/zh-tw</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>近期公司內部 PHP-FPM 有頂到一些行程相關的上限，導致網頁要處理後端程式時無法處理，進而造成服務異常。 而這樣子的問題不外乎可以從 LOG 去看到一些觸發到這個問題的根本原因是什麼。</p>\n<p>以下列了兩個行程不夠時常見的 Error Log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARNING: [pool www] server reached pm.max_children setting (5), consider raising it</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARNING: [pool www] seems busy (you may need to increase pm.start_servers, or pm.min&#x2F;max_spare_servers), spawning 32 children, there are 0 idle, and 19 total child</span><br></pre></td></tr></table></figure>","more":"<p>PHP-FPM 行程優化相關參數，以下為預設值，需要依照每台機器狀態不同去調教</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm &#x3D; dynamic</span><br><span class=\"line\">pm.max_children &#x3D; 5</span><br><span class=\"line\">pm.start_servers &#x3D; 2</span><br><span class=\"line\">pm.min_spare_servers &#x3D; 1</span><br><span class=\"line\">pm.max_spare_servers &#x3D; 3</span><br><span class=\"line\"></span><br><span class=\"line\">pm.max_requests &#x3D; 500</span><br><span class=\"line\">pm.process_idle_timeout &#x3D; 10s # 需搭配 pm &#x3D; ondemand</span><br></pre></td></tr></table></figure>\n\n<p>以下會針對每個項目去解釋其用途</p>\n<h2 id=\"pm-Process-Manager\"><a href=\"#pm-Process-Manager\" class=\"headerlink\" title=\"pm (Process Manager)\"></a>pm (Process Manager)</h2><p>pm 為行程管理(Process Manager) 的縮寫，此參數主要是在設定 pm 要使用哪種模式來管理行程，可以區分兩大類型，共三種模式可以選擇，預設是使用 dynamic</p>\n<h3 id=\"固定行程數量\"><a href=\"#固定行程數量\" class=\"headerlink\" title=\"固定行程數量\"></a>固定行程數量</h3><ul>\n<li>static: 設定此模式，只有 <code>pm.max_children</code> 參數會生效，行程數量則根據 <code>pm.max_children</code>，效能較好，因為 child process 會保持一個固定的數量，但是比較佔記憶體，因為即便請求較少量時，依然會佔用，所以較不建議使用此模式</li>\n</ul>\n<h3 id=\"動態行程數量\"><a href=\"#動態行程數量\" class=\"headerlink\" title=\"動態行程數量\"></a>動態行程數量</h3><p>皆根據 <code>pm.max_children</code>、<code>pm.start_servers</code>、<code>pm.min_spare_servers</code>、<code>pm.max_spare_servers</code> 動態調整</p>\n<ul>\n<li>dynamic: 根據使用量用多寡開行程，但當使用量比較低時，會保留固定行程(根據 <code>pm.min_spare_servers</code> 或 <code>pm.max_spare_servers</code>)，隨時等著接收新的連線</li>\n<li>ondemand: 用多少量就開多少行程</li>\n</ul>\n<h4 id=\"dynamic-實際運作\"><a href=\"#dynamic-實際運作\" class=\"headerlink\" title=\"dynamic 實際運作\"></a>dynamic 實際運作</h4><p>當我們設定 <code>pm = dynamic</code> 並啟動時，首先會產生一定數量的行程(根據 <code>pm.start_servers</code>)，此參數可以想像成是最小數量的子程序，而最大數量的子程序則根據 <code>pm.max_children</code>，有了最大和最小子程序數量，也就是說服務過程中子程序數量會在最大和最小子程序數量間變化。</p>\n<p>而閒置的子程序數量則由 <code>pm.min_spare_servers</code>、<code>pm.max_spare_servers</code> 控制，超過 <code>pm.max_spare_servers</code> 的閒置子程序則會被 Kill。</p>\n<p>因為 dynamic 模式可以針對伺服器的回應做最大的優化，但相反的代價是可能造成更多記憶體的佔用，這邊舉例來說，假設 <code>pm.max_spare_servers = 10</code>、<code>pm.max_children = 20</code>，在某個尖峰時段，這時候最大數量的子程序 20 個都處於忙碌狀態，0個閒置的子程序，過了尖峰時段，請求下降，而當初忙碌的 20 個子程序目前處於閒置狀態，此時 PHP-FPM 只會 Kill 掉 10 個子程序，而最後剩下 10 個閒置的子程序來等待請求，這也就是會造成在尖峰後請求數大量減少後，記憶體卻沒有大量降低的主要原因，而如果把主機重啟，記憶體則會將得更低，這是因為重啟用子程序數量會變成最小閒置行程數量(<code>pm.min_spare_servers</code>)</p>\n<h4 id=\"ondemand-實際運作\"><a href=\"#ondemand-實際運作\" class=\"headerlink\" title=\"ondemand 實際運作\"></a>ondemand 實際運作</h4><p><code>pm = ondemand</code> 的運作方式與 dynamic 恰好相反，dynamic 針對伺服器的回應做最大的優化，而 ondemand 則是最佳化記憶體。</p>\n<p>而運作方式是，每個閒置的子程序在持續閒置超過 <code>pm.process_idle_timeout</code> 設定的時間，就會被 Kill 掉，這樣的模式讓主機在尖峰時期過後可以自然地降低記憶體的使用率，如果長時間都沒有請求連線時，只會有一個 PHP-FPM 主程序。</p>\n<p>那壞處則是，如果遇到尖峰時期，或 <code>pm.process_idle_timeout</code> 設定得太短的話，會造成伺服器頻繁的建立子程序，而造成效能不佳</p>\n<h2 id=\"pm-max-children-最大行程數量\"><a href=\"#pm-max-children-最大行程數量\" class=\"headerlink\" title=\"pm.max_children(最大行程數量)\"></a>pm.max_children(最大行程數量)</h2><p><code>pm.max_children</code> 參數在 <code>pm</code> 等於 <code>static</code> 即為開啟的行程數，而在 <code>dynamic</code> 與 <code>ondemand</code> 模式下，則是代表最大可開啟的行程數量。</p>\n<p>最大行程數量的多寡是根據本身主機的記憶體大小來決定，當記憶體越大時，就可以設定較多的行程數量。 此設定值如果設太小的話會造成處理請求的速度下降，設定太大的話會造成當機，因為記憶體耗盡，所以要依硬體資源來調較。</p>\n<p>可以利用以下指令去查詢行程使用的記憶體量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps -ylC php-fpm --sort:rss</span><br><span class=\"line\"></span><br><span class=\"line\">S   UID     PID    PPID  C PRI  NI   RSS    SZ WCHAN  TTY          TIME CMD</span><br><span class=\"line\">S     0       1       0  0  80   0  4760 20195 do_epo ?        00:02:11 php-fpm</span><br><span class=\"line\">S    33       9       1  0  80   0 20260 22581 -      ?        00:01:20 php-fpm</span><br><span class=\"line\">S    33       8       1  0  80   0 20464 22582 -      ?        00:01:42 php-fpm</span><br><span class=\"line\">S    33       7       1  0  80   0 20476 22584 -      ?        00:01:43 php-fpm</span><br></pre></td></tr></table></figure>\n\n<p>RSS 欄位為子程序使用的記憶體大小，單位為KB，20476 約莫 20MB，但是因為每個子程序所使用的記憶體大小都不太一樣，所以我們可以使用下面的指令來求出子程序平均使用記憶體大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps --no-headers -o &quot;rss,cmd&quot; -C php-fpm | awk &#39;&#123; sum+&#x3D;$1 &#125; END &#123; printf (&quot;%d%s\\n&quot;, sum&#x2F;NR&#x2F;1024,&quot;Mb&quot;) &#125;&#39;</span><br></pre></td></tr></table></figure>\n\n<p>至於 <code>pm.max_children</code> 應該要設定多少才合理，以下有一個計算公式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.max_children &#x3D; Total RAM &#x2F; Max child process size</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>這邊的 Total RAM 需要扣除已經使用的記憶體，例如系統或其他程序使用後所剩餘的記憶體</p>\n</blockquote>\n<h2 id=\"pm-start-servers-初始行程數量\"><a href=\"#pm-start-servers-初始行程數量\" class=\"headerlink\" title=\"pm.start_servers(初始行程數量)\"></a>pm.start_servers(初始行程數量)</h2><p><code>pm.start_servers</code> 可設定 PHP-FPM 服務在一開始啟動時，要配置多少個行程</p>\n<p><code>pm.start_servers</code> 同樣有一個計算公式可以參考</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.start_servers &#x3D; min_spare_servers + (max_spare_servers - min_spare_servers) &#x2F; 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pm-min-spare-servers-最小閒置行程數量\"><a href=\"#pm-min-spare-servers-最小閒置行程數量\" class=\"headerlink\" title=\"pm.min_spare_servers(最小閒置行程數量)\"></a>pm.min_spare_servers(最小閒置行程數量)</h2><p><code>pm.min_spare_servers</code> 設定 PHP-FPM 最小閒置行程的數量</p>\n<h2 id=\"pm-max-spare-servers-最大閒置行程數量\"><a href=\"#pm-max-spare-servers-最大閒置行程數量\" class=\"headerlink\" title=\"pm.max_spare_servers(最大閒置行程數量)\"></a>pm.max_spare_servers(最大閒置行程數量)</h2><p><code>pm.max_spare_servers</code> 設定 PHP-FPM 最大閒置行程的數量</p>\n<blockquote>\n<p>這邊需要注意的是 <code>pm.max_spare_servers</code> 的值只能小於等於 <code>pm.max_children</code></p>\n</blockquote>\n<h2 id=\"pm-max-requests-單一行程可處理連線數\"><a href=\"#pm-max-requests-單一行程可處理連線數\" class=\"headerlink\" title=\"pm.max_requests(單一行程可處理連線數)\"></a>pm.max_requests(單一行程可處理連線數)</h2><p><code>pm.max_requests</code> 可設定單一 PHP-FPM 最多可以處理多少個連線，當一個行程處理的連線數達到設定值時，此行程會被 Kill 掉，而重新產生另一個新的行程</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://kejyuntw.gitbooks.io/ubuntu-learning-notes/content/web/php/web-php-max-children.html\">https://kejyuntw.gitbooks.io/ubuntu-learning-notes/content/web/php/web-php-max-children.html</a></li>\n<li><a href=\"https://support.plesk.com/hc/en-us/articles/360011988053-How-to-calculate-pm-max-children-value-\">https://support.plesk.com/hc/en-us/articles/360011988053-How-to-calculate-pm-max-children-value-</a></li>\n<li><a href=\"https://www.mdeditor.tw/pl/p9Vf/zh-tw\">https://www.mdeditor.tw/pl/p9Vf/zh-tw</a></li>\n</ul>"},{"title":"SSH 連線出現「WARNING:REMOTE HOST IDENTIFICATION HAS CHANGED!」","date":"2021-08-09T02:48:45.000Z","_content":"\n\n## 前言\n\n在 Linux 環境中，我們常常使用 SSH 來與目標主機做連線，有時候因為目標主機的異動而導致我們後續連線時會出現 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED這樣子的警示訊息，導致我們無法順利連線，為何會有這樣子的訊息，又該如何解決，可以參考以下內容\n\n<!--more-->\n\n## 連線原理\n\nSSH 連接遠端主機時，會檢查主機的 Public key，如果是第一次連線該主機，會顯示該主機的 public key fingerprint，詢問使用者信任該主機並繼續連線\n\n> A public key fingerprint is a short sequence of bytes used to identify a longer public key.\n\n```\nThe authenticity of host '192.168.26.11 (192.168.26.11)' can't be established.\nRSA key fingerprint is a3:ca:ad:95:a1:45:d2:57:3a:e9:e7:75:a8:4c:1f:9f.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n當選擇 yes，就會將該主機的 Public key 追加到本機 `~/.ssh/known_hosts` 中，當第二次連到該台主機時，就不會再出現相關訊息\n\n## 解決方式\n\n這樣子的 Public key 檢查是一個重要的安全機制，可以防範中間人攻擊等問題，但有時候因爲某些原因，導致該 IP 的 Public key 改變了，這時候使用 SSH 連線時，會出現以下錯誤訊息\n\n```\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that the RSA host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\ne9:0c:36:89:7f:3c:07:71:09:5a:9f:28:8c:44:e9:05.\nPlease contact your system administrator.\nAdd correct host key in /home/tonyjhang/.ssh/known_hosts to get rid of this message.\nOffending key in /home/tonyjhang/.ssh/known_hosts:81\nRSA host key for 192.168.26.11 has changed and you have requested strict checking.\nHost key verification failed.\n```\n\n有三種解決方式\n\n1. 根據上述訊息，將第 81 行刪除，重新連線，主機會重新傳送一份 public key fingerprint\n\n```\nOffending key in /home/tonyjhang/.ssh/known_hosts:81\n```\n\n2. 把整個 `~/.ssh/known_hosts` 刪除，這是最「不建議」的做法，可能會導致自動化失效或連線到其他主機的問題\n3. 使用 `ssh-keygen -R` 的指令，將 `~/.ssh/known_hosts` 內的所有資訊，轉存一份到 `~/.ssh/known_hosts.old`，並且將 `~/.ssh/known_hosts` 內的目標主機項目移除，使用方式如下\n\n```\n$ ssh-keygen -R 192.168.26.11\n\n# Host 192.168.26.11 found: line 60\n/Users/tony_jhang/.ssh/known_hosts updated.\nOriginal contents retained as /Users/tony_jhang/.ssh/known_hosts.old\n```\n\n> Original contents retained as /Users/tony_jhang/.ssh/known_hosts.old → 原始內容有被保存到 known_hosts.old\n\n## 參考資料\n\n- https://en.wikipedia.org/wiki/Public_key_fingerprint\n","source":"_posts/SSH連線警告.md","raw":"---\ntitle: 'SSH 連線出現「WARNING:REMOTE HOST IDENTIFICATION HAS CHANGED!」'\ntags:\n  - Linux\n  - SSH\n  - fingerprint\n  - known_hosts\ncategories:\n  - Linux\ndate: 2021-08-09 10:48:45\n---\n\n\n## 前言\n\n在 Linux 環境中，我們常常使用 SSH 來與目標主機做連線，有時候因為目標主機的異動而導致我們後續連線時會出現 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED這樣子的警示訊息，導致我們無法順利連線，為何會有這樣子的訊息，又該如何解決，可以參考以下內容\n\n<!--more-->\n\n## 連線原理\n\nSSH 連接遠端主機時，會檢查主機的 Public key，如果是第一次連線該主機，會顯示該主機的 public key fingerprint，詢問使用者信任該主機並繼續連線\n\n> A public key fingerprint is a short sequence of bytes used to identify a longer public key.\n\n```\nThe authenticity of host '192.168.26.11 (192.168.26.11)' can't be established.\nRSA key fingerprint is a3:ca:ad:95:a1:45:d2:57:3a:e9:e7:75:a8:4c:1f:9f.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n當選擇 yes，就會將該主機的 Public key 追加到本機 `~/.ssh/known_hosts` 中，當第二次連到該台主機時，就不會再出現相關訊息\n\n## 解決方式\n\n這樣子的 Public key 檢查是一個重要的安全機制，可以防範中間人攻擊等問題，但有時候因爲某些原因，導致該 IP 的 Public key 改變了，這時候使用 SSH 連線時，會出現以下錯誤訊息\n\n```\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that the RSA host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\ne9:0c:36:89:7f:3c:07:71:09:5a:9f:28:8c:44:e9:05.\nPlease contact your system administrator.\nAdd correct host key in /home/tonyjhang/.ssh/known_hosts to get rid of this message.\nOffending key in /home/tonyjhang/.ssh/known_hosts:81\nRSA host key for 192.168.26.11 has changed and you have requested strict checking.\nHost key verification failed.\n```\n\n有三種解決方式\n\n1. 根據上述訊息，將第 81 行刪除，重新連線，主機會重新傳送一份 public key fingerprint\n\n```\nOffending key in /home/tonyjhang/.ssh/known_hosts:81\n```\n\n2. 把整個 `~/.ssh/known_hosts` 刪除，這是最「不建議」的做法，可能會導致自動化失效或連線到其他主機的問題\n3. 使用 `ssh-keygen -R` 的指令，將 `~/.ssh/known_hosts` 內的所有資訊，轉存一份到 `~/.ssh/known_hosts.old`，並且將 `~/.ssh/known_hosts` 內的目標主機項目移除，使用方式如下\n\n```\n$ ssh-keygen -R 192.168.26.11\n\n# Host 192.168.26.11 found: line 60\n/Users/tony_jhang/.ssh/known_hosts updated.\nOriginal contents retained as /Users/tony_jhang/.ssh/known_hosts.old\n```\n\n> Original contents retained as /Users/tony_jhang/.ssh/known_hosts.old → 原始內容有被保存到 known_hosts.old\n\n## 參考資料\n\n- https://en.wikipedia.org/wiki/Public_key_fingerprint\n","slug":"SSH連線警告","published":1,"updated":"2023-10-04T15:33:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcb20013mxv87j951xil","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在 Linux 環境中，我們常常使用 SSH 來與目標主機做連線，有時候因為目標主機的異動而導致我們後續連線時會出現 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED這樣子的警示訊息，導致我們無法順利連線，為何會有這樣子的訊息，又該如何解決，可以參考以下內容</p>\n<span id=\"more\"></span>\n\n<h2 id=\"連線原理\"><a href=\"#連線原理\" class=\"headerlink\" title=\"連線原理\"></a>連線原理</h2><p>SSH 連接遠端主機時，會檢查主機的 Public key，如果是第一次連線該主機，會顯示該主機的 public key fingerprint，詢問使用者信任該主機並繼續連線</p>\n<blockquote>\n<p>A public key fingerprint is a short sequence of bytes used to identify a longer public key.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host &#39;192.168.26.11 (192.168.26.11)&#39; can&#39;t be established.</span><br><span class=\"line\">RSA key fingerprint is a3:ca:ad:95:a1:45:d2:57:3a:e9:e7:75:a8:4c:1f:9f.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes&#x2F;no)?</span><br></pre></td></tr></table></figure>\n\n<p>當選擇 yes，就會將該主機的 Public key 追加到本機 <code>~/.ssh/known_hosts</code> 中，當第二次連到該台主機時，就不會再出現相關訊息</p>\n<h2 id=\"解決方式\"><a href=\"#解決方式\" class=\"headerlink\" title=\"解決方式\"></a>解決方式</h2><p>這樣子的 Public key 檢查是一個重要的安全機制，可以防範中間人攻擊等問題，但有時候因爲某些原因，導致該 IP 的 Public key 改變了，這時候使用 SSH 連線時，會出現以下錯誤訊息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class=\"line\">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class=\"line\">It is also possible that the RSA host key has just been changed.</span><br><span class=\"line\">The fingerprint for the RSA key sent by the remote host is</span><br><span class=\"line\">e9:0c:36:89:7f:3c:07:71:09:5a:9f:28:8c:44:e9:05.</span><br><span class=\"line\">Please contact your system administrator.</span><br><span class=\"line\">Add correct host key in &#x2F;home&#x2F;tonyjhang&#x2F;.ssh&#x2F;known_hosts to get rid of this message.</span><br><span class=\"line\">Offending key in &#x2F;home&#x2F;tonyjhang&#x2F;.ssh&#x2F;known_hosts:81</span><br><span class=\"line\">RSA host key for 192.168.26.11 has changed and you have requested strict checking.</span><br><span class=\"line\">Host key verification failed.</span><br></pre></td></tr></table></figure>\n\n<p>有三種解決方式</p>\n<ol>\n<li>根據上述訊息，將第 81 行刪除，重新連線，主機會重新傳送一份 public key fingerprint</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Offending key in &#x2F;home&#x2F;tonyjhang&#x2F;.ssh&#x2F;known_hosts:81</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>把整個 <code>~/.ssh/known_hosts</code> 刪除，這是最「不建議」的做法，可能會導致自動化失效或連線到其他主機的問題</li>\n<li>使用 <code>ssh-keygen -R</code> 的指令，將 <code>~/.ssh/known_hosts</code> 內的所有資訊，轉存一份到 <code>~/.ssh/known_hosts.old</code>，並且將 <code>~/.ssh/known_hosts</code> 內的目標主機項目移除，使用方式如下</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -R 192.168.26.11</span><br><span class=\"line\"></span><br><span class=\"line\"># Host 192.168.26.11 found: line 60</span><br><span class=\"line\">&#x2F;Users&#x2F;tony_jhang&#x2F;.ssh&#x2F;known_hosts updated.</span><br><span class=\"line\">Original contents retained as &#x2F;Users&#x2F;tony_jhang&#x2F;.ssh&#x2F;known_hosts.old</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Original contents retained as /Users/tony_jhang/.ssh/known_hosts.old → 原始內容有被保存到 known_hosts.old</p>\n</blockquote>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Public_key_fingerprint\">https://en.wikipedia.org/wiki/Public_key_fingerprint</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在 Linux 環境中，我們常常使用 SSH 來與目標主機做連線，有時候因為目標主機的異動而導致我們後續連線時會出現 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED這樣子的警示訊息，導致我們無法順利連線，為何會有這樣子的訊息，又該如何解決，可以參考以下內容</p>","more":"<h2 id=\"連線原理\"><a href=\"#連線原理\" class=\"headerlink\" title=\"連線原理\"></a>連線原理</h2><p>SSH 連接遠端主機時，會檢查主機的 Public key，如果是第一次連線該主機，會顯示該主機的 public key fingerprint，詢問使用者信任該主機並繼續連線</p>\n<blockquote>\n<p>A public key fingerprint is a short sequence of bytes used to identify a longer public key.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host &#39;192.168.26.11 (192.168.26.11)&#39; can&#39;t be established.</span><br><span class=\"line\">RSA key fingerprint is a3:ca:ad:95:a1:45:d2:57:3a:e9:e7:75:a8:4c:1f:9f.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes&#x2F;no)?</span><br></pre></td></tr></table></figure>\n\n<p>當選擇 yes，就會將該主機的 Public key 追加到本機 <code>~/.ssh/known_hosts</code> 中，當第二次連到該台主機時，就不會再出現相關訊息</p>\n<h2 id=\"解決方式\"><a href=\"#解決方式\" class=\"headerlink\" title=\"解決方式\"></a>解決方式</h2><p>這樣子的 Public key 檢查是一個重要的安全機制，可以防範中間人攻擊等問題，但有時候因爲某些原因，導致該 IP 的 Public key 改變了，這時候使用 SSH 連線時，會出現以下錯誤訊息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class=\"line\">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class=\"line\">It is also possible that the RSA host key has just been changed.</span><br><span class=\"line\">The fingerprint for the RSA key sent by the remote host is</span><br><span class=\"line\">e9:0c:36:89:7f:3c:07:71:09:5a:9f:28:8c:44:e9:05.</span><br><span class=\"line\">Please contact your system administrator.</span><br><span class=\"line\">Add correct host key in &#x2F;home&#x2F;tonyjhang&#x2F;.ssh&#x2F;known_hosts to get rid of this message.</span><br><span class=\"line\">Offending key in &#x2F;home&#x2F;tonyjhang&#x2F;.ssh&#x2F;known_hosts:81</span><br><span class=\"line\">RSA host key for 192.168.26.11 has changed and you have requested strict checking.</span><br><span class=\"line\">Host key verification failed.</span><br></pre></td></tr></table></figure>\n\n<p>有三種解決方式</p>\n<ol>\n<li>根據上述訊息，將第 81 行刪除，重新連線，主機會重新傳送一份 public key fingerprint</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Offending key in &#x2F;home&#x2F;tonyjhang&#x2F;.ssh&#x2F;known_hosts:81</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>把整個 <code>~/.ssh/known_hosts</code> 刪除，這是最「不建議」的做法，可能會導致自動化失效或連線到其他主機的問題</li>\n<li>使用 <code>ssh-keygen -R</code> 的指令，將 <code>~/.ssh/known_hosts</code> 內的所有資訊，轉存一份到 <code>~/.ssh/known_hosts.old</code>，並且將 <code>~/.ssh/known_hosts</code> 內的目標主機項目移除，使用方式如下</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -R 192.168.26.11</span><br><span class=\"line\"></span><br><span class=\"line\"># Host 192.168.26.11 found: line 60</span><br><span class=\"line\">&#x2F;Users&#x2F;tony_jhang&#x2F;.ssh&#x2F;known_hosts updated.</span><br><span class=\"line\">Original contents retained as &#x2F;Users&#x2F;tony_jhang&#x2F;.ssh&#x2F;known_hosts.old</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Original contents retained as /Users/tony_jhang/.ssh/known_hosts.old → 原始內容有被保存到 known_hosts.old</p>\n</blockquote>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Public_key_fingerprint\">https://en.wikipedia.org/wiki/Public_key_fingerprint</a></li>\n</ul>"},{"title":"Hexo的關於功能","date":"2021-07-26T02:26:48.000Z","_content":"\n## 前言\n\nHexo 的關於(about) 功能，主要是可以讓讀者點進特定頁面來去了解作者本人，也就是作者的自我介紹頁，以下會介紹如何啟用與使用\n\n<!--more-->\n\n## 關於的啟用/使用\n\n啟用關於功能，讓關於連結出現在網站上，首先調整 `./themes/next/_config.yml` 中的下述設定，將 `about: /about/ || fa fa-user` 註解「取消」，這樣就可以讓網站出現關於的連結\n\n```\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n只有連結並沒有用處，點擊關於連結時，要能夠顯示相關頁面，所以使用下述指令，讓 Hexo 幫你產生連結檔\n\n```\n$ hexo new page about\n```\n\nHexo 會在 `./source` 底下產生 about 目錄，目錄內會有一個 index.md 檔案\n\nabout 頁面建立後，還需將 index.md 檔案打開，並且加入 type 參數，如下\n\n```\n---\ntitle: about\ndate: 2021-04-20 15:37:19\ntype: \"about\"\n---\n```\n\n這樣基本上關於功能就已經完成設定\n\n使用時，只要在 `./source/about/index.md` 頁面以 Markdown 語法寫下自我介紹即可\n\n\n## 後記\n\n該篇與 Hexo的分類/標籤功能 設定方式極度雷同，如有需要可以搭配一起設定，另外兩篇請參考下面連結\n\n- [Hexo的分類功能](https://blog.tonyjhang.tk/2021/07/23/Hexo%E7%9A%84%E5%88%86%E9%A1%9E%E5%8A%9F%E8%83%BD/)\n- [Hexo的標籤功能](https://blog.tonyjhang.tk/2021/07/21/Hexo%E6%A8%99%E7%B1%A4%E7%9A%84%E4%BD%BF%E7%94%A8/)\n","source":"_posts/Hexo的關於功能.md","raw":"---\ntitle: Hexo的關於功能\ntags:\n  - Hexo\n  - blog\ncategories:\n  - Hexo\ndate: 2021-07-26 10:26:48\n---\n\n## 前言\n\nHexo 的關於(about) 功能，主要是可以讓讀者點進特定頁面來去了解作者本人，也就是作者的自我介紹頁，以下會介紹如何啟用與使用\n\n<!--more-->\n\n## 關於的啟用/使用\n\n啟用關於功能，讓關於連結出現在網站上，首先調整 `./themes/next/_config.yml` 中的下述設定，將 `about: /about/ || fa fa-user` 註解「取消」，這樣就可以讓網站出現關於的連結\n\n```\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n只有連結並沒有用處，點擊關於連結時，要能夠顯示相關頁面，所以使用下述指令，讓 Hexo 幫你產生連結檔\n\n```\n$ hexo new page about\n```\n\nHexo 會在 `./source` 底下產生 about 目錄，目錄內會有一個 index.md 檔案\n\nabout 頁面建立後，還需將 index.md 檔案打開，並且加入 type 參數，如下\n\n```\n---\ntitle: about\ndate: 2021-04-20 15:37:19\ntype: \"about\"\n---\n```\n\n這樣基本上關於功能就已經完成設定\n\n使用時，只要在 `./source/about/index.md` 頁面以 Markdown 語法寫下自我介紹即可\n\n\n## 後記\n\n該篇與 Hexo的分類/標籤功能 設定方式極度雷同，如有需要可以搭配一起設定，另外兩篇請參考下面連結\n\n- [Hexo的分類功能](https://blog.tonyjhang.tk/2021/07/23/Hexo%E7%9A%84%E5%88%86%E9%A1%9E%E5%8A%9F%E8%83%BD/)\n- [Hexo的標籤功能](https://blog.tonyjhang.tk/2021/07/21/Hexo%E6%A8%99%E7%B1%A4%E7%9A%84%E4%BD%BF%E7%94%A8/)\n","slug":"Hexo的關於功能","published":1,"updated":"2023-10-04T15:33:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcb30015mxv87o1x53a0","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Hexo 的關於(about) 功能，主要是可以讓讀者點進特定頁面來去了解作者本人，也就是作者的自我介紹頁，以下會介紹如何啟用與使用</p>\n<span id=\"more\"></span>\n\n<h2 id=\"關於的啟用-使用\"><a href=\"#關於的啟用-使用\" class=\"headerlink\" title=\"關於的啟用/使用\"></a>關於的啟用/使用</h2><p>啟用關於功能，讓關於連結出現在網站上，首先調整 <code>./themes/next/_config.yml</code> 中的下述設定，將 <code>about: /about/ || fa fa-user</code> 註解「取消」，這樣就可以讓網站出現關於的連結</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: &#x2F; || fa fa-home</span><br><span class=\"line\">  about: &#x2F;about&#x2F; || fa fa-user</span><br><span class=\"line\">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class=\"line\">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class=\"line\">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class=\"line\">  #schedule: &#x2F;schedule&#x2F; || fa fa-calendar</span><br><span class=\"line\">  #sitemap: &#x2F;sitemap.xml || fa fa-sitemap</span><br><span class=\"line\">  #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat</span><br></pre></td></tr></table></figure>\n\n<p>只有連結並沒有用處，點擊關於連結時，要能夠顯示相關頁面，所以使用下述指令，讓 Hexo 幫你產生連結檔</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page about</span><br></pre></td></tr></table></figure>\n\n<p>Hexo 會在 <code>./source</code> 底下產生 about 目錄，目錄內會有一個 index.md 檔案</p>\n<p>about 頁面建立後，還需將 index.md 檔案打開，並且加入 type 參數，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: about</span><br><span class=\"line\">date: 2021-04-20 15:37:19</span><br><span class=\"line\">type: &quot;about&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>這樣基本上關於功能就已經完成設定</p>\n<p>使用時，只要在 <code>./source/about/index.md</code> 頁面以 Markdown 語法寫下自我介紹即可</p>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>該篇與 Hexo的分類/標籤功能 設定方式極度雷同，如有需要可以搭配一起設定，另外兩篇請參考下面連結</p>\n<ul>\n<li><a href=\"https://blog.tonyjhang.tk/2021/07/23/Hexo%E7%9A%84%E5%88%86%E9%A1%9E%E5%8A%9F%E8%83%BD/\">Hexo的分類功能</a></li>\n<li><a href=\"https://blog.tonyjhang.tk/2021/07/21/Hexo%E6%A8%99%E7%B1%A4%E7%9A%84%E4%BD%BF%E7%94%A8/\">Hexo的標籤功能</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Hexo 的關於(about) 功能，主要是可以讓讀者點進特定頁面來去了解作者本人，也就是作者的自我介紹頁，以下會介紹如何啟用與使用</p>","more":"<h2 id=\"關於的啟用-使用\"><a href=\"#關於的啟用-使用\" class=\"headerlink\" title=\"關於的啟用/使用\"></a>關於的啟用/使用</h2><p>啟用關於功能，讓關於連結出現在網站上，首先調整 <code>./themes/next/_config.yml</code> 中的下述設定，將 <code>about: /about/ || fa fa-user</code> 註解「取消」，這樣就可以讓網站出現關於的連結</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: &#x2F; || fa fa-home</span><br><span class=\"line\">  about: &#x2F;about&#x2F; || fa fa-user</span><br><span class=\"line\">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class=\"line\">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class=\"line\">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class=\"line\">  #schedule: &#x2F;schedule&#x2F; || fa fa-calendar</span><br><span class=\"line\">  #sitemap: &#x2F;sitemap.xml || fa fa-sitemap</span><br><span class=\"line\">  #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat</span><br></pre></td></tr></table></figure>\n\n<p>只有連結並沒有用處，點擊關於連結時，要能夠顯示相關頁面，所以使用下述指令，讓 Hexo 幫你產生連結檔</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page about</span><br></pre></td></tr></table></figure>\n\n<p>Hexo 會在 <code>./source</code> 底下產生 about 目錄，目錄內會有一個 index.md 檔案</p>\n<p>about 頁面建立後，還需將 index.md 檔案打開，並且加入 type 參數，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: about</span><br><span class=\"line\">date: 2021-04-20 15:37:19</span><br><span class=\"line\">type: &quot;about&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>這樣基本上關於功能就已經完成設定</p>\n<p>使用時，只要在 <code>./source/about/index.md</code> 頁面以 Markdown 語法寫下自我介紹即可</p>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>該篇與 Hexo的分類/標籤功能 設定方式極度雷同，如有需要可以搭配一起設定，另外兩篇請參考下面連結</p>\n<ul>\n<li><a href=\"https://blog.tonyjhang.tk/2021/07/23/Hexo%E7%9A%84%E5%88%86%E9%A1%9E%E5%8A%9F%E8%83%BD/\">Hexo的分類功能</a></li>\n<li><a href=\"https://blog.tonyjhang.tk/2021/07/21/Hexo%E6%A8%99%E7%B1%A4%E7%9A%84%E4%BD%BF%E7%94%A8/\">Hexo的標籤功能</a></li>\n</ul>"},{"title":"htpasswd的使用","date":"2024-01-08T07:21:44.000Z","_content":"\n\n## 前言\n\n之前在測試 Traefik BasicAuth 功能時，需要使用 MD5/SHA1/Bcrypt 三種其中一種方式來加密密碼，並寫到設定檔裡\n\n常見的 Nginx/Apache 也有內建網頁的基本身份驗證，這時候也會需要使用 htpasswd 來將使用者的密碼加密並寫進設定檔\n\n下面會介紹如何使用 htpasswd 指令來產生加密密碼\n\n<!--more-->\n\n## htpasswd的使用\n\n其實使用的方式很簡單，只要將使用者的「帳號」與「密碼」丟給 htpasswd，他就會自動幫你加密指定密碼並且整理好格式輸出給你使用，詳細可以參考下面的實際範例\n\n使用 Bcrypt 加密密碼\n```\n# Format\nhtpasswd -nb -B [username] [password]\n\n# Example\nhtpasswd -nb -B tony 1234\n\n# Output\ntony:$2y$05$c1xVKSuI8mbPRNll.t.P0OjXC2RShcGww2PBslit0mk.wnatG1cIy\n```\n\n使用 MD5 加密密碼\n```\n# Format\nhtpasswd -nb -m [username] [password]\n\n# Example\nhtpasswd -nb -m tony 1234\n\n# Output\ntony:$apr1$eRtkDKOy$shi95jDEBupv6F5XcpXyL/\n```\n\n使用 SHA1 加密密碼\n```\n# Format\nhtpasswd -nb -s [username] [password]\n\n# Example\nhtpasswd -nb -s tony 1234\n\n# Output\ntony:{SHA}cRDtpNCeBiql5KOQsKVyrA0sAiA=\n```\n\n## 文後討論\n\n最詳細的使用說明，可以使用 `--help` 來檢視\n\n```\n$ htpasswd --help\n\nUsage:\n\thtpasswd [-cimBdpsDv] [-C cost] passwordfile username\n\thtpasswd -b[cmBdpsDv] [-C cost] passwordfile username password\n\n\thtpasswd -n[imBdps] [-C cost] username\n\thtpasswd -nb[mBdps] [-C cost] username password\n -c  Create a new file.\n -n  Don't update file; display results on stdout.\n -b  Use the password from the command line rather than prompting for it.\n -i  Read password from stdin without verification (for script usage).\n -m  Force MD5 encryption of the password (default).\n -B  Force bcrypt encryption of the password (very secure).\n -C  Set the computing time used for the bcrypt algorithm\n     (higher is more secure but slower, default: 5, valid: 4 to 31).\n -d  Force CRYPT encryption of the password (8 chars max, insecure).\n -s  Force SHA encryption of the password (insecure).\n -p  Do not encrypt the password (plaintext, insecure).\n -D  Delete the specified user.\n -v  Verify password for the specified user.\nOn other systems than Windows and NetWare the '-p' flag will probably not work.\nThe SHA algorithm does not use a salt and is less secure than the MD5 algorithm.\n```\n","source":"_posts/htpasswd的使用.md","raw":"---\ntitle: htpasswd的使用\ntags:\n  - htpasswd\n  - MD5\n  - SHA1\n  - Bcrypt\n  - Linux\n  - Nginx\n  - Apache\ncategories:\n  - Linux\ndate: 2024-01-08 15:21:44\n---\n\n\n## 前言\n\n之前在測試 Traefik BasicAuth 功能時，需要使用 MD5/SHA1/Bcrypt 三種其中一種方式來加密密碼，並寫到設定檔裡\n\n常見的 Nginx/Apache 也有內建網頁的基本身份驗證，這時候也會需要使用 htpasswd 來將使用者的密碼加密並寫進設定檔\n\n下面會介紹如何使用 htpasswd 指令來產生加密密碼\n\n<!--more-->\n\n## htpasswd的使用\n\n其實使用的方式很簡單，只要將使用者的「帳號」與「密碼」丟給 htpasswd，他就會自動幫你加密指定密碼並且整理好格式輸出給你使用，詳細可以參考下面的實際範例\n\n使用 Bcrypt 加密密碼\n```\n# Format\nhtpasswd -nb -B [username] [password]\n\n# Example\nhtpasswd -nb -B tony 1234\n\n# Output\ntony:$2y$05$c1xVKSuI8mbPRNll.t.P0OjXC2RShcGww2PBslit0mk.wnatG1cIy\n```\n\n使用 MD5 加密密碼\n```\n# Format\nhtpasswd -nb -m [username] [password]\n\n# Example\nhtpasswd -nb -m tony 1234\n\n# Output\ntony:$apr1$eRtkDKOy$shi95jDEBupv6F5XcpXyL/\n```\n\n使用 SHA1 加密密碼\n```\n# Format\nhtpasswd -nb -s [username] [password]\n\n# Example\nhtpasswd -nb -s tony 1234\n\n# Output\ntony:{SHA}cRDtpNCeBiql5KOQsKVyrA0sAiA=\n```\n\n## 文後討論\n\n最詳細的使用說明，可以使用 `--help` 來檢視\n\n```\n$ htpasswd --help\n\nUsage:\n\thtpasswd [-cimBdpsDv] [-C cost] passwordfile username\n\thtpasswd -b[cmBdpsDv] [-C cost] passwordfile username password\n\n\thtpasswd -n[imBdps] [-C cost] username\n\thtpasswd -nb[mBdps] [-C cost] username password\n -c  Create a new file.\n -n  Don't update file; display results on stdout.\n -b  Use the password from the command line rather than prompting for it.\n -i  Read password from stdin without verification (for script usage).\n -m  Force MD5 encryption of the password (default).\n -B  Force bcrypt encryption of the password (very secure).\n -C  Set the computing time used for the bcrypt algorithm\n     (higher is more secure but slower, default: 5, valid: 4 to 31).\n -d  Force CRYPT encryption of the password (8 chars max, insecure).\n -s  Force SHA encryption of the password (insecure).\n -p  Do not encrypt the password (plaintext, insecure).\n -D  Delete the specified user.\n -v  Verify password for the specified user.\nOn other systems than Windows and NetWare the '-p' flag will probably not work.\nThe SHA algorithm does not use a salt and is less secure than the MD5 algorithm.\n```\n","slug":"htpasswd的使用","published":1,"updated":"2024-01-08T07:21:44.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcb4001amxv8f2evcmit","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前在測試 Traefik BasicAuth 功能時，需要使用 MD5/SHA1/Bcrypt 三種其中一種方式來加密密碼，並寫到設定檔裡</p>\n<p>常見的 Nginx/Apache 也有內建網頁的基本身份驗證，這時候也會需要使用 htpasswd 來將使用者的密碼加密並寫進設定檔</p>\n<p>下面會介紹如何使用 htpasswd 指令來產生加密密碼</p>\n<span id=\"more\"></span>\n\n<h2 id=\"htpasswd的使用\"><a href=\"#htpasswd的使用\" class=\"headerlink\" title=\"htpasswd的使用\"></a>htpasswd的使用</h2><p>其實使用的方式很簡單，只要將使用者的「帳號」與「密碼」丟給 htpasswd，他就會自動幫你加密指定密碼並且整理好格式輸出給你使用，詳細可以參考下面的實際範例</p>\n<p>使用 Bcrypt 加密密碼</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Format</span><br><span class=\"line\">htpasswd -nb -B [username] [password]</span><br><span class=\"line\"></span><br><span class=\"line\"># Example</span><br><span class=\"line\">htpasswd -nb -B tony 1234</span><br><span class=\"line\"></span><br><span class=\"line\"># Output</span><br><span class=\"line\">tony:$2y$05$c1xVKSuI8mbPRNll.t.P0OjXC2RShcGww2PBslit0mk.wnatG1cIy</span><br></pre></td></tr></table></figure>\n\n<p>使用 MD5 加密密碼</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Format</span><br><span class=\"line\">htpasswd -nb -m [username] [password]</span><br><span class=\"line\"></span><br><span class=\"line\"># Example</span><br><span class=\"line\">htpasswd -nb -m tony 1234</span><br><span class=\"line\"></span><br><span class=\"line\"># Output</span><br><span class=\"line\">tony:$apr1$eRtkDKOy$shi95jDEBupv6F5XcpXyL&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>使用 SHA1 加密密碼</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Format</span><br><span class=\"line\">htpasswd -nb -s [username] [password]</span><br><span class=\"line\"></span><br><span class=\"line\"># Example</span><br><span class=\"line\">htpasswd -nb -s tony 1234</span><br><span class=\"line\"></span><br><span class=\"line\"># Output</span><br><span class=\"line\">tony:&#123;SHA&#125;cRDtpNCeBiql5KOQsKVyrA0sAiA&#x3D;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><p>最詳細的使用說明，可以使用 <code>--help</code> 來檢視</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ htpasswd --help</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">\thtpasswd [-cimBdpsDv] [-C cost] passwordfile username</span><br><span class=\"line\">\thtpasswd -b[cmBdpsDv] [-C cost] passwordfile username password</span><br><span class=\"line\"></span><br><span class=\"line\">\thtpasswd -n[imBdps] [-C cost] username</span><br><span class=\"line\">\thtpasswd -nb[mBdps] [-C cost] username password</span><br><span class=\"line\"> -c  Create a new file.</span><br><span class=\"line\"> -n  Don&#39;t update file; display results on stdout.</span><br><span class=\"line\"> -b  Use the password from the command line rather than prompting for it.</span><br><span class=\"line\"> -i  Read password from stdin without verification (for script usage).</span><br><span class=\"line\"> -m  Force MD5 encryption of the password (default).</span><br><span class=\"line\"> -B  Force bcrypt encryption of the password (very secure).</span><br><span class=\"line\"> -C  Set the computing time used for the bcrypt algorithm</span><br><span class=\"line\">     (higher is more secure but slower, default: 5, valid: 4 to 31).</span><br><span class=\"line\"> -d  Force CRYPT encryption of the password (8 chars max, insecure).</span><br><span class=\"line\"> -s  Force SHA encryption of the password (insecure).</span><br><span class=\"line\"> -p  Do not encrypt the password (plaintext, insecure).</span><br><span class=\"line\"> -D  Delete the specified user.</span><br><span class=\"line\"> -v  Verify password for the specified user.</span><br><span class=\"line\">On other systems than Windows and NetWare the &#39;-p&#39; flag will probably not work.</span><br><span class=\"line\">The SHA algorithm does not use a salt and is less secure than the MD5 algorithm.</span><br></pre></td></tr></table></figure>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前在測試 Traefik BasicAuth 功能時，需要使用 MD5/SHA1/Bcrypt 三種其中一種方式來加密密碼，並寫到設定檔裡</p>\n<p>常見的 Nginx/Apache 也有內建網頁的基本身份驗證，這時候也會需要使用 htpasswd 來將使用者的密碼加密並寫進設定檔</p>\n<p>下面會介紹如何使用 htpasswd 指令來產生加密密碼</p>","more":"<h2 id=\"htpasswd的使用\"><a href=\"#htpasswd的使用\" class=\"headerlink\" title=\"htpasswd的使用\"></a>htpasswd的使用</h2><p>其實使用的方式很簡單，只要將使用者的「帳號」與「密碼」丟給 htpasswd，他就會自動幫你加密指定密碼並且整理好格式輸出給你使用，詳細可以參考下面的實際範例</p>\n<p>使用 Bcrypt 加密密碼</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Format</span><br><span class=\"line\">htpasswd -nb -B [username] [password]</span><br><span class=\"line\"></span><br><span class=\"line\"># Example</span><br><span class=\"line\">htpasswd -nb -B tony 1234</span><br><span class=\"line\"></span><br><span class=\"line\"># Output</span><br><span class=\"line\">tony:$2y$05$c1xVKSuI8mbPRNll.t.P0OjXC2RShcGww2PBslit0mk.wnatG1cIy</span><br></pre></td></tr></table></figure>\n\n<p>使用 MD5 加密密碼</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Format</span><br><span class=\"line\">htpasswd -nb -m [username] [password]</span><br><span class=\"line\"></span><br><span class=\"line\"># Example</span><br><span class=\"line\">htpasswd -nb -m tony 1234</span><br><span class=\"line\"></span><br><span class=\"line\"># Output</span><br><span class=\"line\">tony:$apr1$eRtkDKOy$shi95jDEBupv6F5XcpXyL&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>使用 SHA1 加密密碼</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Format</span><br><span class=\"line\">htpasswd -nb -s [username] [password]</span><br><span class=\"line\"></span><br><span class=\"line\"># Example</span><br><span class=\"line\">htpasswd -nb -s tony 1234</span><br><span class=\"line\"></span><br><span class=\"line\"># Output</span><br><span class=\"line\">tony:&#123;SHA&#125;cRDtpNCeBiql5KOQsKVyrA0sAiA&#x3D;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文後討論\"><a href=\"#文後討論\" class=\"headerlink\" title=\"文後討論\"></a>文後討論</h2><p>最詳細的使用說明，可以使用 <code>--help</code> 來檢視</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ htpasswd --help</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">\thtpasswd [-cimBdpsDv] [-C cost] passwordfile username</span><br><span class=\"line\">\thtpasswd -b[cmBdpsDv] [-C cost] passwordfile username password</span><br><span class=\"line\"></span><br><span class=\"line\">\thtpasswd -n[imBdps] [-C cost] username</span><br><span class=\"line\">\thtpasswd -nb[mBdps] [-C cost] username password</span><br><span class=\"line\"> -c  Create a new file.</span><br><span class=\"line\"> -n  Don&#39;t update file; display results on stdout.</span><br><span class=\"line\"> -b  Use the password from the command line rather than prompting for it.</span><br><span class=\"line\"> -i  Read password from stdin without verification (for script usage).</span><br><span class=\"line\"> -m  Force MD5 encryption of the password (default).</span><br><span class=\"line\"> -B  Force bcrypt encryption of the password (very secure).</span><br><span class=\"line\"> -C  Set the computing time used for the bcrypt algorithm</span><br><span class=\"line\">     (higher is more secure but slower, default: 5, valid: 4 to 31).</span><br><span class=\"line\"> -d  Force CRYPT encryption of the password (8 chars max, insecure).</span><br><span class=\"line\"> -s  Force SHA encryption of the password (insecure).</span><br><span class=\"line\"> -p  Do not encrypt the password (plaintext, insecure).</span><br><span class=\"line\"> -D  Delete the specified user.</span><br><span class=\"line\"> -v  Verify password for the specified user.</span><br><span class=\"line\">On other systems than Windows and NetWare the &#39;-p&#39; flag will probably not work.</span><br><span class=\"line\">The SHA algorithm does not use a salt and is less secure than the MD5 algorithm.</span><br></pre></td></tr></table></figure>"},{"title":"TIME_WAIT狀態如何產生","date":"2021-08-17T07:29:31.000Z","_content":"\n\n## 前言\n\n之前 Maintain A團隊的 K8s 時，有發生過 golang 寫的服務太多的 TIME_WAIT 導致 Pod 無法建立新的連線。 近期 Maintain B團隊的服務時，因為線上人數變多，擔心 Nginx 向 Upstream 發請求時，會不會造成太多的連線，然後有過多的 TIME_WAIT 現象，因為預設 Nginx 向 Upstream 發送請求是使用 http/1.0，會導致連線無法複用，所以當連線一多時，就很容易發生過多的 TIME_WAIT 狀態。\n\n所以本篇主要是在講解 TCP 協定在「建立連線」與「關閉連線」的過程，只要了解運作過程，就會知道 TIME_WAIT 狀態到底是如何產生的\n\n<!--more-->\n\n## TCP 建立連線\n\n依據 IETF 的標準文件 [rfc793](http://www.rfc-editor.org/rfc/rfc793.txt) 中所描述的情形，可分為以下四種不同狀況\n\n- Basic 3-Way Handshake for Connection Synchronization\n- Simultaneous Connection Synchronization\n- Recovery from Old Duplicate SYN\n- Half-Open Connection Discovery\n\n以下僅針對第一個 Basic 3-Way Handshake for Connection Synchronization 進行說明\n\n通常 TCP 連線建立流程，需要經過三向交握(three-way handshaking) 來建立連線\n\n![](TCPIP-0.png)\n\n1. Server 建立 TCB，開啟監聽連線，進入 LISTENING 狀態\n2. Client 主動發出連線請求 SYN，進入 SYN_SENT 狀態，並等待回應\n3. Server 收到 SYN 要求，回應連線 SYN,ACK，並進入 SYN_RCVD 狀態\n4. Client 收到 SYN,ACK 確認完成連線進入 ESTABLISHED 狀態，並送出 ACK\n5. Server 收到 ACK 確認連線完成，同時也進入 ESTABLISHED 狀態\n\n名詞解釋：\n- CLOSED：已關閉連線，表示該主機的連線呈現關閉中\n- LISTENING：監聽狀態，表示該主機被動等待連線請求\n- SYN_SENT：表示已送出 SYN 訊息，並等待對方回應\n- SYN_RCVD：表示已接收到對方的 SYN 訊息，並且送出 SYN,ACK，等待對方回應\n- ESTABLISHED：表示已完成雙方連線的建立，可開始傳輸資料\n- TCB：傳輸控制區塊(Transmission Control Block)，用來儲存 Server 端有關 TCP 的所有資訊\n- SYN：Synchronous，表示與對方建立連線的請求\n- ACK：Acknowledgement，表示發送的數據已收到無誤\n\n「TCP建立連線」狀態流程圖\n\n![](TCPIP-1.png)\n\n## TCP 關閉連線\n\n依據 IETF 的標準文件 [rfc793](http://www.rfc-editor.org/rfc/rfc793.txt) 中所描述的情形，可分為以下二種不同狀況\n\n- Normal Close Sequence\n- Simultaneous Close Sequence\n\n以下僅針對第一個 Normal Close Sequence 進行說明\n\nTCP 關閉流程如下，需要經過四次交握 (four-way handshaking)，來確認雙方都停止收發數據，**要注意的是可以是由 server 發起主動關閉，或是 client 發起主動關閉**，但是「通常」都是 client 發起，因此下圖使用 TCP A 與 TCP B 表示，：\n\n![](TCPIP-2.png)\n\n1. TCP A：準備關閉連線，發出 FIN，進入 FIN_WAIT_1 狀態\n2. TCP B：收到 FIN，並回傳 ACK，進入 CLOSE_WAIT 狀態，並通知 Application 連線準備關閉\n3. TCP A：收到 ACK，進入 FIN_WAIT_2 狀態，並等待對方發出 FIN\n4. TCP B：確認 Application 處理完斷線請求，發出 FIN，並進入狀態 LAST_ACK\n5. TCP A：收到 FIN，並回傳 ACK，進入 TIME_WAIT 狀態，等待 2MSL 時間後正式關閉連線\n6. TCP B：收到 ACK，便直接關閉連線，進入 CLOSED 狀態\n\n名詞解釋：\n- ESTABLISHED：表示已完成雙方連線的建立，可開始傳輸資料\n- CLOSE_WAIT：等待連線關閉狀態，等待 Application 回應\n- LAST_ACK：等待連線關閉狀態，等待對方回傳 ACK 後關閉連線\n- FIN_WAIT_1：等待連線關閉狀態，等待對方回傳 ACK\n- FIN_WAIT_2：等待連線關閉狀態，等待對方回傳 FIN\n- TIME_WAIT：等待2MSL，保證遠端有收到其 ACK 關閉連線 (網路延遲問題)\n- CLOSED：已關閉連線\n- FIN：FINISH，表示關閉連線的請求\n- ACK：Acknowledgement，表示發送的數據已收到無誤\n\n「TCP關閉連線」狀態流程圖\n\n![](TCPIP-3.png)\n\n最後發送 ACK 時，會進入 TIME_WAIT 狀態，要等 2MSL 時間後，這條連接才真正消失，所以從這邊知道「主動關閉連線」的一方會進入 TIME_WAIT 狀態\n\n> 什麼是 MSL 時間\n> 最大分段壽命 MSL(Maximum Segment Lifetime)，是 TCP 協定規定封包在網絡中最長生存時間，超出時間後封包就會被丟棄。\n>\n> RFC793 定義 MSL 為 2 分鐘，不過實際上不同的作業系統可能有不同的設定，以 Linux 為例，通常是 30 秒，2MSL 就是 60 秒\n\n## 為何 TIME_WAIT 狀態要等待 2MSL 的時間呢?\n\nClient/Server 都完成了四次交握，代表 Client/Server 都同意關閉連線，照理說應該可以直接回到 CLOSED 狀態(就像是建立連線時 SYN_SEND 狀態到 ESTABLISH 狀態那樣)，但是這邊我們必須要假設網路傳輸是不可靠的，因為我們無法保證最後傳送的 ACK 對方一定會收到，傳輸過程中可能因為種種原因(例如：網路延遲、丟包等...) 導致對方一直處於 LAST_ACK 狀態下的 SOCKET 因為逾時而未收到 ACK 而重發 FIN，所以 TIME_WAIT 狀態的作用就是用來重發可能遺失的 ACK。\n\nTIME_WAIT 狀態，是為了避免因為網路傳輸的種種原因而造成的 TCP 傳輸不可靠，而 TIME_WAIT 狀態可以最大限度的提升網路傳輸的可靠性。\n\n## 完整 TCP「建立連線」與「關閉連線」之狀態圖\n\n![](TCPIP-4.png)\n\n## 參考資料\n\n- https://dev.twsiyuan.com/2017/09/tcp-states.html\n- https://www.gushiciku.cn/pl/p0aJ/zh-tw\n","source":"_posts/TIME-WAIT狀態如何產生.md","raw":"---\ntitle: TIME_WAIT狀態如何產生\ntags:\n  - TCP\ncategories: TCP/IP\ndate: 2021-08-17 15:29:31\n---\n\n\n## 前言\n\n之前 Maintain A團隊的 K8s 時，有發生過 golang 寫的服務太多的 TIME_WAIT 導致 Pod 無法建立新的連線。 近期 Maintain B團隊的服務時，因為線上人數變多，擔心 Nginx 向 Upstream 發請求時，會不會造成太多的連線，然後有過多的 TIME_WAIT 現象，因為預設 Nginx 向 Upstream 發送請求是使用 http/1.0，會導致連線無法複用，所以當連線一多時，就很容易發生過多的 TIME_WAIT 狀態。\n\n所以本篇主要是在講解 TCP 協定在「建立連線」與「關閉連線」的過程，只要了解運作過程，就會知道 TIME_WAIT 狀態到底是如何產生的\n\n<!--more-->\n\n## TCP 建立連線\n\n依據 IETF 的標準文件 [rfc793](http://www.rfc-editor.org/rfc/rfc793.txt) 中所描述的情形，可分為以下四種不同狀況\n\n- Basic 3-Way Handshake for Connection Synchronization\n- Simultaneous Connection Synchronization\n- Recovery from Old Duplicate SYN\n- Half-Open Connection Discovery\n\n以下僅針對第一個 Basic 3-Way Handshake for Connection Synchronization 進行說明\n\n通常 TCP 連線建立流程，需要經過三向交握(three-way handshaking) 來建立連線\n\n![](TCPIP-0.png)\n\n1. Server 建立 TCB，開啟監聽連線，進入 LISTENING 狀態\n2. Client 主動發出連線請求 SYN，進入 SYN_SENT 狀態，並等待回應\n3. Server 收到 SYN 要求，回應連線 SYN,ACK，並進入 SYN_RCVD 狀態\n4. Client 收到 SYN,ACK 確認完成連線進入 ESTABLISHED 狀態，並送出 ACK\n5. Server 收到 ACK 確認連線完成，同時也進入 ESTABLISHED 狀態\n\n名詞解釋：\n- CLOSED：已關閉連線，表示該主機的連線呈現關閉中\n- LISTENING：監聽狀態，表示該主機被動等待連線請求\n- SYN_SENT：表示已送出 SYN 訊息，並等待對方回應\n- SYN_RCVD：表示已接收到對方的 SYN 訊息，並且送出 SYN,ACK，等待對方回應\n- ESTABLISHED：表示已完成雙方連線的建立，可開始傳輸資料\n- TCB：傳輸控制區塊(Transmission Control Block)，用來儲存 Server 端有關 TCP 的所有資訊\n- SYN：Synchronous，表示與對方建立連線的請求\n- ACK：Acknowledgement，表示發送的數據已收到無誤\n\n「TCP建立連線」狀態流程圖\n\n![](TCPIP-1.png)\n\n## TCP 關閉連線\n\n依據 IETF 的標準文件 [rfc793](http://www.rfc-editor.org/rfc/rfc793.txt) 中所描述的情形，可分為以下二種不同狀況\n\n- Normal Close Sequence\n- Simultaneous Close Sequence\n\n以下僅針對第一個 Normal Close Sequence 進行說明\n\nTCP 關閉流程如下，需要經過四次交握 (four-way handshaking)，來確認雙方都停止收發數據，**要注意的是可以是由 server 發起主動關閉，或是 client 發起主動關閉**，但是「通常」都是 client 發起，因此下圖使用 TCP A 與 TCP B 表示，：\n\n![](TCPIP-2.png)\n\n1. TCP A：準備關閉連線，發出 FIN，進入 FIN_WAIT_1 狀態\n2. TCP B：收到 FIN，並回傳 ACK，進入 CLOSE_WAIT 狀態，並通知 Application 連線準備關閉\n3. TCP A：收到 ACK，進入 FIN_WAIT_2 狀態，並等待對方發出 FIN\n4. TCP B：確認 Application 處理完斷線請求，發出 FIN，並進入狀態 LAST_ACK\n5. TCP A：收到 FIN，並回傳 ACK，進入 TIME_WAIT 狀態，等待 2MSL 時間後正式關閉連線\n6. TCP B：收到 ACK，便直接關閉連線，進入 CLOSED 狀態\n\n名詞解釋：\n- ESTABLISHED：表示已完成雙方連線的建立，可開始傳輸資料\n- CLOSE_WAIT：等待連線關閉狀態，等待 Application 回應\n- LAST_ACK：等待連線關閉狀態，等待對方回傳 ACK 後關閉連線\n- FIN_WAIT_1：等待連線關閉狀態，等待對方回傳 ACK\n- FIN_WAIT_2：等待連線關閉狀態，等待對方回傳 FIN\n- TIME_WAIT：等待2MSL，保證遠端有收到其 ACK 關閉連線 (網路延遲問題)\n- CLOSED：已關閉連線\n- FIN：FINISH，表示關閉連線的請求\n- ACK：Acknowledgement，表示發送的數據已收到無誤\n\n「TCP關閉連線」狀態流程圖\n\n![](TCPIP-3.png)\n\n最後發送 ACK 時，會進入 TIME_WAIT 狀態，要等 2MSL 時間後，這條連接才真正消失，所以從這邊知道「主動關閉連線」的一方會進入 TIME_WAIT 狀態\n\n> 什麼是 MSL 時間\n> 最大分段壽命 MSL(Maximum Segment Lifetime)，是 TCP 協定規定封包在網絡中最長生存時間，超出時間後封包就會被丟棄。\n>\n> RFC793 定義 MSL 為 2 分鐘，不過實際上不同的作業系統可能有不同的設定，以 Linux 為例，通常是 30 秒，2MSL 就是 60 秒\n\n## 為何 TIME_WAIT 狀態要等待 2MSL 的時間呢?\n\nClient/Server 都完成了四次交握，代表 Client/Server 都同意關閉連線，照理說應該可以直接回到 CLOSED 狀態(就像是建立連線時 SYN_SEND 狀態到 ESTABLISH 狀態那樣)，但是這邊我們必須要假設網路傳輸是不可靠的，因為我們無法保證最後傳送的 ACK 對方一定會收到，傳輸過程中可能因為種種原因(例如：網路延遲、丟包等...) 導致對方一直處於 LAST_ACK 狀態下的 SOCKET 因為逾時而未收到 ACK 而重發 FIN，所以 TIME_WAIT 狀態的作用就是用來重發可能遺失的 ACK。\n\nTIME_WAIT 狀態，是為了避免因為網路傳輸的種種原因而造成的 TCP 傳輸不可靠，而 TIME_WAIT 狀態可以最大限度的提升網路傳輸的可靠性。\n\n## 完整 TCP「建立連線」與「關閉連線」之狀態圖\n\n![](TCPIP-4.png)\n\n## 參考資料\n\n- https://dev.twsiyuan.com/2017/09/tcp-states.html\n- https://www.gushiciku.cn/pl/p0aJ/zh-tw\n","slug":"TIME-WAIT狀態如何產生","published":1,"updated":"2023-10-04T15:33:37.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcb4001dmxv81xf8f435","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前 Maintain A團隊的 K8s 時，有發生過 golang 寫的服務太多的 TIME_WAIT 導致 Pod 無法建立新的連線。 近期 Maintain B團隊的服務時，因為線上人數變多，擔心 Nginx 向 Upstream 發請求時，會不會造成太多的連線，然後有過多的 TIME_WAIT 現象，因為預設 Nginx 向 Upstream 發送請求是使用 http/1.0，會導致連線無法複用，所以當連線一多時，就很容易發生過多的 TIME_WAIT 狀態。</p>\n<p>所以本篇主要是在講解 TCP 協定在「建立連線」與「關閉連線」的過程，只要了解運作過程，就會知道 TIME_WAIT 狀態到底是如何產生的</p>\n<span id=\"more\"></span>\n\n<h2 id=\"TCP-建立連線\"><a href=\"#TCP-建立連線\" class=\"headerlink\" title=\"TCP 建立連線\"></a>TCP 建立連線</h2><p>依據 IETF 的標準文件 <a href=\"http://www.rfc-editor.org/rfc/rfc793.txt\">rfc793</a> 中所描述的情形，可分為以下四種不同狀況</p>\n<ul>\n<li>Basic 3-Way Handshake for Connection Synchronization</li>\n<li>Simultaneous Connection Synchronization</li>\n<li>Recovery from Old Duplicate SYN</li>\n<li>Half-Open Connection Discovery</li>\n</ul>\n<p>以下僅針對第一個 Basic 3-Way Handshake for Connection Synchronization 進行說明</p>\n<p>通常 TCP 連線建立流程，需要經過三向交握(three-way handshaking) 來建立連線</p>\n<p><img src=\"TCPIP-0.png\"></p>\n<ol>\n<li>Server 建立 TCB，開啟監聽連線，進入 LISTENING 狀態</li>\n<li>Client 主動發出連線請求 SYN，進入 SYN_SENT 狀態，並等待回應</li>\n<li>Server 收到 SYN 要求，回應連線 SYN,ACK，並進入 SYN_RCVD 狀態</li>\n<li>Client 收到 SYN,ACK 確認完成連線進入 ESTABLISHED 狀態，並送出 ACK</li>\n<li>Server 收到 ACK 確認連線完成，同時也進入 ESTABLISHED 狀態</li>\n</ol>\n<p>名詞解釋：</p>\n<ul>\n<li>CLOSED：已關閉連線，表示該主機的連線呈現關閉中</li>\n<li>LISTENING：監聽狀態，表示該主機被動等待連線請求</li>\n<li>SYN_SENT：表示已送出 SYN 訊息，並等待對方回應</li>\n<li>SYN_RCVD：表示已接收到對方的 SYN 訊息，並且送出 SYN,ACK，等待對方回應</li>\n<li>ESTABLISHED：表示已完成雙方連線的建立，可開始傳輸資料</li>\n<li>TCB：傳輸控制區塊(Transmission Control Block)，用來儲存 Server 端有關 TCP 的所有資訊</li>\n<li>SYN：Synchronous，表示與對方建立連線的請求</li>\n<li>ACK：Acknowledgement，表示發送的數據已收到無誤</li>\n</ul>\n<p>「TCP建立連線」狀態流程圖</p>\n<p><img src=\"TCPIP-1.png\"></p>\n<h2 id=\"TCP-關閉連線\"><a href=\"#TCP-關閉連線\" class=\"headerlink\" title=\"TCP 關閉連線\"></a>TCP 關閉連線</h2><p>依據 IETF 的標準文件 <a href=\"http://www.rfc-editor.org/rfc/rfc793.txt\">rfc793</a> 中所描述的情形，可分為以下二種不同狀況</p>\n<ul>\n<li>Normal Close Sequence</li>\n<li>Simultaneous Close Sequence</li>\n</ul>\n<p>以下僅針對第一個 Normal Close Sequence 進行說明</p>\n<p>TCP 關閉流程如下，需要經過四次交握 (four-way handshaking)，來確認雙方都停止收發數據，<strong>要注意的是可以是由 server 發起主動關閉，或是 client 發起主動關閉</strong>，但是「通常」都是 client 發起，因此下圖使用 TCP A 與 TCP B 表示，：</p>\n<p><img src=\"TCPIP-2.png\"></p>\n<ol>\n<li>TCP A：準備關閉連線，發出 FIN，進入 FIN_WAIT_1 狀態</li>\n<li>TCP B：收到 FIN，並回傳 ACK，進入 CLOSE_WAIT 狀態，並通知 Application 連線準備關閉</li>\n<li>TCP A：收到 ACK，進入 FIN_WAIT_2 狀態，並等待對方發出 FIN</li>\n<li>TCP B：確認 Application 處理完斷線請求，發出 FIN，並進入狀態 LAST_ACK</li>\n<li>TCP A：收到 FIN，並回傳 ACK，進入 TIME_WAIT 狀態，等待 2MSL 時間後正式關閉連線</li>\n<li>TCP B：收到 ACK，便直接關閉連線，進入 CLOSED 狀態</li>\n</ol>\n<p>名詞解釋：</p>\n<ul>\n<li>ESTABLISHED：表示已完成雙方連線的建立，可開始傳輸資料</li>\n<li>CLOSE_WAIT：等待連線關閉狀態，等待 Application 回應</li>\n<li>LAST_ACK：等待連線關閉狀態，等待對方回傳 ACK 後關閉連線</li>\n<li>FIN_WAIT_1：等待連線關閉狀態，等待對方回傳 ACK</li>\n<li>FIN_WAIT_2：等待連線關閉狀態，等待對方回傳 FIN</li>\n<li>TIME_WAIT：等待2MSL，保證遠端有收到其 ACK 關閉連線 (網路延遲問題)</li>\n<li>CLOSED：已關閉連線</li>\n<li>FIN：FINISH，表示關閉連線的請求</li>\n<li>ACK：Acknowledgement，表示發送的數據已收到無誤</li>\n</ul>\n<p>「TCP關閉連線」狀態流程圖</p>\n<p><img src=\"TCPIP-3.png\"></p>\n<p>最後發送 ACK 時，會進入 TIME_WAIT 狀態，要等 2MSL 時間後，這條連接才真正消失，所以從這邊知道「主動關閉連線」的一方會進入 TIME_WAIT 狀態</p>\n<blockquote>\n<p>什麼是 MSL 時間<br>最大分段壽命 MSL(Maximum Segment Lifetime)，是 TCP 協定規定封包在網絡中最長生存時間，超出時間後封包就會被丟棄。</p>\n<p>RFC793 定義 MSL 為 2 分鐘，不過實際上不同的作業系統可能有不同的設定，以 Linux 為例，通常是 30 秒，2MSL 就是 60 秒</p>\n</blockquote>\n<h2 id=\"為何-TIME-WAIT-狀態要等待-2MSL-的時間呢\"><a href=\"#為何-TIME-WAIT-狀態要等待-2MSL-的時間呢\" class=\"headerlink\" title=\"為何 TIME_WAIT 狀態要等待 2MSL 的時間呢?\"></a>為何 TIME_WAIT 狀態要等待 2MSL 的時間呢?</h2><p>Client/Server 都完成了四次交握，代表 Client/Server 都同意關閉連線，照理說應該可以直接回到 CLOSED 狀態(就像是建立連線時 SYN_SEND 狀態到 ESTABLISH 狀態那樣)，但是這邊我們必須要假設網路傳輸是不可靠的，因為我們無法保證最後傳送的 ACK 對方一定會收到，傳輸過程中可能因為種種原因(例如：網路延遲、丟包等…) 導致對方一直處於 LAST_ACK 狀態下的 SOCKET 因為逾時而未收到 ACK 而重發 FIN，所以 TIME_WAIT 狀態的作用就是用來重發可能遺失的 ACK。</p>\n<p>TIME_WAIT 狀態，是為了避免因為網路傳輸的種種原因而造成的 TCP 傳輸不可靠，而 TIME_WAIT 狀態可以最大限度的提升網路傳輸的可靠性。</p>\n<h2 id=\"完整-TCP「建立連線」與「關閉連線」之狀態圖\"><a href=\"#完整-TCP「建立連線」與「關閉連線」之狀態圖\" class=\"headerlink\" title=\"完整 TCP「建立連線」與「關閉連線」之狀態圖\"></a>完整 TCP「建立連線」與「關閉連線」之狀態圖</h2><p><img src=\"TCPIP-4.png\"></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://dev.twsiyuan.com/2017/09/tcp-states.html\">https://dev.twsiyuan.com/2017/09/tcp-states.html</a></li>\n<li><a href=\"https://www.gushiciku.cn/pl/p0aJ/zh-tw\">https://www.gushiciku.cn/pl/p0aJ/zh-tw</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前 Maintain A團隊的 K8s 時，有發生過 golang 寫的服務太多的 TIME_WAIT 導致 Pod 無法建立新的連線。 近期 Maintain B團隊的服務時，因為線上人數變多，擔心 Nginx 向 Upstream 發請求時，會不會造成太多的連線，然後有過多的 TIME_WAIT 現象，因為預設 Nginx 向 Upstream 發送請求是使用 http/1.0，會導致連線無法複用，所以當連線一多時，就很容易發生過多的 TIME_WAIT 狀態。</p>\n<p>所以本篇主要是在講解 TCP 協定在「建立連線」與「關閉連線」的過程，只要了解運作過程，就會知道 TIME_WAIT 狀態到底是如何產生的</p>","more":"<h2 id=\"TCP-建立連線\"><a href=\"#TCP-建立連線\" class=\"headerlink\" title=\"TCP 建立連線\"></a>TCP 建立連線</h2><p>依據 IETF 的標準文件 <a href=\"http://www.rfc-editor.org/rfc/rfc793.txt\">rfc793</a> 中所描述的情形，可分為以下四種不同狀況</p>\n<ul>\n<li>Basic 3-Way Handshake for Connection Synchronization</li>\n<li>Simultaneous Connection Synchronization</li>\n<li>Recovery from Old Duplicate SYN</li>\n<li>Half-Open Connection Discovery</li>\n</ul>\n<p>以下僅針對第一個 Basic 3-Way Handshake for Connection Synchronization 進行說明</p>\n<p>通常 TCP 連線建立流程，需要經過三向交握(three-way handshaking) 來建立連線</p>\n<p><img src=\"TCPIP-0.png\"></p>\n<ol>\n<li>Server 建立 TCB，開啟監聽連線，進入 LISTENING 狀態</li>\n<li>Client 主動發出連線請求 SYN，進入 SYN_SENT 狀態，並等待回應</li>\n<li>Server 收到 SYN 要求，回應連線 SYN,ACK，並進入 SYN_RCVD 狀態</li>\n<li>Client 收到 SYN,ACK 確認完成連線進入 ESTABLISHED 狀態，並送出 ACK</li>\n<li>Server 收到 ACK 確認連線完成，同時也進入 ESTABLISHED 狀態</li>\n</ol>\n<p>名詞解釋：</p>\n<ul>\n<li>CLOSED：已關閉連線，表示該主機的連線呈現關閉中</li>\n<li>LISTENING：監聽狀態，表示該主機被動等待連線請求</li>\n<li>SYN_SENT：表示已送出 SYN 訊息，並等待對方回應</li>\n<li>SYN_RCVD：表示已接收到對方的 SYN 訊息，並且送出 SYN,ACK，等待對方回應</li>\n<li>ESTABLISHED：表示已完成雙方連線的建立，可開始傳輸資料</li>\n<li>TCB：傳輸控制區塊(Transmission Control Block)，用來儲存 Server 端有關 TCP 的所有資訊</li>\n<li>SYN：Synchronous，表示與對方建立連線的請求</li>\n<li>ACK：Acknowledgement，表示發送的數據已收到無誤</li>\n</ul>\n<p>「TCP建立連線」狀態流程圖</p>\n<p><img src=\"TCPIP-1.png\"></p>\n<h2 id=\"TCP-關閉連線\"><a href=\"#TCP-關閉連線\" class=\"headerlink\" title=\"TCP 關閉連線\"></a>TCP 關閉連線</h2><p>依據 IETF 的標準文件 <a href=\"http://www.rfc-editor.org/rfc/rfc793.txt\">rfc793</a> 中所描述的情形，可分為以下二種不同狀況</p>\n<ul>\n<li>Normal Close Sequence</li>\n<li>Simultaneous Close Sequence</li>\n</ul>\n<p>以下僅針對第一個 Normal Close Sequence 進行說明</p>\n<p>TCP 關閉流程如下，需要經過四次交握 (four-way handshaking)，來確認雙方都停止收發數據，<strong>要注意的是可以是由 server 發起主動關閉，或是 client 發起主動關閉</strong>，但是「通常」都是 client 發起，因此下圖使用 TCP A 與 TCP B 表示，：</p>\n<p><img src=\"TCPIP-2.png\"></p>\n<ol>\n<li>TCP A：準備關閉連線，發出 FIN，進入 FIN_WAIT_1 狀態</li>\n<li>TCP B：收到 FIN，並回傳 ACK，進入 CLOSE_WAIT 狀態，並通知 Application 連線準備關閉</li>\n<li>TCP A：收到 ACK，進入 FIN_WAIT_2 狀態，並等待對方發出 FIN</li>\n<li>TCP B：確認 Application 處理完斷線請求，發出 FIN，並進入狀態 LAST_ACK</li>\n<li>TCP A：收到 FIN，並回傳 ACK，進入 TIME_WAIT 狀態，等待 2MSL 時間後正式關閉連線</li>\n<li>TCP B：收到 ACK，便直接關閉連線，進入 CLOSED 狀態</li>\n</ol>\n<p>名詞解釋：</p>\n<ul>\n<li>ESTABLISHED：表示已完成雙方連線的建立，可開始傳輸資料</li>\n<li>CLOSE_WAIT：等待連線關閉狀態，等待 Application 回應</li>\n<li>LAST_ACK：等待連線關閉狀態，等待對方回傳 ACK 後關閉連線</li>\n<li>FIN_WAIT_1：等待連線關閉狀態，等待對方回傳 ACK</li>\n<li>FIN_WAIT_2：等待連線關閉狀態，等待對方回傳 FIN</li>\n<li>TIME_WAIT：等待2MSL，保證遠端有收到其 ACK 關閉連線 (網路延遲問題)</li>\n<li>CLOSED：已關閉連線</li>\n<li>FIN：FINISH，表示關閉連線的請求</li>\n<li>ACK：Acknowledgement，表示發送的數據已收到無誤</li>\n</ul>\n<p>「TCP關閉連線」狀態流程圖</p>\n<p><img src=\"TCPIP-3.png\"></p>\n<p>最後發送 ACK 時，會進入 TIME_WAIT 狀態，要等 2MSL 時間後，這條連接才真正消失，所以從這邊知道「主動關閉連線」的一方會進入 TIME_WAIT 狀態</p>\n<blockquote>\n<p>什麼是 MSL 時間<br>最大分段壽命 MSL(Maximum Segment Lifetime)，是 TCP 協定規定封包在網絡中最長生存時間，超出時間後封包就會被丟棄。</p>\n<p>RFC793 定義 MSL 為 2 分鐘，不過實際上不同的作業系統可能有不同的設定，以 Linux 為例，通常是 30 秒，2MSL 就是 60 秒</p>\n</blockquote>\n<h2 id=\"為何-TIME-WAIT-狀態要等待-2MSL-的時間呢\"><a href=\"#為何-TIME-WAIT-狀態要等待-2MSL-的時間呢\" class=\"headerlink\" title=\"為何 TIME_WAIT 狀態要等待 2MSL 的時間呢?\"></a>為何 TIME_WAIT 狀態要等待 2MSL 的時間呢?</h2><p>Client/Server 都完成了四次交握，代表 Client/Server 都同意關閉連線，照理說應該可以直接回到 CLOSED 狀態(就像是建立連線時 SYN_SEND 狀態到 ESTABLISH 狀態那樣)，但是這邊我們必須要假設網路傳輸是不可靠的，因為我們無法保證最後傳送的 ACK 對方一定會收到，傳輸過程中可能因為種種原因(例如：網路延遲、丟包等…) 導致對方一直處於 LAST_ACK 狀態下的 SOCKET 因為逾時而未收到 ACK 而重發 FIN，所以 TIME_WAIT 狀態的作用就是用來重發可能遺失的 ACK。</p>\n<p>TIME_WAIT 狀態，是為了避免因為網路傳輸的種種原因而造成的 TCP 傳輸不可靠，而 TIME_WAIT 狀態可以最大限度的提升網路傳輸的可靠性。</p>\n<h2 id=\"完整-TCP「建立連線」與「關閉連線」之狀態圖\"><a href=\"#完整-TCP「建立連線」與「關閉連線」之狀態圖\" class=\"headerlink\" title=\"完整 TCP「建立連線」與「關閉連線」之狀態圖\"></a>完整 TCP「建立連線」與「關閉連線」之狀態圖</h2><p><img src=\"TCPIP-4.png\"></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://dev.twsiyuan.com/2017/09/tcp-states.html\">https://dev.twsiyuan.com/2017/09/tcp-states.html</a></li>\n<li><a href=\"https://www.gushiciku.cn/pl/p0aJ/zh-tw\">https://www.gushiciku.cn/pl/p0aJ/zh-tw</a></li>\n</ul>"},{"title":"使用GitHub Pages","date":"2021-05-03T06:58:14.000Z","_content":"\n## 前言\n\n當我們開發程式時，一定都會想到 GitHub 或 GiLab 等版控的工具，今天要來介紹一下 GitHub Pages，GitHub Pages 是由 GitHub 所提供的服務，可以讓 Repository 內的靜態檔案，以網頁的方式呈現出來，這代表著 GitHub Pages 提供了 Web Server 的服務，但僅僅支援靜態頁面，如果是後端相關的 code，例如: .php 的副檔名，GitHub Pages 是不會有作用的，所以很多人會使用 GitHub Pages 來架設自己的部落格(Blog)。\n\n<!--more-->\n\n## 如何使用 GitHub Pages\n\n這邊假設大家對於 Git 的使用都已經熟悉了，在依據下面幾個步驟就可以完成 GitHub Pages\n\n- 新增專案(Repository)\n- 建立測試檔\n- 測試網頁功能\n\n### 新增專案(Repository)\n\n在專案名稱的地方，填寫「`username`.github.io」，這個 `username` 指的是自己的 GitHub 帳號。 並設定為 Public，不建立 README.md 的檔案，後續要新增測試檔案時再自己針對目錄做 Git Initial。\n\n> 要使用 GitHub Pages，Repository 需要設定為 Public\n\n![](1.png)\n\n### 建立測試檔\n\n接下來，在本機建立一個目錄並進入\n\n```\n$ mkdir username.github.io\n$ cd username.github.io\n```\n\n並寫一個測試的首頁 index.html\n\n```\necho \"Hello World\" > index.html\n```\n\n初始化目錄並設定 Rmote Repository\n\n```\n$ git init\n$ git remote add origin git@github.com:username/username.github.io.git\n```\n\n> 上述 username 請填入自己的 GitHub 帳號\n\n提交檔案並推上 GitHub\n\n```\n$ git add --all\n$ git commit -m \"Initial commit\"\n$ git push -u origin master\n```\n\n### 測試網頁功能\n\n成功推送後，可以開啟 https://`username`.github.io 試試看，會顯示「Hello World」\n\n> 測試的時候，可以的話盡量開啟無痕視窗來測試，這樣比較不會因為多次修改而造成 cache 的問題\n\n## 參考資料\n\n- https://pages.github.com/\n","source":"_posts/使用GitHub-Pages.md","raw":"---\ntitle: 使用GitHub Pages\ntags:\n  - Hexo\n  - GitHub\n  - GitHub Pages\n  - blog\ndate: 2021-05-03 14:58:14\n---\n\n## 前言\n\n當我們開發程式時，一定都會想到 GitHub 或 GiLab 等版控的工具，今天要來介紹一下 GitHub Pages，GitHub Pages 是由 GitHub 所提供的服務，可以讓 Repository 內的靜態檔案，以網頁的方式呈現出來，這代表著 GitHub Pages 提供了 Web Server 的服務，但僅僅支援靜態頁面，如果是後端相關的 code，例如: .php 的副檔名，GitHub Pages 是不會有作用的，所以很多人會使用 GitHub Pages 來架設自己的部落格(Blog)。\n\n<!--more-->\n\n## 如何使用 GitHub Pages\n\n這邊假設大家對於 Git 的使用都已經熟悉了，在依據下面幾個步驟就可以完成 GitHub Pages\n\n- 新增專案(Repository)\n- 建立測試檔\n- 測試網頁功能\n\n### 新增專案(Repository)\n\n在專案名稱的地方，填寫「`username`.github.io」，這個 `username` 指的是自己的 GitHub 帳號。 並設定為 Public，不建立 README.md 的檔案，後續要新增測試檔案時再自己針對目錄做 Git Initial。\n\n> 要使用 GitHub Pages，Repository 需要設定為 Public\n\n![](1.png)\n\n### 建立測試檔\n\n接下來，在本機建立一個目錄並進入\n\n```\n$ mkdir username.github.io\n$ cd username.github.io\n```\n\n並寫一個測試的首頁 index.html\n\n```\necho \"Hello World\" > index.html\n```\n\n初始化目錄並設定 Rmote Repository\n\n```\n$ git init\n$ git remote add origin git@github.com:username/username.github.io.git\n```\n\n> 上述 username 請填入自己的 GitHub 帳號\n\n提交檔案並推上 GitHub\n\n```\n$ git add --all\n$ git commit -m \"Initial commit\"\n$ git push -u origin master\n```\n\n### 測試網頁功能\n\n成功推送後，可以開啟 https://`username`.github.io 試試看，會顯示「Hello World」\n\n> 測試的時候，可以的話盡量開啟無痕視窗來測試，這樣比較不會因為多次修改而造成 cache 的問題\n\n## 參考資料\n\n- https://pages.github.com/\n","slug":"使用GitHub-Pages","published":1,"updated":"2023-10-04T15:33:37.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcb7001imxv8h34fbzx4","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>當我們開發程式時，一定都會想到 GitHub 或 GiLab 等版控的工具，今天要來介紹一下 GitHub Pages，GitHub Pages 是由 GitHub 所提供的服務，可以讓 Repository 內的靜態檔案，以網頁的方式呈現出來，這代表著 GitHub Pages 提供了 Web Server 的服務，但僅僅支援靜態頁面，如果是後端相關的 code，例如: .php 的副檔名，GitHub Pages 是不會有作用的，所以很多人會使用 GitHub Pages 來架設自己的部落格(Blog)。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"如何使用-GitHub-Pages\"><a href=\"#如何使用-GitHub-Pages\" class=\"headerlink\" title=\"如何使用 GitHub Pages\"></a>如何使用 GitHub Pages</h2><p>這邊假設大家對於 Git 的使用都已經熟悉了，在依據下面幾個步驟就可以完成 GitHub Pages</p>\n<ul>\n<li>新增專案(Repository)</li>\n<li>建立測試檔</li>\n<li>測試網頁功能</li>\n</ul>\n<h3 id=\"新增專案-Repository\"><a href=\"#新增專案-Repository\" class=\"headerlink\" title=\"新增專案(Repository)\"></a>新增專案(Repository)</h3><p>在專案名稱的地方，填寫「<code>username</code>.github.io」，這個 <code>username</code> 指的是自己的 GitHub 帳號。 並設定為 Public，不建立 README.md 的檔案，後續要新增測試檔案時再自己針對目錄做 Git Initial。</p>\n<blockquote>\n<p>要使用 GitHub Pages，Repository 需要設定為 Public</p>\n</blockquote>\n<p><img src=\"1.png\"></p>\n<h3 id=\"建立測試檔\"><a href=\"#建立測試檔\" class=\"headerlink\" title=\"建立測試檔\"></a>建立測試檔</h3><p>接下來，在本機建立一個目錄並進入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir username.github.io</span><br><span class=\"line\">$ cd username.github.io</span><br></pre></td></tr></table></figure>\n\n<p>並寫一個測試的首頁 index.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;Hello World&quot; &gt; index.html</span><br></pre></td></tr></table></figure>\n\n<p>初始化目錄並設定 Rmote Repository</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ git remote add origin git@github.com:username&#x2F;username.github.io.git</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上述 username 請填入自己的 GitHub 帳號</p>\n</blockquote>\n<p>提交檔案並推上 GitHub</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add --all</span><br><span class=\"line\">$ git commit -m &quot;Initial commit&quot;</span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"測試網頁功能\"><a href=\"#測試網頁功能\" class=\"headerlink\" title=\"測試網頁功能\"></a>測試網頁功能</h3><p>成功推送後，可以開啟 https://<code>username</code>.github.io 試試看，會顯示「Hello World」</p>\n<blockquote>\n<p>測試的時候，可以的話盡量開啟無痕視窗來測試，這樣比較不會因為多次修改而造成 cache 的問題</p>\n</blockquote>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://pages.github.com/\">https://pages.github.com/</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>當我們開發程式時，一定都會想到 GitHub 或 GiLab 等版控的工具，今天要來介紹一下 GitHub Pages，GitHub Pages 是由 GitHub 所提供的服務，可以讓 Repository 內的靜態檔案，以網頁的方式呈現出來，這代表著 GitHub Pages 提供了 Web Server 的服務，但僅僅支援靜態頁面，如果是後端相關的 code，例如: .php 的副檔名，GitHub Pages 是不會有作用的，所以很多人會使用 GitHub Pages 來架設自己的部落格(Blog)。</p>","more":"<h2 id=\"如何使用-GitHub-Pages\"><a href=\"#如何使用-GitHub-Pages\" class=\"headerlink\" title=\"如何使用 GitHub Pages\"></a>如何使用 GitHub Pages</h2><p>這邊假設大家對於 Git 的使用都已經熟悉了，在依據下面幾個步驟就可以完成 GitHub Pages</p>\n<ul>\n<li>新增專案(Repository)</li>\n<li>建立測試檔</li>\n<li>測試網頁功能</li>\n</ul>\n<h3 id=\"新增專案-Repository\"><a href=\"#新增專案-Repository\" class=\"headerlink\" title=\"新增專案(Repository)\"></a>新增專案(Repository)</h3><p>在專案名稱的地方，填寫「<code>username</code>.github.io」，這個 <code>username</code> 指的是自己的 GitHub 帳號。 並設定為 Public，不建立 README.md 的檔案，後續要新增測試檔案時再自己針對目錄做 Git Initial。</p>\n<blockquote>\n<p>要使用 GitHub Pages，Repository 需要設定為 Public</p>\n</blockquote>\n<p><img src=\"1.png\"></p>\n<h3 id=\"建立測試檔\"><a href=\"#建立測試檔\" class=\"headerlink\" title=\"建立測試檔\"></a>建立測試檔</h3><p>接下來，在本機建立一個目錄並進入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir username.github.io</span><br><span class=\"line\">$ cd username.github.io</span><br></pre></td></tr></table></figure>\n\n<p>並寫一個測試的首頁 index.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;Hello World&quot; &gt; index.html</span><br></pre></td></tr></table></figure>\n\n<p>初始化目錄並設定 Rmote Repository</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ git remote add origin git@github.com:username&#x2F;username.github.io.git</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上述 username 請填入自己的 GitHub 帳號</p>\n</blockquote>\n<p>提交檔案並推上 GitHub</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add --all</span><br><span class=\"line\">$ git commit -m &quot;Initial commit&quot;</span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"測試網頁功能\"><a href=\"#測試網頁功能\" class=\"headerlink\" title=\"測試網頁功能\"></a>測試網頁功能</h3><p>成功推送後，可以開啟 https://<code>username</code>.github.io 試試看，會顯示「Hello World」</p>\n<blockquote>\n<p>測試的時候，可以的話盡量開啟無痕視窗來測試，這樣比較不會因為多次修改而造成 cache 的問題</p>\n</blockquote>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://pages.github.com/\">https://pages.github.com/</a></li>\n</ul>"},{"title":"在 K8s 使用 FTP","date":"2021-04-26T08:15:09.000Z","_content":"\n## 前言\n\n近期因公司內部的需求，需要在本機存取 K8s 內持久化儲存的檔案，原先想使用 NFS 架構來做掛載存取，但是因為這樣有點過於麻煩，後來才想使用 FTP 來實現，下面說明如何在 K8s 實現 FTP 功能，讓本機環境可以存取到持久化硬碟。\n\n<!--more-->\n\n這邊實現的是 SFTP 使用 22 port 連線，存取認證方式可以是使用「金鑰」或是「帳號/密碼驗證」\n\n這邊先簡單羅列步驟：\n1. 產生 ssh 認證使用的金鑰\n2. 編寫 Dockerfile\n3. 編寫 K8s YAML 檔案\n4. 暴露一個 External LoadBalace\n5. 使用 FileZilla 測試\n\n> 環境是使用 GKE(Google Kubernetes Engine)\n\n## 產生 ssh 金鑰\n\n產生 ssh 金鑰是為了讓後續連線時，可以使用金鑰作為驗證，這邊是使用 Mac 的終端機產生，指令參照以下\n\n```\n$ ssh-keygen -t rsa -b 4096 -f sftp_key\n```\n\n> Passphrase 設不設定都可以，如果有設定的話，最後以 FileZilla 測試時，private key 需要額外產生 .ppk 檔才能使用，後續會講解\n\n完成後，在你目前位置的目錄上會出現一對金鑰，一個為 public key 另一個為 private key\n\n> 一般來說，我們都會習慣把金鑰統一放置在本機家目錄底下的 .ssh 目錄內，如果自己有習慣的放置地方也可以放到自己習慣的位置\n\n## 編寫 Dockerfile\n\n我們需要將 public key 放進映像檔中，這樣在連線時才有辦法做金鑰驗證。 要實現這方式有兩個：\n\n- 在 ftp 服務啟動時以 volume 方式掛載 public key 到相對位置\n- 直接複製到映像檔內\n\n這邊採用的是第二種方式，編寫 Dockerfile 並將 public key 放進去，我們要將 public key 放到使用者家目錄底下的 `./.ssh/keys` 位置，所以我們需要建立相對應路徑，並將複製進去，可以參考以下\n\n```\nFROM atmoz/sftp:alpine\n\nRUN mkdir -p /home/rd/.ssh/keys\nCOPY ./sftp_key.pub /home/rd/.ssh/keys/\n```\n\n這邊使用的 base image 是 atmoz/sftp:alpine，當然你也可以選擇其他版本(eg. debian...)。\n\n最後進行 docker build 的動作，並上傳到存放區\n\n```\n$ docker build --no-cache -t custom-sftp:alpine -f Dockerfile .\n```\n\n## 編寫 K8s YAML 檔案\n\n因為我們要運行在 GKE 上面，需要編寫 YAML 以便運行與後續管理，這邊是使用 Deployment 的 Object，以下只截取部片重要片段，其餘部分需要自行補齊\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ftp\n  namespace: default\n...\n    spec:\n      restartPolicy: Always\n      containers:\n      - name: ftp\n        image: [修改為剛剛上傳的映像檔路徑]\n        imagePullPolicy: Always\n        ports:\n          - containerPort: 22\n        args:\n          - rd::::upload\n        volumeMounts:\n          - name: volume-test\n            mountPath: /home/rd/upload/test\n            subPath: upload-image\n      volumes:\n        - name: volume-test\n          persistentVolumeClaim:\n            claimName: mypvc\n```\n\n### snippet 解析\n\n```\nargs:\n  - rd::::upload\n```\n\n啟動參數的意義，這邊是 `rd::::upload`，這表示使用者帳號為rd，並且在家目錄底下建立一個 upload 的目錄(`/home/rd/upload`)，以便做存取，這樣我們就能夠將持久化硬碟掛載到 `/home/rd/upload` 路徑底下。\n\n> 使用者帳號可以自訂，不一定要使用rd\n\n可以看到 rd 的帳號並沒有設定密碼，在沒有設定密碼的情況下，表示認證會使用金鑰認證，那如果要使用密碼驗證可以這樣表示\n\n```\nrd:12345:::upload\n```\n\n這樣表示密碼為 12345\n\n## 暴露一個 External LoadBalace\n\n暴露外部 LB 這樣可以讓本機去存取到 GKE 內的服務，但是白名單記得要設定，以提高安全性\n\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: ftp-proxy\n  namespace: default\nspec:\n  type: LoadBalancer\n  loadBalancerIP: [填入自己的外網IP]\n  loadBalancerSourceRanges:\n  - [填入自己的白名單]\n  ports:\n    - name: ssh\n      port: 22\n      protocol: TCP\n      targetPort: 22\n  selector:\n    app: ftp\n```\n\n### snippet 解析\n\n```\n...\nports:\n  - name: ssh\n    port: 22\n    protocol: TCP\n    targetPort: 22\n...\n```\n\n其中這段 port 有沒有要改成其他非預設 22 port 都可以，以安全性角度來說可以做個修改，例如 `port: 14322`。 這樣連線時就使用 14322 做連線，GKE 就會自動做 port 的 mapping。\n\n## 使用 FileZilla 測試\n\n最後我們可以下載 FileZilla Client 來測試，如果剛才編寫 Deployment 的 YAML 時，啟動參數有設定密碼的話，就可以直接填入相關資訊做連線測試了。\n\n填入資訊\n- 主機: 填入External LoadBalance 的 IP\n- 使用者名稱: 填入啟動參數設定的使用者\n- 密碼: 填入啟動參數設定的密碼\n- 連接埠: 預設是22，如果剛剛在編寫 External LoadBalace 時，有修改 port，這邊記得要跟著變\n\n如果是使用金鑰驗證，我們要先設定好 private key 的位置，開啟 FileZilla Client，依照下圖點選到設定位置\n\n點選 編輯 → 設定\n\n![](0.png)\n\n選擇 SFTP 並點選「加入金鑰檔案」，此時會請你選擇 private key 的位置\n\n![](1.png)\n\n這邊要注意一下，如果一開始產生金鑰時有設定 passphrase，會跳出此視窗，主要是因為他需要將 .key 轉成 .ppk，這邊直接點「是」\n\n![](2.png)\n\n輸入設定的 passphrase\n\n![](3.png)\n\n選擇鑰儲存 .ppk 的位置與命名\n\n![](4.png)\n\n最後再回到主畫面將連線資訊填入，密碼不用填寫，當連線後，會請你輸入 passphrase 的密碼\n","source":"_posts/在K8s使用FTP.md","raw":"---\ntitle: 在 K8s 使用 FTP\ndate: 2021-04-26 16:15:09\ntags:\n  - GKE\n  - GCP\n  - Google Cloud Platform\n  - K8s\n  - Kubernetes\n  - FTP\ncategories:\n  - GKE\n---\n\n## 前言\n\n近期因公司內部的需求，需要在本機存取 K8s 內持久化儲存的檔案，原先想使用 NFS 架構來做掛載存取，但是因為這樣有點過於麻煩，後來才想使用 FTP 來實現，下面說明如何在 K8s 實現 FTP 功能，讓本機環境可以存取到持久化硬碟。\n\n<!--more-->\n\n這邊實現的是 SFTP 使用 22 port 連線，存取認證方式可以是使用「金鑰」或是「帳號/密碼驗證」\n\n這邊先簡單羅列步驟：\n1. 產生 ssh 認證使用的金鑰\n2. 編寫 Dockerfile\n3. 編寫 K8s YAML 檔案\n4. 暴露一個 External LoadBalace\n5. 使用 FileZilla 測試\n\n> 環境是使用 GKE(Google Kubernetes Engine)\n\n## 產生 ssh 金鑰\n\n產生 ssh 金鑰是為了讓後續連線時，可以使用金鑰作為驗證，這邊是使用 Mac 的終端機產生，指令參照以下\n\n```\n$ ssh-keygen -t rsa -b 4096 -f sftp_key\n```\n\n> Passphrase 設不設定都可以，如果有設定的話，最後以 FileZilla 測試時，private key 需要額外產生 .ppk 檔才能使用，後續會講解\n\n完成後，在你目前位置的目錄上會出現一對金鑰，一個為 public key 另一個為 private key\n\n> 一般來說，我們都會習慣把金鑰統一放置在本機家目錄底下的 .ssh 目錄內，如果自己有習慣的放置地方也可以放到自己習慣的位置\n\n## 編寫 Dockerfile\n\n我們需要將 public key 放進映像檔中，這樣在連線時才有辦法做金鑰驗證。 要實現這方式有兩個：\n\n- 在 ftp 服務啟動時以 volume 方式掛載 public key 到相對位置\n- 直接複製到映像檔內\n\n這邊採用的是第二種方式，編寫 Dockerfile 並將 public key 放進去，我們要將 public key 放到使用者家目錄底下的 `./.ssh/keys` 位置，所以我們需要建立相對應路徑，並將複製進去，可以參考以下\n\n```\nFROM atmoz/sftp:alpine\n\nRUN mkdir -p /home/rd/.ssh/keys\nCOPY ./sftp_key.pub /home/rd/.ssh/keys/\n```\n\n這邊使用的 base image 是 atmoz/sftp:alpine，當然你也可以選擇其他版本(eg. debian...)。\n\n最後進行 docker build 的動作，並上傳到存放區\n\n```\n$ docker build --no-cache -t custom-sftp:alpine -f Dockerfile .\n```\n\n## 編寫 K8s YAML 檔案\n\n因為我們要運行在 GKE 上面，需要編寫 YAML 以便運行與後續管理，這邊是使用 Deployment 的 Object，以下只截取部片重要片段，其餘部分需要自行補齊\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ftp\n  namespace: default\n...\n    spec:\n      restartPolicy: Always\n      containers:\n      - name: ftp\n        image: [修改為剛剛上傳的映像檔路徑]\n        imagePullPolicy: Always\n        ports:\n          - containerPort: 22\n        args:\n          - rd::::upload\n        volumeMounts:\n          - name: volume-test\n            mountPath: /home/rd/upload/test\n            subPath: upload-image\n      volumes:\n        - name: volume-test\n          persistentVolumeClaim:\n            claimName: mypvc\n```\n\n### snippet 解析\n\n```\nargs:\n  - rd::::upload\n```\n\n啟動參數的意義，這邊是 `rd::::upload`，這表示使用者帳號為rd，並且在家目錄底下建立一個 upload 的目錄(`/home/rd/upload`)，以便做存取，這樣我們就能夠將持久化硬碟掛載到 `/home/rd/upload` 路徑底下。\n\n> 使用者帳號可以自訂，不一定要使用rd\n\n可以看到 rd 的帳號並沒有設定密碼，在沒有設定密碼的情況下，表示認證會使用金鑰認證，那如果要使用密碼驗證可以這樣表示\n\n```\nrd:12345:::upload\n```\n\n這樣表示密碼為 12345\n\n## 暴露一個 External LoadBalace\n\n暴露外部 LB 這樣可以讓本機去存取到 GKE 內的服務，但是白名單記得要設定，以提高安全性\n\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: ftp-proxy\n  namespace: default\nspec:\n  type: LoadBalancer\n  loadBalancerIP: [填入自己的外網IP]\n  loadBalancerSourceRanges:\n  - [填入自己的白名單]\n  ports:\n    - name: ssh\n      port: 22\n      protocol: TCP\n      targetPort: 22\n  selector:\n    app: ftp\n```\n\n### snippet 解析\n\n```\n...\nports:\n  - name: ssh\n    port: 22\n    protocol: TCP\n    targetPort: 22\n...\n```\n\n其中這段 port 有沒有要改成其他非預設 22 port 都可以，以安全性角度來說可以做個修改，例如 `port: 14322`。 這樣連線時就使用 14322 做連線，GKE 就會自動做 port 的 mapping。\n\n## 使用 FileZilla 測試\n\n最後我們可以下載 FileZilla Client 來測試，如果剛才編寫 Deployment 的 YAML 時，啟動參數有設定密碼的話，就可以直接填入相關資訊做連線測試了。\n\n填入資訊\n- 主機: 填入External LoadBalance 的 IP\n- 使用者名稱: 填入啟動參數設定的使用者\n- 密碼: 填入啟動參數設定的密碼\n- 連接埠: 預設是22，如果剛剛在編寫 External LoadBalace 時，有修改 port，這邊記得要跟著變\n\n如果是使用金鑰驗證，我們要先設定好 private key 的位置，開啟 FileZilla Client，依照下圖點選到設定位置\n\n點選 編輯 → 設定\n\n![](0.png)\n\n選擇 SFTP 並點選「加入金鑰檔案」，此時會請你選擇 private key 的位置\n\n![](1.png)\n\n這邊要注意一下，如果一開始產生金鑰時有設定 passphrase，會跳出此視窗，主要是因為他需要將 .key 轉成 .ppk，這邊直接點「是」\n\n![](2.png)\n\n輸入設定的 passphrase\n\n![](3.png)\n\n選擇鑰儲存 .ppk 的位置與命名\n\n![](4.png)\n\n最後再回到主畫面將連線資訊填入，密碼不用填寫，當連線後，會請你輸入 passphrase 的密碼\n","slug":"在K8s使用FTP","published":1,"updated":"2023-10-04T15:33:37.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcb8001lmxv82aui3de0","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>近期因公司內部的需求，需要在本機存取 K8s 內持久化儲存的檔案，原先想使用 NFS 架構來做掛載存取，但是因為這樣有點過於麻煩，後來才想使用 FTP 來實現，下面說明如何在 K8s 實現 FTP 功能，讓本機環境可以存取到持久化硬碟。</p>\n<span id=\"more\"></span>\n\n<p>這邊實現的是 SFTP 使用 22 port 連線，存取認證方式可以是使用「金鑰」或是「帳號/密碼驗證」</p>\n<p>這邊先簡單羅列步驟：</p>\n<ol>\n<li>產生 ssh 認證使用的金鑰</li>\n<li>編寫 Dockerfile</li>\n<li>編寫 K8s YAML 檔案</li>\n<li>暴露一個 External LoadBalace</li>\n<li>使用 FileZilla 測試</li>\n</ol>\n<blockquote>\n<p>環境是使用 GKE(Google Kubernetes Engine)</p>\n</blockquote>\n<h2 id=\"產生-ssh-金鑰\"><a href=\"#產生-ssh-金鑰\" class=\"headerlink\" title=\"產生 ssh 金鑰\"></a>產生 ssh 金鑰</h2><p>產生 ssh 金鑰是為了讓後續連線時，可以使用金鑰作為驗證，這邊是使用 Mac 的終端機產生，指令參照以下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -b 4096 -f sftp_key</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Passphrase 設不設定都可以，如果有設定的話，最後以 FileZilla 測試時，private key 需要額外產生 .ppk 檔才能使用，後續會講解</p>\n</blockquote>\n<p>完成後，在你目前位置的目錄上會出現一對金鑰，一個為 public key 另一個為 private key</p>\n<blockquote>\n<p>一般來說，我們都會習慣把金鑰統一放置在本機家目錄底下的 .ssh 目錄內，如果自己有習慣的放置地方也可以放到自己習慣的位置</p>\n</blockquote>\n<h2 id=\"編寫-Dockerfile\"><a href=\"#編寫-Dockerfile\" class=\"headerlink\" title=\"編寫 Dockerfile\"></a>編寫 Dockerfile</h2><p>我們需要將 public key 放進映像檔中，這樣在連線時才有辦法做金鑰驗證。 要實現這方式有兩個：</p>\n<ul>\n<li>在 ftp 服務啟動時以 volume 方式掛載 public key 到相對位置</li>\n<li>直接複製到映像檔內</li>\n</ul>\n<p>這邊採用的是第二種方式，編寫 Dockerfile 並將 public key 放進去，我們要將 public key 放到使用者家目錄底下的 <code>./.ssh/keys</code> 位置，所以我們需要建立相對應路徑，並將複製進去，可以參考以下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM atmoz&#x2F;sftp:alpine</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir -p &#x2F;home&#x2F;rd&#x2F;.ssh&#x2F;keys</span><br><span class=\"line\">COPY .&#x2F;sftp_key.pub &#x2F;home&#x2F;rd&#x2F;.ssh&#x2F;keys&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>這邊使用的 base image 是 atmoz/sftp:alpine，當然你也可以選擇其他版本(eg. debian…)。</p>\n<p>最後進行 docker build 的動作，並上傳到存放區</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build --no-cache -t custom-sftp:alpine -f Dockerfile .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"編寫-K8s-YAML-檔案\"><a href=\"#編寫-K8s-YAML-檔案\" class=\"headerlink\" title=\"編寫 K8s YAML 檔案\"></a>編寫 K8s YAML 檔案</h2><p>因為我們要運行在 GKE 上面，需要編寫 YAML 以便運行與後續管理，這邊是使用 Deployment 的 Object，以下只截取部片重要片段，其餘部分需要自行補齊</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apps&#x2F;v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ftp</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">...</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      restartPolicy: Always</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: ftp</span><br><span class=\"line\">        image: [修改為剛剛上傳的映像檔路徑]</span><br><span class=\"line\">        imagePullPolicy: Always</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">          - containerPort: 22</span><br><span class=\"line\">        args:</span><br><span class=\"line\">          - rd::::upload</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">          - name: volume-test</span><br><span class=\"line\">            mountPath: &#x2F;home&#x2F;rd&#x2F;upload&#x2F;test</span><br><span class=\"line\">            subPath: upload-image</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: volume-test</span><br><span class=\"line\">          persistentVolumeClaim:</span><br><span class=\"line\">            claimName: mypvc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"snippet-解析\"><a href=\"#snippet-解析\" class=\"headerlink\" title=\"snippet 解析\"></a>snippet 解析</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">args:</span><br><span class=\"line\">  - rd::::upload</span><br></pre></td></tr></table></figure>\n\n<p>啟動參數的意義，這邊是 <code>rd::::upload</code>，這表示使用者帳號為rd，並且在家目錄底下建立一個 upload 的目錄(<code>/home/rd/upload</code>)，以便做存取，這樣我們就能夠將持久化硬碟掛載到 <code>/home/rd/upload</code> 路徑底下。</p>\n<blockquote>\n<p>使用者帳號可以自訂，不一定要使用rd</p>\n</blockquote>\n<p>可以看到 rd 的帳號並沒有設定密碼，在沒有設定密碼的情況下，表示認證會使用金鑰認證，那如果要使用密碼驗證可以這樣表示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rd:12345:::upload</span><br></pre></td></tr></table></figure>\n\n<p>這樣表示密碼為 12345</p>\n<h2 id=\"暴露一個-External-LoadBalace\"><a href=\"#暴露一個-External-LoadBalace\" class=\"headerlink\" title=\"暴露一個 External LoadBalace\"></a>暴露一個 External LoadBalace</h2><p>暴露外部 LB 這樣可以讓本機去存取到 GKE 內的服務，但是白名單記得要設定，以提高安全性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ftp-proxy</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: LoadBalancer</span><br><span class=\"line\">  loadBalancerIP: [填入自己的外網IP]</span><br><span class=\"line\">  loadBalancerSourceRanges:</span><br><span class=\"line\">  - [填入自己的白名單]</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - name: ssh</span><br><span class=\"line\">      port: 22</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">      targetPort: 22</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: ftp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"snippet-解析-1\"><a href=\"#snippet-解析-1\" class=\"headerlink\" title=\"snippet 解析\"></a>snippet 解析</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">ports:</span><br><span class=\"line\">  - name: ssh</span><br><span class=\"line\">    port: 22</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 22</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>其中這段 port 有沒有要改成其他非預設 22 port 都可以，以安全性角度來說可以做個修改，例如 <code>port: 14322</code>。 這樣連線時就使用 14322 做連線，GKE 就會自動做 port 的 mapping。</p>\n<h2 id=\"使用-FileZilla-測試\"><a href=\"#使用-FileZilla-測試\" class=\"headerlink\" title=\"使用 FileZilla 測試\"></a>使用 FileZilla 測試</h2><p>最後我們可以下載 FileZilla Client 來測試，如果剛才編寫 Deployment 的 YAML 時，啟動參數有設定密碼的話，就可以直接填入相關資訊做連線測試了。</p>\n<p>填入資訊</p>\n<ul>\n<li>主機: 填入External LoadBalance 的 IP</li>\n<li>使用者名稱: 填入啟動參數設定的使用者</li>\n<li>密碼: 填入啟動參數設定的密碼</li>\n<li>連接埠: 預設是22，如果剛剛在編寫 External LoadBalace 時，有修改 port，這邊記得要跟著變</li>\n</ul>\n<p>如果是使用金鑰驗證，我們要先設定好 private key 的位置，開啟 FileZilla Client，依照下圖點選到設定位置</p>\n<p>點選 編輯 → 設定</p>\n<p><img src=\"0.png\"></p>\n<p>選擇 SFTP 並點選「加入金鑰檔案」，此時會請你選擇 private key 的位置</p>\n<p><img src=\"1.png\"></p>\n<p>這邊要注意一下，如果一開始產生金鑰時有設定 passphrase，會跳出此視窗，主要是因為他需要將 .key 轉成 .ppk，這邊直接點「是」</p>\n<p><img src=\"2.png\"></p>\n<p>輸入設定的 passphrase</p>\n<p><img src=\"3.png\"></p>\n<p>選擇鑰儲存 .ppk 的位置與命名</p>\n<p><img src=\"4.png\"></p>\n<p>最後再回到主畫面將連線資訊填入，密碼不用填寫，當連線後，會請你輸入 passphrase 的密碼</p>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>近期因公司內部的需求，需要在本機存取 K8s 內持久化儲存的檔案，原先想使用 NFS 架構來做掛載存取，但是因為這樣有點過於麻煩，後來才想使用 FTP 來實現，下面說明如何在 K8s 實現 FTP 功能，讓本機環境可以存取到持久化硬碟。</p>","more":"<p>這邊實現的是 SFTP 使用 22 port 連線，存取認證方式可以是使用「金鑰」或是「帳號/密碼驗證」</p>\n<p>這邊先簡單羅列步驟：</p>\n<ol>\n<li>產生 ssh 認證使用的金鑰</li>\n<li>編寫 Dockerfile</li>\n<li>編寫 K8s YAML 檔案</li>\n<li>暴露一個 External LoadBalace</li>\n<li>使用 FileZilla 測試</li>\n</ol>\n<blockquote>\n<p>環境是使用 GKE(Google Kubernetes Engine)</p>\n</blockquote>\n<h2 id=\"產生-ssh-金鑰\"><a href=\"#產生-ssh-金鑰\" class=\"headerlink\" title=\"產生 ssh 金鑰\"></a>產生 ssh 金鑰</h2><p>產生 ssh 金鑰是為了讓後續連線時，可以使用金鑰作為驗證，這邊是使用 Mac 的終端機產生，指令參照以下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -b 4096 -f sftp_key</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Passphrase 設不設定都可以，如果有設定的話，最後以 FileZilla 測試時，private key 需要額外產生 .ppk 檔才能使用，後續會講解</p>\n</blockquote>\n<p>完成後，在你目前位置的目錄上會出現一對金鑰，一個為 public key 另一個為 private key</p>\n<blockquote>\n<p>一般來說，我們都會習慣把金鑰統一放置在本機家目錄底下的 .ssh 目錄內，如果自己有習慣的放置地方也可以放到自己習慣的位置</p>\n</blockquote>\n<h2 id=\"編寫-Dockerfile\"><a href=\"#編寫-Dockerfile\" class=\"headerlink\" title=\"編寫 Dockerfile\"></a>編寫 Dockerfile</h2><p>我們需要將 public key 放進映像檔中，這樣在連線時才有辦法做金鑰驗證。 要實現這方式有兩個：</p>\n<ul>\n<li>在 ftp 服務啟動時以 volume 方式掛載 public key 到相對位置</li>\n<li>直接複製到映像檔內</li>\n</ul>\n<p>這邊採用的是第二種方式，編寫 Dockerfile 並將 public key 放進去，我們要將 public key 放到使用者家目錄底下的 <code>./.ssh/keys</code> 位置，所以我們需要建立相對應路徑，並將複製進去，可以參考以下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM atmoz&#x2F;sftp:alpine</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir -p &#x2F;home&#x2F;rd&#x2F;.ssh&#x2F;keys</span><br><span class=\"line\">COPY .&#x2F;sftp_key.pub &#x2F;home&#x2F;rd&#x2F;.ssh&#x2F;keys&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>這邊使用的 base image 是 atmoz/sftp:alpine，當然你也可以選擇其他版本(eg. debian…)。</p>\n<p>最後進行 docker build 的動作，並上傳到存放區</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build --no-cache -t custom-sftp:alpine -f Dockerfile .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"編寫-K8s-YAML-檔案\"><a href=\"#編寫-K8s-YAML-檔案\" class=\"headerlink\" title=\"編寫 K8s YAML 檔案\"></a>編寫 K8s YAML 檔案</h2><p>因為我們要運行在 GKE 上面，需要編寫 YAML 以便運行與後續管理，這邊是使用 Deployment 的 Object，以下只截取部片重要片段，其餘部分需要自行補齊</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apps&#x2F;v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ftp</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">...</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      restartPolicy: Always</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: ftp</span><br><span class=\"line\">        image: [修改為剛剛上傳的映像檔路徑]</span><br><span class=\"line\">        imagePullPolicy: Always</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">          - containerPort: 22</span><br><span class=\"line\">        args:</span><br><span class=\"line\">          - rd::::upload</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">          - name: volume-test</span><br><span class=\"line\">            mountPath: &#x2F;home&#x2F;rd&#x2F;upload&#x2F;test</span><br><span class=\"line\">            subPath: upload-image</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: volume-test</span><br><span class=\"line\">          persistentVolumeClaim:</span><br><span class=\"line\">            claimName: mypvc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"snippet-解析\"><a href=\"#snippet-解析\" class=\"headerlink\" title=\"snippet 解析\"></a>snippet 解析</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">args:</span><br><span class=\"line\">  - rd::::upload</span><br></pre></td></tr></table></figure>\n\n<p>啟動參數的意義，這邊是 <code>rd::::upload</code>，這表示使用者帳號為rd，並且在家目錄底下建立一個 upload 的目錄(<code>/home/rd/upload</code>)，以便做存取，這樣我們就能夠將持久化硬碟掛載到 <code>/home/rd/upload</code> 路徑底下。</p>\n<blockquote>\n<p>使用者帳號可以自訂，不一定要使用rd</p>\n</blockquote>\n<p>可以看到 rd 的帳號並沒有設定密碼，在沒有設定密碼的情況下，表示認證會使用金鑰認證，那如果要使用密碼驗證可以這樣表示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rd:12345:::upload</span><br></pre></td></tr></table></figure>\n\n<p>這樣表示密碼為 12345</p>\n<h2 id=\"暴露一個-External-LoadBalace\"><a href=\"#暴露一個-External-LoadBalace\" class=\"headerlink\" title=\"暴露一個 External LoadBalace\"></a>暴露一個 External LoadBalace</h2><p>暴露外部 LB 這樣可以讓本機去存取到 GKE 內的服務，但是白名單記得要設定，以提高安全性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ftp-proxy</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: LoadBalancer</span><br><span class=\"line\">  loadBalancerIP: [填入自己的外網IP]</span><br><span class=\"line\">  loadBalancerSourceRanges:</span><br><span class=\"line\">  - [填入自己的白名單]</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - name: ssh</span><br><span class=\"line\">      port: 22</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">      targetPort: 22</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: ftp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"snippet-解析-1\"><a href=\"#snippet-解析-1\" class=\"headerlink\" title=\"snippet 解析\"></a>snippet 解析</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">ports:</span><br><span class=\"line\">  - name: ssh</span><br><span class=\"line\">    port: 22</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 22</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>其中這段 port 有沒有要改成其他非預設 22 port 都可以，以安全性角度來說可以做個修改，例如 <code>port: 14322</code>。 這樣連線時就使用 14322 做連線，GKE 就會自動做 port 的 mapping。</p>\n<h2 id=\"使用-FileZilla-測試\"><a href=\"#使用-FileZilla-測試\" class=\"headerlink\" title=\"使用 FileZilla 測試\"></a>使用 FileZilla 測試</h2><p>最後我們可以下載 FileZilla Client 來測試，如果剛才編寫 Deployment 的 YAML 時，啟動參數有設定密碼的話，就可以直接填入相關資訊做連線測試了。</p>\n<p>填入資訊</p>\n<ul>\n<li>主機: 填入External LoadBalance 的 IP</li>\n<li>使用者名稱: 填入啟動參數設定的使用者</li>\n<li>密碼: 填入啟動參數設定的密碼</li>\n<li>連接埠: 預設是22，如果剛剛在編寫 External LoadBalace 時，有修改 port，這邊記得要跟著變</li>\n</ul>\n<p>如果是使用金鑰驗證，我們要先設定好 private key 的位置，開啟 FileZilla Client，依照下圖點選到設定位置</p>\n<p>點選 編輯 → 設定</p>\n<p><img src=\"0.png\"></p>\n<p>選擇 SFTP 並點選「加入金鑰檔案」，此時會請你選擇 private key 的位置</p>\n<p><img src=\"1.png\"></p>\n<p>這邊要注意一下，如果一開始產生金鑰時有設定 passphrase，會跳出此視窗，主要是因為他需要將 .key 轉成 .ppk，這邊直接點「是」</p>\n<p><img src=\"2.png\"></p>\n<p>輸入設定的 passphrase</p>\n<p><img src=\"3.png\"></p>\n<p>選擇鑰儲存 .ppk 的位置與命名</p>\n<p><img src=\"4.png\"></p>\n<p>最後再回到主畫面將連線資訊填入，密碼不用填寫，當連線後，會請你輸入 passphrase 的密碼</p>"},{"title":"如何修改PHP-FPM上傳檔案大小限制","date":"2021-05-22T08:17:39.000Z","_content":"\n## 前言\n\n網頁上傳檔案屬於後端運作，如果檔案太大可能會造成上傳失敗，如果是採 Nginx + PHP-FPM 的架構，此時需要修改後端(PHP-FPM) `php.ini` 的相關參數設定。\n\n可以分為兩個面向：\n\n- 檔案上傳大小限制\n- 腳本執行時間或網路連線時間的長短限制\n\n<!--more-->\n\n相關參數如下：\n\n> 此處的數值為預設值\n\n```\n# 檔案上傳大小限制相關參數\nupload_max_filesize = 2M\npost_max_size = 8M\nmemory_limit = 128M\n\n# 腳本執行時間或網路連線時間的限制\nmax_execution_time = 60\nmax_input_time = 60\ndefault_socket_timeout = 60\n```\n\n## 解決方式\n\n依照自身需求，調整 `php.ini` 的相關參數設定\n\n```\n# 上傳單一檔案大小\nupload_max_filesize = 100M\n\n# 使用表單 POST 給 PHP 的大小上限(所有檔案大小加總)\npost_max_size = 8M\n\n# 單一 PHP 腳本使用記憶體的上限\nmemory_limit = 128M\n```\n\n這邊需要注意的是，上述參數之間的值有大小原則需要注意\n\n```\nmemory_limit > post_max_size > upload_max_filesize\n```\n\n到此就可以讓上傳檔案的大小再往上提升，不過接下來你可能會遇到檔案傳送到一半會斷線的情況，這代表傳送的檔案較大需要較多的時間，此時就需要再調整有關腳本執行的時間與網路連線的相關設定。\n\n---\n\n有關 PHP 腳本執行的時間與網路連線時間長短的相關參數：\n\n> 此處的數值為預設值\n\n```\n# PHP 腳本執行的時間上限(秒)，可避免無窮迴圈\nmax_execution_time = 30\n\n# 每個 PHP 腳本接收資料的時間上限(秒)，如果網路較慢，時間可能需要拉長\nmax_input_time = 60\n\n# Socket 無回應斷線時間上限\ndefault_socket_timeout = 60\n```\n\n> `max_input_time` 數值若為 -1 表示無限制時間\n\n此處可以依照自身的 PHP 腳本與網路環境來調整到符合自身的需求\n\n## 參考資料\n\n- https://blog.gtwang.org/web-development/php-ini-large-file-upload-configuration/\n","source":"_posts/如何修改PHP-FPM上傳檔案大小限制.md","raw":"---\ntitle: 如何修改PHP-FPM上傳檔案大小限制\ntags:\n  - PHP-FPM\n  - PHP\ndate: 2021-05-22 16:17:39\ncategories:\n  - PHP-FPM\n---\n\n## 前言\n\n網頁上傳檔案屬於後端運作，如果檔案太大可能會造成上傳失敗，如果是採 Nginx + PHP-FPM 的架構，此時需要修改後端(PHP-FPM) `php.ini` 的相關參數設定。\n\n可以分為兩個面向：\n\n- 檔案上傳大小限制\n- 腳本執行時間或網路連線時間的長短限制\n\n<!--more-->\n\n相關參數如下：\n\n> 此處的數值為預設值\n\n```\n# 檔案上傳大小限制相關參數\nupload_max_filesize = 2M\npost_max_size = 8M\nmemory_limit = 128M\n\n# 腳本執行時間或網路連線時間的限制\nmax_execution_time = 60\nmax_input_time = 60\ndefault_socket_timeout = 60\n```\n\n## 解決方式\n\n依照自身需求，調整 `php.ini` 的相關參數設定\n\n```\n# 上傳單一檔案大小\nupload_max_filesize = 100M\n\n# 使用表單 POST 給 PHP 的大小上限(所有檔案大小加總)\npost_max_size = 8M\n\n# 單一 PHP 腳本使用記憶體的上限\nmemory_limit = 128M\n```\n\n這邊需要注意的是，上述參數之間的值有大小原則需要注意\n\n```\nmemory_limit > post_max_size > upload_max_filesize\n```\n\n到此就可以讓上傳檔案的大小再往上提升，不過接下來你可能會遇到檔案傳送到一半會斷線的情況，這代表傳送的檔案較大需要較多的時間，此時就需要再調整有關腳本執行的時間與網路連線的相關設定。\n\n---\n\n有關 PHP 腳本執行的時間與網路連線時間長短的相關參數：\n\n> 此處的數值為預設值\n\n```\n# PHP 腳本執行的時間上限(秒)，可避免無窮迴圈\nmax_execution_time = 30\n\n# 每個 PHP 腳本接收資料的時間上限(秒)，如果網路較慢，時間可能需要拉長\nmax_input_time = 60\n\n# Socket 無回應斷線時間上限\ndefault_socket_timeout = 60\n```\n\n> `max_input_time` 數值若為 -1 表示無限制時間\n\n此處可以依照自身的 PHP 腳本與網路環境來調整到符合自身的需求\n\n## 參考資料\n\n- https://blog.gtwang.org/web-development/php-ini-large-file-upload-configuration/\n","slug":"如何修改PHP-FPM上傳檔案大小限制","published":1,"updated":"2023-10-04T15:33:37.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr4lmcb9001pmxv82mat65eg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>網頁上傳檔案屬於後端運作，如果檔案太大可能會造成上傳失敗，如果是採 Nginx + PHP-FPM 的架構，此時需要修改後端(PHP-FPM) <code>php.ini</code> 的相關參數設定。</p>\n<p>可以分為兩個面向：</p>\n<ul>\n<li>檔案上傳大小限制</li>\n<li>腳本執行時間或網路連線時間的長短限制</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>相關參數如下：</p>\n<blockquote>\n<p>此處的數值為預設值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 檔案上傳大小限制相關參數</span><br><span class=\"line\">upload_max_filesize &#x3D; 2M</span><br><span class=\"line\">post_max_size &#x3D; 8M</span><br><span class=\"line\">memory_limit &#x3D; 128M</span><br><span class=\"line\"></span><br><span class=\"line\"># 腳本執行時間或網路連線時間的限制</span><br><span class=\"line\">max_execution_time &#x3D; 60</span><br><span class=\"line\">max_input_time &#x3D; 60</span><br><span class=\"line\">default_socket_timeout &#x3D; 60</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解決方式\"><a href=\"#解決方式\" class=\"headerlink\" title=\"解決方式\"></a>解決方式</h2><p>依照自身需求，調整 <code>php.ini</code> 的相關參數設定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 上傳單一檔案大小</span><br><span class=\"line\">upload_max_filesize &#x3D; 100M</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用表單 POST 給 PHP 的大小上限(所有檔案大小加總)</span><br><span class=\"line\">post_max_size &#x3D; 8M</span><br><span class=\"line\"></span><br><span class=\"line\"># 單一 PHP 腳本使用記憶體的上限</span><br><span class=\"line\">memory_limit &#x3D; 128M</span><br></pre></td></tr></table></figure>\n\n<p>這邊需要注意的是，上述參數之間的值有大小原則需要注意</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memory_limit &gt; post_max_size &gt; upload_max_filesize</span><br></pre></td></tr></table></figure>\n\n<p>到此就可以讓上傳檔案的大小再往上提升，不過接下來你可能會遇到檔案傳送到一半會斷線的情況，這代表傳送的檔案較大需要較多的時間，此時就需要再調整有關腳本執行的時間與網路連線的相關設定。</p>\n<hr>\n<p>有關 PHP 腳本執行的時間與網路連線時間長短的相關參數：</p>\n<blockquote>\n<p>此處的數值為預設值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># PHP 腳本執行的時間上限(秒)，可避免無窮迴圈</span><br><span class=\"line\">max_execution_time &#x3D; 30</span><br><span class=\"line\"></span><br><span class=\"line\"># 每個 PHP 腳本接收資料的時間上限(秒)，如果網路較慢，時間可能需要拉長</span><br><span class=\"line\">max_input_time &#x3D; 60</span><br><span class=\"line\"></span><br><span class=\"line\"># Socket 無回應斷線時間上限</span><br><span class=\"line\">default_socket_timeout &#x3D; 60</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>max_input_time</code> 數值若為 -1 表示無限制時間</p>\n</blockquote>\n<p>此處可以依照自身的 PHP 腳本與網路環境來調整到符合自身的需求</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://blog.gtwang.org/web-development/php-ini-large-file-upload-configuration/\">https://blog.gtwang.org/web-development/php-ini-large-file-upload-configuration/</a></li>\n</ul>\n","site":{"data":{"post-body-end":"<div>\n  <script type=\"text/javascript\">\n    document.write(\n      \"<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 212px; width: 100%;' src='https://button.like.co/in/embed/winds6206/button?referrer=\" +\n      encodeURIComponent(location.href.split(\"?\")[0].split(\"#\")[0]) + \"'></iframe>\");\n  </script>\n<div>\n","styles":".links-of-recent-posts {\n  font-size: 0.8125em;\n  margin-top: 20px;\n}\n.links-of-recent-posts-title {\n  font-size: 1.03em;\n  font-weight: 600;\n  margin-top: 0;\n}\n.links-of-recent-posts-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n","sidebar":"\n"}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>網頁上傳檔案屬於後端運作，如果檔案太大可能會造成上傳失敗，如果是採 Nginx + PHP-FPM 的架構，此時需要修改後端(PHP-FPM) <code>php.ini</code> 的相關參數設定。</p>\n<p>可以分為兩個面向：</p>\n<ul>\n<li>檔案上傳大小限制</li>\n<li>腳本執行時間或網路連線時間的長短限制</li>\n</ul>","more":"<p>相關參數如下：</p>\n<blockquote>\n<p>此處的數值為預設值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 檔案上傳大小限制相關參數</span><br><span class=\"line\">upload_max_filesize &#x3D; 2M</span><br><span class=\"line\">post_max_size &#x3D; 8M</span><br><span class=\"line\">memory_limit &#x3D; 128M</span><br><span class=\"line\"></span><br><span class=\"line\"># 腳本執行時間或網路連線時間的限制</span><br><span class=\"line\">max_execution_time &#x3D; 60</span><br><span class=\"line\">max_input_time &#x3D; 60</span><br><span class=\"line\">default_socket_timeout &#x3D; 60</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解決方式\"><a href=\"#解決方式\" class=\"headerlink\" title=\"解決方式\"></a>解決方式</h2><p>依照自身需求，調整 <code>php.ini</code> 的相關參數設定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 上傳單一檔案大小</span><br><span class=\"line\">upload_max_filesize &#x3D; 100M</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用表單 POST 給 PHP 的大小上限(所有檔案大小加總)</span><br><span class=\"line\">post_max_size &#x3D; 8M</span><br><span class=\"line\"></span><br><span class=\"line\"># 單一 PHP 腳本使用記憶體的上限</span><br><span class=\"line\">memory_limit &#x3D; 128M</span><br></pre></td></tr></table></figure>\n\n<p>這邊需要注意的是，上述參數之間的值有大小原則需要注意</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memory_limit &gt; post_max_size &gt; upload_max_filesize</span><br></pre></td></tr></table></figure>\n\n<p>到此就可以讓上傳檔案的大小再往上提升，不過接下來你可能會遇到檔案傳送到一半會斷線的情況，這代表傳送的檔案較大需要較多的時間，此時就需要再調整有關腳本執行的時間與網路連線的相關設定。</p>\n<hr>\n<p>有關 PHP 腳本執行的時間與網路連線時間長短的相關參數：</p>\n<blockquote>\n<p>此處的數值為預設值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># PHP 腳本執行的時間上限(秒)，可避免無窮迴圈</span><br><span class=\"line\">max_execution_time &#x3D; 30</span><br><span class=\"line\"></span><br><span class=\"line\"># 每個 PHP 腳本接收資料的時間上限(秒)，如果網路較慢，時間可能需要拉長</span><br><span class=\"line\">max_input_time &#x3D; 60</span><br><span class=\"line\"></span><br><span class=\"line\"># Socket 無回應斷線時間上限</span><br><span class=\"line\">default_socket_timeout &#x3D; 60</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>max_input_time</code> 數值若為 -1 表示無限制時間</p>\n</blockquote>\n<p>此處可以依照自身的 PHP 腳本與網路環境來調整到符合自身的需求</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://blog.gtwang.org/web-development/php-ini-large-file-upload-configuration/\">https://blog.gtwang.org/web-development/php-ini-large-file-upload-configuration/</a></li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/Hexo加入Disqus留言功能/0.png","slug":"0.png","post":"clr4lmcav000lmxv8dzov24uf","modified":0,"renderable":0},{"_id":"source/_posts/TIME-WAIT狀態如何產生/TCPIP-0.png","slug":"TCPIP-0.png","post":"clr4lmcb4001dmxv81xf8f435","modified":0,"renderable":0},{"_id":"source/_posts/TIME-WAIT狀態如何產生/TCPIP-1.png","slug":"TCPIP-1.png","post":"clr4lmcb4001dmxv81xf8f435","modified":0,"renderable":0},{"_id":"source/_posts/TIME-WAIT狀態如何產生/TCPIP-2.png","slug":"TCPIP-2.png","post":"clr4lmcb4001dmxv81xf8f435","modified":0,"renderable":0},{"_id":"source/_posts/TIME-WAIT狀態如何產生/TCPIP-3.png","slug":"TCPIP-3.png","post":"clr4lmcb4001dmxv81xf8f435","modified":0,"renderable":0},{"_id":"source/_posts/TIME-WAIT狀態如何產生/TCPIP-4.png","slug":"TCPIP-4.png","post":"clr4lmcb4001dmxv81xf8f435","modified":0,"renderable":0},{"_id":"source/_posts/使用GitHub-Pages/1.png","slug":"1.png","post":"clr4lmcb7001imxv8h34fbzx4","modified":0,"renderable":0},{"_id":"source/_posts/在K8s使用FTP/0.png","slug":"0.png","post":"clr4lmcb8001lmxv82aui3de0","modified":0,"renderable":0},{"_id":"source/_posts/在K8s使用FTP/1.png","slug":"1.png","post":"clr4lmcb8001lmxv82aui3de0","modified":0,"renderable":0},{"_id":"source/_posts/在K8s使用FTP/2.png","slug":"2.png","post":"clr4lmcb8001lmxv82aui3de0","modified":0,"renderable":0},{"_id":"source/_posts/在K8s使用FTP/3.png","slug":"3.png","post":"clr4lmcb8001lmxv82aui3de0","modified":0,"renderable":0},{"_id":"source/_posts/在K8s使用FTP/4.png","slug":"4.png","post":"clr4lmcb8001lmxv82aui3de0","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clr4lmcal0006mxv841j0dr81","category_id":"clr4lmcam0008mxv8hi466udr","_id":"clr4lmcat000hmxv8embb66yi"},{"post_id":"clr4lmcaq000fmxv80t587l1i","category_id":"clr4lmcam0008mxv8hi466udr","_id":"clr4lmcaw000mmxv89fo5askh"},{"post_id":"clr4lmcal0007mxv892i7girr","category_id":"clr4lmcaq000dmxv8baze5qmc","_id":"clr4lmcax000qmxv887fl8xyc"},{"post_id":"clr4lmcas000gmxv88zsi8wsz","category_id":"clr4lmcam0008mxv8hi466udr","_id":"clr4lmcaz000smxv8avzwaw5v"},{"post_id":"clr4lmcan0009mxv8g3madhxf","category_id":"clr4lmcat000imxv84ldj1b16","_id":"clr4lmcb0000vmxv8hbkz180p"},{"post_id":"clr4lmcao000bmxv8d3i5hiwx","category_id":"clr4lmcaw000nmxv89xjyd8tk","_id":"clr4lmcb0000ymxv83lvhhy5p"},{"post_id":"clr4lmcap000cmxv80f5j31ht","category_id":"clr4lmcaz000tmxv8f6rgdzof","_id":"clr4lmcb30016mxv8hu20akkj"},{"post_id":"clr4lmcb1000zmxv85chm3bdg","category_id":"clr4lmcat000imxv84ldj1b16","_id":"clr4lmcb4001bmxv8btcs74l7"},{"post_id":"clr4lmcb20013mxv87j951xil","category_id":"clr4lmcam0008mxv8hi466udr","_id":"clr4lmcb5001emxv81tsf9971"},{"post_id":"clr4lmcau000kmxv89ew84xim","category_id":"clr4lmcb10010mxv8bbv9gx3g","_id":"clr4lmcb7001jmxv8c015aw8d"},{"post_id":"clr4lmcb4001amxv8f2evcmit","category_id":"clr4lmcam0008mxv8hi466udr","_id":"clr4lmcb8001mmxv87mqx8m7k"},{"post_id":"clr4lmcav000lmxv8dzov24uf","category_id":"clr4lmcb30017mxv8ciwd1z5k","_id":"clr4lmcb9001qmxv8359k4o3u"},{"post_id":"clr4lmcax000pmxv8972f4pa5","category_id":"clr4lmcb30017mxv8ciwd1z5k","_id":"clr4lmcba001umxv87bja0hiz"},{"post_id":"clr4lmcb8001lmxv82aui3de0","category_id":"clr4lmcaw000nmxv89xjyd8tk","_id":"clr4lmcbb001xmxv809ga0ndp"},{"post_id":"clr4lmcb9001pmxv82mat65eg","category_id":"clr4lmcat000imxv84ldj1b16","_id":"clr4lmcbb0020mxv890jg6g2k"},{"post_id":"clr4lmcay000rmxv86bxrf63v","category_id":"clr4lmcb30017mxv8ciwd1z5k","_id":"clr4lmcbb0022mxv87nwc4jv0"},{"post_id":"clr4lmcaz000umxv8h0010n7k","category_id":"clr4lmcb30017mxv8ciwd1z5k","_id":"clr4lmcbb0026mxv8fvrkdspv"},{"post_id":"clr4lmcb0000xmxv8fejp4rvy","category_id":"clr4lmcb30017mxv8ciwd1z5k","_id":"clr4lmcbc002bmxv82qrf7rbk"},{"post_id":"clr4lmcb30015mxv87o1x53a0","category_id":"clr4lmcb30017mxv8ciwd1z5k","_id":"clr4lmcbd002fmxv80ptq5g2d"},{"post_id":"clr4lmcb4001dmxv81xf8f435","category_id":"clr4lmcbc002amxv85ljlcnbw","_id":"clr4lmcbd002kmxv8cpra4bgi"}],"PostTag":[{"post_id":"clr4lmcb0000xmxv8fejp4rvy","tag_id":"clr4lmcaj0004mxv860iggrvt","_id":"clr4lmcb20012mxv8c1vnd3gt"},{"post_id":"clr4lmcb0000xmxv8fejp4rvy","tag_id":"clr4lmcb0000wmxv8bxxo7khf","_id":"clr4lmcb30014mxv8dmz7f77p"},{"post_id":"clr4lmcae0001mxv8ftih03qw","tag_id":"clr4lmcaj0004mxv860iggrvt","_id":"clr4lmcb40019mxv8faop27tp"},{"post_id":"clr4lmcae0001mxv8ftih03qw","tag_id":"clr4lmcao000amxv8d4hbcgby","_id":"clr4lmcb4001cmxv8dy6kftl8"},{"post_id":"clr4lmcae0001mxv8ftih03qw","tag_id":"clr4lmcaq000emxv8a59n3env","_id":"clr4lmcb5001gmxv80kbg8mr7"},{"post_id":"clr4lmcae0001mxv8ftih03qw","tag_id":"clr4lmcat000jmxv8787a5oyg","_id":"clr4lmcb7001kmxv8175jfb70"},{"post_id":"clr4lmcae0001mxv8ftih03qw","tag_id":"clr4lmcaw000omxv86wpzhk1k","_id":"clr4lmcb8001omxv818j8dt8f"},{"post_id":"clr4lmcae0001mxv8ftih03qw","tag_id":"clr4lmcb0000wmxv8bxxo7khf","_id":"clr4lmcba001smxv82rh3ef6z"},{"post_id":"clr4lmcb30015mxv87o1x53a0","tag_id":"clr4lmcaj0004mxv860iggrvt","_id":"clr4lmcba001vmxv84zok9q9j"},{"post_id":"clr4lmcb30015mxv87o1x53a0","tag_id":"clr4lmcb0000wmxv8bxxo7khf","_id":"clr4lmcbb001ymxv84b2j121z"},{"post_id":"clr4lmcb7001imxv8h34fbzx4","tag_id":"clr4lmcaj0004mxv860iggrvt","_id":"clr4lmcbb0021mxv8dl2pdloh"},{"post_id":"clr4lmcb7001imxv8h34fbzx4","tag_id":"clr4lmcao000amxv8d4hbcgby","_id":"clr4lmcbb0024mxv8hgwob7gx"},{"post_id":"clr4lmcb7001imxv8h34fbzx4","tag_id":"clr4lmcaq000emxv8a59n3env","_id":"clr4lmcbb0027mxv869v87v54"},{"post_id":"clr4lmcb7001imxv8h34fbzx4","tag_id":"clr4lmcb0000wmxv8bxxo7khf","_id":"clr4lmcbc0028mxv821993y0y"},{"post_id":"clr4lmcal0006mxv841j0dr81","tag_id":"clr4lmcb10011mxv8hph27s44","_id":"clr4lmcbc002cmxv87kih1pe3"},{"post_id":"clr4lmcal0006mxv841j0dr81","tag_id":"clr4lmcb30018mxv845z6bkv9","_id":"clr4lmcbc002dmxv8cjylg1o7"},{"post_id":"clr4lmcal0006mxv841j0dr81","tag_id":"clr4lmcb6001hmxv8glpr6qrz","_id":"clr4lmcbd002gmxv8ejkl1y24"},{"post_id":"clr4lmcal0006mxv841j0dr81","tag_id":"clr4lmcb9001rmxv87jnvhrf7","_id":"clr4lmcbd002hmxv899l40zin"},{"post_id":"clr4lmcal0006mxv841j0dr81","tag_id":"clr4lmcba001wmxv8cmg94oyk","_id":"clr4lmcbd002jmxv8f3m51057"},{"post_id":"clr4lmcal0006mxv841j0dr81","tag_id":"clr4lmcbb0023mxv87c195quy","_id":"clr4lmcbd002lmxv85qyacrx2"},{"post_id":"clr4lmcal0007mxv892i7girr","tag_id":"clr4lmcbc0029mxv8fafydj2p","_id":"clr4lmcbd002nmxv830g8hhaf"},{"post_id":"clr4lmcal0007mxv892i7girr","tag_id":"clr4lmcbd002emxv8dghu8an9","_id":"clr4lmcbd002omxv87otc7b57"},{"post_id":"clr4lmcal0007mxv892i7girr","tag_id":"clr4lmcbd002imxv817hx2vet","_id":"clr4lmcbe002qmxv8h16ef9v4"},{"post_id":"clr4lmcan0009mxv8g3madhxf","tag_id":"clr4lmcbd002mmxv8fy2f417i","_id":"clr4lmcbe002tmxv88e4rfilq"},{"post_id":"clr4lmcan0009mxv8g3madhxf","tag_id":"clr4lmcbe002pmxv8cv7kaqap","_id":"clr4lmcbe002umxv8cfbw7a6o"},{"post_id":"clr4lmcan0009mxv8g3madhxf","tag_id":"clr4lmcbe002rmxv81rhscs2b","_id":"clr4lmcbe002wmxv8dubodymj"},{"post_id":"clr4lmcao000bmxv8d3i5hiwx","tag_id":"clr4lmcbe002smxv8bja82wuh","_id":"clr4lmcbf0033mxv8c942gt17"},{"post_id":"clr4lmcao000bmxv8d3i5hiwx","tag_id":"clr4lmcbe002vmxv8co5n9w33","_id":"clr4lmcbf0034mxv8499j7c6p"},{"post_id":"clr4lmcao000bmxv8d3i5hiwx","tag_id":"clr4lmcbe002xmxv8aecq53fs","_id":"clr4lmcbg0036mxv87emr5f4s"},{"post_id":"clr4lmcao000bmxv8d3i5hiwx","tag_id":"clr4lmcbe002ymxv8axp944lp","_id":"clr4lmcbg0037mxv86sa5hmc0"},{"post_id":"clr4lmcao000bmxv8d3i5hiwx","tag_id":"clr4lmcbf002zmxv8hfhsf82m","_id":"clr4lmcbg0039mxv82y858wyh"},{"post_id":"clr4lmcao000bmxv8d3i5hiwx","tag_id":"clr4lmcbf0030mxv8ec364pdi","_id":"clr4lmcbg003amxv860bdewz2"},{"post_id":"clr4lmcao000bmxv8d3i5hiwx","tag_id":"clr4lmcbf0031mxv83aud3s38","_id":"clr4lmcbg003cmxv8c8fq4lfh"},{"post_id":"clr4lmcap000cmxv80f5j31ht","tag_id":"clr4lmcbf0032mxv84fr292vu","_id":"clr4lmcbh003emxv83c4der4n"},{"post_id":"clr4lmcap000cmxv80f5j31ht","tag_id":"clr4lmcb6001hmxv8glpr6qrz","_id":"clr4lmcbh003fmxv84p6766wj"},{"post_id":"clr4lmcap000cmxv80f5j31ht","tag_id":"clr4lmcba001wmxv8cmg94oyk","_id":"clr4lmcbh003hmxv84tljgow6"},{"post_id":"clr4lmcap000cmxv80f5j31ht","tag_id":"clr4lmcbe002rmxv81rhscs2b","_id":"clr4lmcbh003imxv89t2ag9mr"},{"post_id":"clr4lmcaq000fmxv80t587l1i","tag_id":"clr4lmcbg003dmxv8cdng440i","_id":"clr4lmcbi003pmxv85snh4wl8"},{"post_id":"clr4lmcaq000fmxv80t587l1i","tag_id":"clr4lmcb9001rmxv87jnvhrf7","_id":"clr4lmcbi003qmxv806kd85ng"},{"post_id":"clr4lmcaq000fmxv80t587l1i","tag_id":"clr4lmcba001wmxv8cmg94oyk","_id":"clr4lmcbi003smxv8a2qfapg8"},{"post_id":"clr4lmcaq000fmxv80t587l1i","tag_id":"clr4lmcbb0023mxv87c195quy","_id":"clr4lmcbj003tmxv82cf85en9"},{"post_id":"clr4lmcaq000fmxv80t587l1i","tag_id":"clr4lmcbi003lmxv8d6lhe6kv","_id":"clr4lmcbj003vmxv8fgvb25zd"},{"post_id":"clr4lmcaq000fmxv80t587l1i","tag_id":"clr4lmcbi003mmxv83gkl89ji","_id":"clr4lmcbj003wmxv8f4ym40j5"},{"post_id":"clr4lmcaq000fmxv80t587l1i","tag_id":"clr4lmcbi003nmxv8aw7hged4","_id":"clr4lmcbj003ymxv8aevxg7xu"},{"post_id":"clr4lmcas000gmxv88zsi8wsz","tag_id":"clr4lmcbi003omxv84iyk2007","_id":"clr4lmcbj0040mxv8cul17hli"},{"post_id":"clr4lmcas000gmxv88zsi8wsz","tag_id":"clr4lmcbi003rmxv8djwucrb6","_id":"clr4lmcbj0041mxv837c5anfg"},{"post_id":"clr4lmcas000gmxv88zsi8wsz","tag_id":"clr4lmcbj003umxv8b2fm80as","_id":"clr4lmcbk0043mxv8d0xy5xzy"},{"post_id":"clr4lmcas000gmxv88zsi8wsz","tag_id":"clr4lmcbj003xmxv86ij98a0p","_id":"clr4lmcbk0044mxv8h0tk5q7d"},{"post_id":"clr4lmcau000kmxv89ew84xim","tag_id":"clr4lmcbe002smxv8bja82wuh","_id":"clr4lmcbl0048mxv809ljdup8"},{"post_id":"clr4lmcau000kmxv89ew84xim","tag_id":"clr4lmcbe002vmxv8co5n9w33","_id":"clr4lmcbl0049mxv83ca5hbq6"},{"post_id":"clr4lmcau000kmxv89ew84xim","tag_id":"clr4lmcbk0045mxv8hdhv0k6z","_id":"clr4lmcbl004bmxv868fg3g70"},{"post_id":"clr4lmcau000kmxv89ew84xim","tag_id":"clr4lmcbk0046mxv8be3g5hzu","_id":"clr4lmcbm004cmxv8f7waciqf"},{"post_id":"clr4lmcav000lmxv8dzov24uf","tag_id":"clr4lmcaj0004mxv860iggrvt","_id":"clr4lmcbm004emxv8d1ce5gzn"},{"post_id":"clr4lmcav000lmxv8dzov24uf","tag_id":"clr4lmcb0000wmxv8bxxo7khf","_id":"clr4lmcbm004fmxv89mdwgdl4"},{"post_id":"clr4lmcav000lmxv8dzov24uf","tag_id":"clr4lmcbl004amxv8bceo92yc","_id":"clr4lmcbm004hmxv80y2r6n7g"},{"post_id":"clr4lmcax000pmxv8972f4pa5","tag_id":"clr4lmcaj0004mxv860iggrvt","_id":"clr4lmcbm004imxv865sl2y0g"},{"post_id":"clr4lmcax000pmxv8972f4pa5","tag_id":"clr4lmcb0000wmxv8bxxo7khf","_id":"clr4lmcbn004kmxv8gd4bhkjl"},{"post_id":"clr4lmcay000rmxv86bxrf63v","tag_id":"clr4lmcaj0004mxv860iggrvt","_id":"clr4lmcbn004lmxv8ei3gdulp"},{"post_id":"clr4lmcay000rmxv86bxrf63v","tag_id":"clr4lmcb0000wmxv8bxxo7khf","_id":"clr4lmcbn004nmxv88gs2fvgc"},{"post_id":"clr4lmcaz000umxv8h0010n7k","tag_id":"clr4lmcaj0004mxv860iggrvt","_id":"clr4lmcbn004omxv84vo9d430"},{"post_id":"clr4lmcaz000umxv8h0010n7k","tag_id":"clr4lmcb0000wmxv8bxxo7khf","_id":"clr4lmcbn004qmxv87mc50pgc"},{"post_id":"clr4lmcb1000zmxv85chm3bdg","tag_id":"clr4lmcbe002pmxv8cv7kaqap","_id":"clr4lmcbo004smxv8h2pa16ej"},{"post_id":"clr4lmcb1000zmxv85chm3bdg","tag_id":"clr4lmcbd002mmxv8fy2f417i","_id":"clr4lmcbo004tmxv8bsuxdpsi"},{"post_id":"clr4lmcb20013mxv87j951xil","tag_id":"clr4lmcbj003xmxv86ij98a0p","_id":"clr4lmcbo004ymxv83b1tbsmd"},{"post_id":"clr4lmcb20013mxv87j951xil","tag_id":"clr4lmcbo004umxv86mzgaigc","_id":"clr4lmcbo004zmxv8a9n3fpn5"},{"post_id":"clr4lmcb20013mxv87j951xil","tag_id":"clr4lmcbo004vmxv8ezyb6w8l","_id":"clr4lmcbp0051mxv828k5axuj"},{"post_id":"clr4lmcb20013mxv87j951xil","tag_id":"clr4lmcbo004wmxv80eyj2xvs","_id":"clr4lmcbp0052mxv807qdeadk"},{"post_id":"clr4lmcb4001amxv8f2evcmit","tag_id":"clr4lmcbo004xmxv88zts34on","_id":"clr4lmcbq0059mxv8aslohx2j"},{"post_id":"clr4lmcb4001amxv8f2evcmit","tag_id":"clr4lmcbp0050mxv86sfb71vu","_id":"clr4lmcbq005amxv89id9d2bb"},{"post_id":"clr4lmcb4001amxv8f2evcmit","tag_id":"clr4lmcbp0053mxv82hx6hw48","_id":"clr4lmcbq005cmxv86jz39e38"},{"post_id":"clr4lmcb4001amxv8f2evcmit","tag_id":"clr4lmcbp0054mxv8913l8zkk","_id":"clr4lmcbq005dmxv8h01dgolu"},{"post_id":"clr4lmcb4001amxv8f2evcmit","tag_id":"clr4lmcbj003xmxv86ij98a0p","_id":"clr4lmcbr005fmxv8dmcs0erc"},{"post_id":"clr4lmcb4001amxv8f2evcmit","tag_id":"clr4lmcbe002rmxv81rhscs2b","_id":"clr4lmcbr005gmxv8g2hq5mj8"},{"post_id":"clr4lmcb4001amxv8f2evcmit","tag_id":"clr4lmcbp0057mxv8cukigaz7","_id":"clr4lmcbr005imxv88z1ofp4n"},{"post_id":"clr4lmcb4001dmxv81xf8f435","tag_id":"clr4lmcbq0058mxv88ynp8v2p","_id":"clr4lmcbr005jmxv80086d36v"},{"post_id":"clr4lmcb8001lmxv82aui3de0","tag_id":"clr4lmcbe002smxv8bja82wuh","_id":"clr4lmcbs005omxv87ad0eyc3"},{"post_id":"clr4lmcb8001lmxv82aui3de0","tag_id":"clr4lmcbe002vmxv8co5n9w33","_id":"clr4lmcbs005pmxv825hm5tb8"},{"post_id":"clr4lmcb8001lmxv82aui3de0","tag_id":"clr4lmcbk0045mxv8hdhv0k6z","_id":"clr4lmcbs005rmxv8fs97bklq"},{"post_id":"clr4lmcb8001lmxv82aui3de0","tag_id":"clr4lmcbe002xmxv8aecq53fs","_id":"clr4lmcbs005smxv8epgw383f"},{"post_id":"clr4lmcb8001lmxv82aui3de0","tag_id":"clr4lmcbr005lmxv88hf12pjn","_id":"clr4lmcbs005tmxv85jgzcy24"},{"post_id":"clr4lmcb8001lmxv82aui3de0","tag_id":"clr4lmcbr005mmxv8f9xq47sm","_id":"clr4lmcbt005umxv8gnmt8snf"},{"post_id":"clr4lmcb9001pmxv82mat65eg","tag_id":"clr4lmcbe002pmxv8cv7kaqap","_id":"clr4lmcbt005vmxv81t6pc4ln"},{"post_id":"clr4lmcb9001pmxv82mat65eg","tag_id":"clr4lmcbd002mmxv8fy2f417i","_id":"clr4lmcbt005wmxv80g5p5hyl"}],"Tag":[{"name":"Hexo","_id":"clr4lmcaj0004mxv860iggrvt"},{"name":"GitHub","_id":"clr4lmcao000amxv8d4hbcgby"},{"name":"GitHub Pages","_id":"clr4lmcaq000emxv8a59n3env"},{"name":"Domain","_id":"clr4lmcat000jmxv8787a5oyg"},{"name":"DNS","_id":"clr4lmcaw000omxv86wpzhk1k"},{"name":"blog","_id":"clr4lmcb0000wmxv8bxxo7khf"},{"name":"Let's Encrypt","_id":"clr4lmcb10011mxv8hph27s44"},{"name":"SSL For Free","_id":"clr4lmcb30018mxv845z6bkv9"},{"name":"SSL","_id":"clr4lmcb6001hmxv8glpr6qrz"},{"name":"CA","_id":"clr4lmcb9001rmxv87jnvhrf7"},{"name":"HTTPS","_id":"clr4lmcba001wmxv8cmg94oyk"},{"name":"SSL憑證","_id":"clr4lmcbb0023mxv87c195quy"},{"name":"Mac","_id":"clr4lmcbc0029mxv8fafydj2p"},{"name":"homebrew","_id":"clr4lmcbd002emxv8dghu8an9"},{"name":"brew","_id":"clr4lmcbd002imxv817hx2vet"},{"name":"PHP","_id":"clr4lmcbd002mmxv8fy2f417i"},{"name":"PHP-FPM","_id":"clr4lmcbe002pmxv8cv7kaqap"},{"name":"Nginx","_id":"clr4lmcbe002rmxv81rhscs2b"},{"name":"GKE","_id":"clr4lmcbe002smxv8bja82wuh"},{"name":"GCP","_id":"clr4lmcbe002vmxv8co5n9w33"},{"name":"K8s","_id":"clr4lmcbe002xmxv8aecq53fs"},{"name":"kubernetes","_id":"clr4lmcbe002ymxv8axp944lp"},{"name":"stakater","_id":"clr4lmcbf002zmxv8hfhsf82m"},{"name":"reloader","_id":"clr4lmcbf0030mxv8ec364pdi"},{"name":"opensource","_id":"clr4lmcbf0031mxv83aud3s38"},{"name":"HSTS","_id":"clr4lmcbf0032mxv84fr292vu"},{"name":"openssl","_id":"clr4lmcbg003dmxv8cdng440i"},{"name":"certificate","_id":"clr4lmcbi003lmxv8d6lhe6kv"},{"name":"SHA256","_id":"clr4lmcbi003mmxv83gkl89ji"},{"name":"SHA-2","_id":"clr4lmcbi003nmxv8aw7hged4"},{"name":"Bash","_id":"clr4lmcbi003omxv84iyk2007"},{"name":"Auto Completion","_id":"clr4lmcbi003rmxv8djwucrb6"},{"name":"Bash Completion","_id":"clr4lmcbj003umxv8b2fm80as"},{"name":"Linux","_id":"clr4lmcbj003xmxv86ij98a0p"},{"name":"Google Cloud Platform","_id":"clr4lmcbk0045mxv8hdhv0k6z"},{"name":"Cloud NAT","_id":"clr4lmcbk0046mxv8be3g5hzu"},{"name":"Disqus","_id":"clr4lmcbl004amxv8bceo92yc"},{"name":"SSH","_id":"clr4lmcbo004umxv86mzgaigc"},{"name":"fingerprint","_id":"clr4lmcbo004vmxv8ezyb6w8l"},{"name":"known_hosts","_id":"clr4lmcbo004wmxv80eyj2xvs"},{"name":"htpasswd","_id":"clr4lmcbo004xmxv88zts34on"},{"name":"MD5","_id":"clr4lmcbp0050mxv86sfb71vu"},{"name":"SHA1","_id":"clr4lmcbp0053mxv82hx6hw48"},{"name":"Bcrypt","_id":"clr4lmcbp0054mxv8913l8zkk"},{"name":"Apache","_id":"clr4lmcbp0057mxv8cukigaz7"},{"name":"TCP","_id":"clr4lmcbq0058mxv88ynp8v2p"},{"name":"Kubernetes","_id":"clr4lmcbr005lmxv88hf12pjn"},{"name":"FTP","_id":"clr4lmcbr005mmxv8f9xq47sm"}]}}