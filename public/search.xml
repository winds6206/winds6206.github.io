<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>文章測試</title>
    <url>/2021/04/19/%E6%96%87%E7%AB%A0%E6%B8%AC%E8%A9%A6/</url>
    <content><![CDATA[<h1 id="容器原生負載平衡-Container-native-load-balancing"><a href="#容器原生負載平衡-Container-native-load-balancing" class="headerlink" title="容器原生負載平衡(Container-native load balancing)"></a>容器原生負載平衡(Container-native load balancing)</h1><p>容器原生負載平衡(Container-native load balancing) 就是使用 NEGs 的方式來達成，意指不使用 iptables 的方式來達到負載平衡，</p>
<blockquote>
<p>Container-native load balancing leverages a data model called network endpoint groups (NEGs). NEGs are collections of network endpoints represented by IP-port pairs.[1]</p>
</blockquote>
<span id="more"></span>

<p>一般來說如果是 GKE 1.16(含) 以下要啟用 NEG 功能，需要在 Service Object 的 annotation 加上 <code>cloud.google.com/neg: &#39;&#123;&quot;ingress&quot;: true&#125;&#39;</code>；而 GKE 1.17 以上(含) 預設已經啟用 NEG，無需額外添加 annotation</p>
<h2 id="啟用-NEGs-Network-Endpoint-Groups-的條件"><a href="#啟用-NEGs-Network-Endpoint-Groups-的條件" class="headerlink" title="啟用 NEGs(Network Endpoint Groups) 的條件"></a>啟用 NEGs(Network Endpoint Groups) 的條件</h2><ul>
<li>需使用 alias IPs(如果建立叢集時沒有指定 secondary IP，使用GCP預設發配的，就代表沒有 alias IPs)</li>
<li>GKE 1.16(含)以下 要啟用 NEG 功能，需要在 Service Object 的 annotation 加上 <code>cloud.google.com/neg: &#39;&#123;&quot;ingress&quot;: true&#125;&#39;</code></li>
<li>GKE 1.17 (含)以上 預設已經啟用 NEG，無需額外添加 annotation</li>
</ul>
<p>alias IPs是否啟用，可以使用以下指令去檢查 <code>useIpAliases</code> 的項目是否為 True</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcloud container clusters describe [叢集名稱] --project&#x3D;[專案ID] --region&#x3D;[叢集所在Region]</span><br></pre></td></tr></table></figure>

<p>—test—</p>
]]></content>
      <tags>
        <tag>GCP</tag>
      </tags>
  </entry>
  <entry>
    <title>在 K8s 使用 FTP</title>
    <url>/2021/04/26/%E5%9C%A8K8s%E4%BD%BF%E7%94%A8FTP/</url>
    <content><![CDATA[<h1 id="在-K8s-使用-FTP"><a href="#在-K8s-使用-FTP" class="headerlink" title="在 K8s 使用 FTP"></a>在 K8s 使用 FTP</h1><p>近期因公司內部的需求，需要在本機存取 K8s 內持久化儲存的檔案，原先想使用 NFS 架構來做掛載存取，但是因為這樣有點過於麻煩，後來才想使用 FTP 來實現，下方說明如何在 K8s 實現 FTP 功能，讓本機環境可以存取到持久化硬碟。</p>
<span id="more"></span>

<p>這邊實現的是 SFTP 使用 22 port 連線，存取認證方式可以是使用「金鑰」或是「帳號/密碼驗證」</p>
<p>這邊先簡單羅列步驟：</p>
<ol>
<li>產生 ssh 認證使用的金鑰</li>
<li>編寫 Dockerfile</li>
<li>編寫 K8s YAML 檔案</li>
<li>暴露一個 External LoadBalace</li>
<li>使用 FileZilla 測試</li>
</ol>
<blockquote>
<p>環境是使用 GKE(Google Kubernetes Engine)</p>
</blockquote>
<h2 id="產生-ssh-金鑰"><a href="#產生-ssh-金鑰" class="headerlink" title="產生 ssh 金鑰"></a>產生 ssh 金鑰</h2><p>產生 ssh 金鑰是為了讓後續連線時，可以使用金鑰作為驗證，這邊是使用 Mac 的終端機產生，指令參照以下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 sftp_key</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Passphrase 設不設定都可以，如果有設定的話，最後以 FileZilla 測試時，private key 需要額外產生 .ppk 檔才能使用，後續會講解</p>
</blockquote>
<p>完成後，在你目前位置的目錄上會出現一對金鑰，一個為 public key 另一個為 private key</p>
<blockquote>
<p>一般來說，我們都會習慣把金鑰統一放置在本機家目錄底下的 .ssh 目錄內，如果自己有習慣的放置地方也可以放到自己習慣的位置</p>
</blockquote>
<h2 id="編寫-Dockerfile"><a href="#編寫-Dockerfile" class="headerlink" title="編寫 Dockerfile"></a>編寫 Dockerfile</h2><p>我們需要將 public key 放進映像檔中，這樣在連線時才有辦法做金鑰驗證。 要實現這方式有兩個：</p>
<ul>
<li>在 ftp 服務啟動時以 volume 方式掛載 public key 到相對位置</li>
<li>直接複製到映像檔內</li>
</ul>
<p>這邊採用的是第二種方式，編寫 Dockerfile 並將 public key 放進去，我們要將  public key 放到使用者家目錄底下的 <code>./.ssh/keys</code> 位置，所以我們需要建立相對應路徑，並將複製進去，可以參考以下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM atmoz&#x2F;sftp:alpine</span><br><span class="line"></span><br><span class="line">RUN mkdir -p &#x2F;home&#x2F;rd&#x2F;.ssh&#x2F;keys</span><br><span class="line">COPY .&#x2F;sftp_key.pub &#x2F;home&#x2F;rd&#x2F;.ssh&#x2F;keys&#x2F;</span><br></pre></td></tr></table></figure>

<p>這邊使用的 base image 是 atmoz/sftp:alpine，當然你也可以選擇其他版本(eg. debian…)。</p>
<p>最後進行 docker build 的動作，並上傳到存放區</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker build --no-cache -t custom-sftp:alpine -f Dockerfile .</span><br></pre></td></tr></table></figure>

<h2 id="編寫-K8s-YAML-檔案"><a href="#編寫-K8s-YAML-檔案" class="headerlink" title="編寫 K8s YAML 檔案"></a>編寫 K8s YAML 檔案</h2><p>因為我們要運行在 GKE 上面，需要編寫 YAML 以便運行與後續管理，這邊是使用 Deployment 的 Object，以下只截取部片重要片段，其餘部分需要自行補齊</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: ftp</span><br><span class="line">  namespace: default</span><br><span class="line">...</span><br><span class="line">    spec:</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      containers:</span><br><span class="line">      - name: ftp</span><br><span class="line">        image: [修改為剛剛上傳的映像檔路徑]</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        ports:</span><br><span class="line">          - containerPort: 22</span><br><span class="line">        args:</span><br><span class="line">          - rd::::upload</span><br><span class="line">        volumeMounts:</span><br><span class="line">          - name: volume-test</span><br><span class="line">            mountPath: &#x2F;home&#x2F;rd&#x2F;upload&#x2F;test</span><br><span class="line">            subPath: upload-image</span><br><span class="line">      volumes:</span><br><span class="line">        - name: volume-test</span><br><span class="line">          persistentVolumeClaim:</span><br><span class="line">            claimName: mypvc</span><br></pre></td></tr></table></figure>

<h3 id="snippet-解析"><a href="#snippet-解析" class="headerlink" title="snippet 解析"></a>snippet 解析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">args:</span><br><span class="line">  - rd::::upload</span><br></pre></td></tr></table></figure>

<p>啟動參數的意義，這邊是 <code>rd::::upload</code>，這表示使用者帳號為rd，並且在家目錄底下建立一個 upload 的目錄(<code>/home/rd/upload</code>)，以便做存取，這樣我們就能夠將持久化硬碟掛載到 <code>/home/rd/upload</code> 路徑底下。</p>
<p>可以看到 rd 的帳號並沒有設定密碼，在沒有設定密碼的情況下，表示認證會使用金鑰認證，那如果要使用密碼驗證可以這樣表示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rd:12345:::upload</span><br></pre></td></tr></table></figure>

<p>這樣表示密碼為 12345</p>
<h2 id="暴露一個-External-LoadBalace"><a href="#暴露一個-External-LoadBalace" class="headerlink" title="暴露一個 External LoadBalace"></a>暴露一個 External LoadBalace</h2><p>暴露外部 LB 這樣可以讓本機去存取到 GKE 內的服務，但是白名單記得要設定，以提高安全性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: ftp-proxy</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  type: LoadBalancer</span><br><span class="line">  loadBalancerIP: [填入自己的外網IP]</span><br><span class="line">  loadBalancerSourceRanges:</span><br><span class="line">  - [填入自己的白名單]</span><br><span class="line">  ports:</span><br><span class="line">    - name: ssh</span><br><span class="line">      port: 22</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: 22</span><br><span class="line">  selector:</span><br><span class="line">    app: ftp</span><br></pre></td></tr></table></figure>

<h3 id="snippet-解析-1"><a href="#snippet-解析-1" class="headerlink" title="snippet 解析"></a>snippet 解析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">ports:</span><br><span class="line">  - name: ssh</span><br><span class="line">    port: 22</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 22</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>其中這段 port 有沒有要改成其他非預設 22 port 都可以，以安全性角度來說可以做個修改，例如 <code>port: 14322</code>。 這樣連線時就使用 14322 做連線，GKE 就會自動做 port 的 mapping。</p>
<h2 id="使用-FileZilla-測試"><a href="#使用-FileZilla-測試" class="headerlink" title="使用 FileZilla 測試"></a>使用 FileZilla 測試</h2><p>最後我們可以下載 FileZilla Client 來測試，如果剛才編寫 Deployment 的 YAML 時，啟動參數有設定密碼的話，就可以直接填入相關資訊做連線測試了。</p>
<p>填入資訊</p>
<ul>
<li>主機: 填入External LoadBalance 的 IP</li>
<li>使用者名稱: 填入啟動參數設定的使用者</li>
<li>密碼: 填入啟動參數設定的密碼</li>
<li>連接埠: 預設是22，如果剛剛在編寫 External LoadBalace 時，有修改 port，這邊記得要跟著變</li>
</ul>
<p>如果是使用金鑰驗證，我們要先設定好 private key 的位置，開啟 FileZilla Client，依照下圖點選到設定位置</p>
<p>點選 編輯 &gt; 設定</p>
<p><img src="0.png"></p>
<p>選擇 SFTP 並點選「加入金鑰檔案」，此時會請你選擇 private key 的位置</p>
<p><img src="1.png"></p>
<p>這邊要注意一下，如果一開始產生金鑰時有設定 passphrase，會跳出此視窗，主要是因為他需要將 .key 轉成 .ppk，這邊直接點「是」</p>
<p><img src="2.png"></p>
<p>輸入設定的 passphrase</p>
<p><img src="3.png"></p>
<p>選擇鑰儲存 .ppk 的位置與命名</p>
<p><img src="4.png"></p>
<p>最後再回到主畫面將連線資訊填入，密碼不用填寫，當連線後，會請你輸入 passphrase 的密碼</p>
]]></content>
      <tags>
        <tag>GCP</tag>
        <tag>GKE</tag>
        <tag>K8s</tag>
        <tag>kubernetes</tag>
        <tag>ftp</tag>
      </tags>
  </entry>
</search>
